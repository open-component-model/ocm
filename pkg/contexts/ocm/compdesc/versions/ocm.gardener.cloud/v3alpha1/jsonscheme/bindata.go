// Code generated by go-bindata. (@generated) DO NOT EDIT.

// Package jsonscheme generated by go-bindata.
// sources:
// ../../../../../../../../resources/component-descriptor-ocm-v3-schema.yaml
package jsonscheme

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _ResourcesComponentDescriptorOcmV3SchemaYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x1a\xdb\x72\xdb\xb8\xf5\x5d\x5f\x71\x66\xed\x19\xda\xb1\x29\xd9\x4e\xd3\x99\xe8\xc5\xe3\x66\xa7\x33\x99\x76\xd7\x3b\xc9\xb6\x0f\x75\xd4\x1d\x88\x3c\x12\x91\x05\x01\x15\x00\x15\x73\xb3\xf9\xf7\x0e\x00\x82\x37\x91\xa2\x2e\x76\xda\x4e\xe3\x17\x0b\xe0\xb9\xe1\xe0\xdc\xc9\x53\x1a\x4f\x21\x48\xb4\x5e\xa9\xe9\x64\xb2\x24\x32\x46\x8e\x72\x1c\x31\x91\xc5\x13\x15\x25\x98\x12\x35\x89\x44\xba\x12\x1c\xb9\x0e\x63\x54\x91\xa4\x2b\x2d\x64\x28\xa2\x34\x5c\xbf\x24\x6c\x95\x90\xeb\x60\x74\xea\x60\x6b\xb4\x3e\x2a\xc1\x43\xb7\x3b\x16\x72\x39\x89\x25\x59\xe8\xc9\xcd\xd5\xcd\x55\x78\x7d\x53\x90\x0e\x46\x9e\x20\x15\x7c\x0a\xc1\xfd\x9b\x1f\xe0\x8d\x67\x06\xdf\x97\xcc\x60\xfd\x12\x2a\x8c\x05\xe5\xd4\x20\xa8\xe9\x08\x20\x45\x4d\xcc\x7f\x00\x9d\xaf\x70\x0a\x81\x98\x7f\xc4\x48\x07\x76\xab\x49\xbd\x3c\x06\xac\x51\x2a\x2a\xb8\x45\x8e\x89\x26\x0e\x5a\xe2\xbf\x32\x2a\x31\x76\xe4\x00\x42\x08\x38\x49\x31\xa8\x96\x05\x9e\xdb\x21\x71\x6c\xc5\x20\xec\x27\x29\x56\x28\x35\x45\x35\x85\x05\x61\x0a\xed\xf3\x55\xb5\x5b\x50\x30\xd4\xfc\x6f\x80\x53\x89\x8b\x29\x04\x27\x93\xda\x89\x2a\x55\xff\x58\xe3\x5c\xb0\x1d\x40\x95\xc8\xc8\x23\xc6\xef\x31\x5d\xa3\xf4\xa8\x8c\xcc\x91\xa9\x01\x4c\x07\xe4\x51\x56\x52\xac\x69\x8c\x72\x00\xc9\x83\x05\xa3\x51\x93\x4d\x71\x0f\x44\x4a\x92\x3b\x9a\x54\x63\x5a\xca\xd0\x2f\x41\xe0\x09\xf5\xde\xe7\x0e\x37\x44\x58\x56\xac\x87\xf4\xef\xe8\x2b\x2d\x29\x5f\x7a\x45\x1b\xec\x29\x7c\xfe\x32\x78\xc1\x23\x80\xc6\x55\x35\x44\x76\x34\x9d\x14\x29\x79\xfc\x2b\xf2\xa5\x4e\xa6\x70\xf3\xea\x95\x13\x8c\x68\x8d\xd2\x58\xe4\x3f\x1f\x48\xf8\xdb\x55\xf8\x7a\xfc\x21\x9c\x5d\x3c\x8c\x67\x66\x39\xfb\x7c\x73\xf9\x87\x2f\x93\x87\xd0\x3d\x9a\xfc\x32\x9e\xbd\x38\xb5\x4a\xa6\x31\x72\x4d\x75\x7e\xa7\xb5\xa4\xf3\x4c\xe3\x5f\x30\x77\x7c\x53\xca\x4b\x26\x3d\x2c\x66\x67\x0f\xe1\x2f\x17\xc5\xef\x17\x7e\xf3\xfc\xd6\x91\x6e\xd8\x8e\xa3\x79\x02\x9a\xfc\x8a\x1c\x16\x52\xa4\xa0\xec\x03\xe3\xc7\x40\x78\x0c\x24\xfe\x98\x29\x8d\x31\x68\x01\x84\x31\xf1\x09\x08\x07\xb1\x72\xca\x02\x86\x24\xa6\x7c\x09\xc1\x3a\xb8\x84\x94\x7c\x34\xc1\x82\xb3\xfc\xd2\xa2\xda\xf5\x38\xa5\xbc\xd8\xf5\xbc\x12\xaa\x20\x45\xc2\x15\xe8\x04\x61\x21\x0c\x55\x43\xc4\xe9\x52\x01\x91\x68\x58\x99\x2b\xa2\x71\x53\x5e\xe5\x05\xbe\x1e\xdf\x8c\x5f\xd6\x7f\x87\x0b\x21\x2e\xe6\x44\x16\x7b\xeb\x3a\xc0\xba\x0b\xe2\x7a\x7c\xe3\x7f\x95\x60\x35\xf8\xf2\x67\x03\xad\xae\xec\xf5\xec\xf6\xec\xea\xf7\x87\xeb\xf0\xf5\xec\x43\xfc\xe2\xfc\xec\x76\xfa\x61\x5c\xdf\x38\xbf\xed\xde\x0a\xcf\xce\x6e\xa7\xd5\xe6\xef\x1f\x62\x7b\x47\x77\xe1\x3f\xc2\xd9\xc3\x55\xf8\xda\xff\xf6\x24\x77\x04\x3e\xf7\x1c\x2f\xce\xea\x0f\x2e\x2c\x91\xc6\x8e\x85\x3c\x0d\xba\xcc\xb8\xcb\xf4\x7a\x5d\xb4\xf0\xba\xdc\x38\x85\x9a\xc2\xe7\x6e\x7f\xef\x32\xe5\x00\xbe\x38\x53\x5c\x09\x45\xb5\x90\xf9\x1b\xc1\x35\x3e\xea\x7d\xa2\x81\x81\xea\xf3\x7e\x4b\xa1\xe5\xfd\xf5\x33\x8a\x88\xbe\xeb\xe6\x4d\x18\xbb\x5f\x54\x5c\x7a\xa2\x6f\x0b\xb5\x0a\x4a\x6d\x39\x0b\x59\xe7\x44\xe1\xdf\x24\x0b\xca\xdd\x4d\x91\xcd\x5f\x01\x56\xdf\xea\x0c\x34\xee\xaf\x11\x94\x7e\x20\xab\x15\xe5\xcb\x1d\x51\x01\x90\x67\xe9\x14\x1e\x82\x4c\xb2\x9f\x88\x4e\x82\x4b\x08\x54\x42\x6e\x5e\xfd\x31\x8c\xe9\x12\x95\x0e\x66\xa3\x16\x9d\x7d\x29\x5b\x1d\x2f\xa9\xd2\x32\x37\xd4\xef\xdf\xbc\x2d\x97\x33\x73\x07\x24\x8a\x50\xa9\x1d\xf3\xb9\xd1\x8c\x85\x82\x85\x90\x05\x2a\x2a\x38\x33\x2b\x7c\xd4\xc8\x4d\xd2\x54\xe7\x03\xc6\x32\x02\x58\x52\x9d\x64\xf3\xbb\xed\xbc\xb7\x5a\x9b\x5d\x1a\x13\xa8\x5d\xa8\xdd\x59\x1c\x64\x8d\x6d\xb5\x39\x01\x4b\xf5\x17\x8c\x06\xd0\x8d\x95\x6e\x87\x88\x44\x9a\x52\xbd\xcd\x27\xb8\xe0\x78\x8c\x5e\x8e\x3c\xf7\x8f\x82\xa3\x33\x0c\x25\x32\x19\xe1\xf7\xa5\xc3\xed\x21\x8e\xc9\xfa\xe5\xa2\x28\xa5\xca\xb5\xa1\x50\x2e\x9c\x09\xed\x51\x3c\x6c\x08\xbe\x7b\xb0\x2b\x50\xf0\x51\x4b\xf2\xb6\x00\x18\xa8\xb8\x36\xe8\x3c\x41\x7d\xb8\xaf\x19\x96\x36\x78\x40\x61\x59\x77\x6e\xbb\xe6\xf9\xfd\xa2\x19\x14\x3b\xa9\x38\xbc\x60\x18\xb0\xee\xc7\x3b\x80\x9b\x4e\xc5\x03\x8f\x00\x5c\x8c\x7b\xbf\xc2\x68\x0f\xe3\x4a\x88\x4a\xee\xd8\x52\x48\xaa\x93\xb4\x32\x39\x21\x53\xc2\xa8\x22\x86\xd1\xe6\x63\x5b\x66\x1e\xd8\x43\x34\x18\x6e\x2d\x66\xbb\x85\xd8\xa1\xfe\xed\x86\x30\x4e\x48\x97\x9c\xe8\x4c\xe2\x9e\x4a\x22\x5b\x34\x60\x56\x29\xc6\x94\xfc\xec\x3d\x71\x7f\x9d\x90\xa3\x0f\xe7\xb6\x4a\x39\x2a\xa8\x66\xc6\xf9\x39\x41\x07\xe4\xd2\x8e\x58\xd8\x62\xb5\x54\x0b\xd4\xba\x8f\xad\xfa\x3b\x34\x7a\x39\x13\x2d\x97\x25\xbd\x03\xf5\x36\xd8\x0f\x39\x7e\x03\x4e\x5e\xf9\x8d\x3f\x79\xeb\x9c\xbd\x98\x0d\x7b\xb2\x3e\xa8\x64\xf4\xce\xa7\xad\xc1\xfc\x4f\x4c\x8a\x43\x89\x3c\x42\xdb\x88\xc0\x59\x35\xa8\x60\x22\x22\xec\xbc\x48\x1b\x7d\xb9\xc8\x07\xd4\xf7\xc8\x30\xd2\x62\xa8\xe3\xed\x8d\xbf\x7b\xc5\x42\x5b\xe2\x16\x62\x1f\x7a\xd0\xf2\x9c\xbb\xb6\xc5\x9d\x63\x85\xe3\x07\x1a\x1d\x2d\x70\xef\xf9\x3b\x45\xd8\x96\x54\xe1\x04\x48\xa4\x33\xc2\x58\x3e\xad\x38\x85\xd6\xf3\x3e\x4d\x40\xad\x30\xa2\x84\x81\x44\x03\x1f\x59\x26\xff\xbb\x79\xf8\x80\x74\xda\x76\x4e\xc1\xb1\x9d\x4e\x0b\x85\xf2\x8c\xb1\x1d\xf2\x61\xdd\x91\xad\x95\x3a\xef\xa9\x02\xe2\x9e\x15\xb9\x27\xa0\xf6\x1d\xaf\xc1\x89\xc5\xb7\x3e\x5c\x51\xb9\x2c\x86\x04\x99\xd2\x90\x12\x1d\x25\x35\x37\x50\x1b\x85\xdd\x66\x71\xce\x6c\x22\xac\x6d\xd5\xeb\x8a\x6f\xf5\x5e\x79\x2a\x17\x83\xd5\x06\x54\x6d\xa0\x07\xed\xa1\x5e\xaf\x10\x8e\x58\xd5\x92\xb8\x4b\xd8\xb9\xe2\xb4\x26\x60\x3a\x45\xd3\xcf\x49\x4e\xd8\x7f\x75\xfd\x29\x22\xfa\x27\x26\x76\x2f\x40\xed\xe9\xfe\x4c\x19\xaa\x5c\x69\x4c\xf7\xc7\xbd\xef\x62\xf8\xdc\x71\x41\x44\xf4\x6d\x4a\x96\x47\xf5\x85\x76\x49\x0d\x95\x77\x3e\xb3\x3d\x49\xc3\x58\x9f\x2f\x78\x4b\x69\xb2\x19\x98\x00\x55\xea\x3c\xe2\x60\x8c\xe4\xde\xe3\x8e\x3b\x0f\x04\x85\x48\x01\x54\xbd\xff\xa2\xaf\x3a\xbd\x33\x07\x68\x96\x0a\xa6\x3c\x4d\x09\xa7\x0b\x54\xba\x5d\x97\xb6\x98\x1e\x58\xfc\x3a\xcd\xb8\xd0\xec\x1c\xc5\x49\xa0\x40\x8b\x01\x8e\x6d\x43\xdd\x64\xe7\x20\x3c\x2b\x4d\xe4\x12\x35\xc6\x10\x09\xae\xcb\xe2\xa7\x97\xbc\xa2\xbf\x6d\x3d\x8b\x79\x0e\x94\xc3\x3c\xd7\xa8\x3c\x8f\xb9\x51\x76\x9b\x2e\xcf\xd2\xb9\x7f\xd1\xd1\xe7\xb2\x47\x98\xcb\x82\x32\xac\x32\xe1\xb1\x16\xd3\x21\x61\x65\x3d\x9e\x55\x9f\x5e\xfc\xf3\xba\x3a\x40\x27\x44\x03\x55\xf6\xec\x46\xfd\x94\xdb\x67\xdf\x99\x87\xea\x3b\x88\xa9\xb4\xd5\x73\xde\x7b\x1f\x5e\x6f\xf7\x4f\xe4\x5f\xcf\xa0\xb0\xfb\xb6\x9f\x6d\x37\xce\xa6\x61\x5a\x7f\x87\x4f\x54\x27\x85\x6a\xa2\x4c\x4a\xe4\xba\x2a\x50\xa0\x7a\x71\xba\x4d\x4b\x3e\xb4\xbe\x2b\x6a\x9e\x63\x5e\x84\xd5\x2b\xfb\x2e\x25\x7e\xab\x7e\x86\x73\x89\xbd\x8c\xa7\x2c\x39\xfa\xca\x86\x5a\x42\xfd\x3a\x69\x7c\x04\x50\x8d\xbf\x8e\x70\xc5\xcc\xcf\xbb\x8f\x4c\xdc\x46\x98\x52\xd1\xd9\x96\xd9\xf6\x08\x60\x89\x1c\x25\x8d\xfe\x83\x73\xe9\x42\x02\x37\x9a\x2e\x16\x5f\xdb\x67\x9f\x66\xdc\xf3\x7f\xe6\xd3\xd5\xc5\xb9\xfd\xe7\x72\xe9\x86\x89\x7e\xad\xc2\xbc\xf9\xe1\xc6\xbe\x16\xf8\x2c\xf6\xb4\xef\x64\x4c\x6d\x1b\x2c\x37\x53\xb0\x9d\xff\x2c\x68\x64\x1b\x4a\x9f\x89\x8b\xca\xd0\x2c\x6b\x53\x32\x6f\x5e\xfa\xd0\x93\x16\x13\x88\x27\x6a\x89\x5b\xaf\xb2\x6a\xef\xeb\x5c\xe1\xfe\x44\x7c\x64\xb3\xb3\xaa\x06\x3a\xfb\xd3\xdf\xe8\x94\xb7\xbc\x06\xaf\x86\x46\xc1\x2e\x08\xed\x92\x67\x27\xa4\x56\xc8\x0d\x46\xa3\x96\xb9\xd4\x2d\xdd\xc4\xcd\x15\xfd\x7b\x15\x5b\x43\x08\x7e\xa5\x3c\x2e\x7e\xd6\xbf\x01\x0b\x9d\x59\x05\xa3\xa6\x09\x54\xe8\x0d\xdb\xac\x9b\x7a\xad\x61\x4b\xc7\xad\xcf\xe8\xca\xaf\xe4\x6c\x71\x69\x58\xf7\x92\x89\x04\x57\x7a\x0a\x41\xf9\x11\x5c\x4d\x6c\x2f\xa8\x43\xee\xd4\x8b\x01\x09\xba\xbe\xa1\xd8\xed\xd3\xac\xd6\x35\xf7\xdf\xd8\xc6\x77\x12\x01\x9c\xf8\xa2\x97\xe5\x97\xf0\x09\x41\x70\x96\x17\xdf\x06\xd9\xde\x50\x70\x6c\xf8\x77\xb7\x6b\x14\x2f\x11\xca\x17\x03\x47\x7c\x52\x56\xd2\x08\xfe\x1d\x00\x00\xff\xff\xaf\xe0\xab\x1f\xe4\x28\x00\x00")

func ResourcesComponentDescriptorOcmV3SchemaYamlBytes() ([]byte, error) {
	return bindataRead(
		_ResourcesComponentDescriptorOcmV3SchemaYaml,
		"../../../../../../../../resources/component-descriptor-ocm-v3-schema.yaml",
	)
}

func ResourcesComponentDescriptorOcmV3SchemaYaml() (*asset, error) {
	bytes, err := ResourcesComponentDescriptorOcmV3SchemaYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../../../../../../../../resources/component-descriptor-ocm-v3-schema.yaml", size: 10468, mode: os.FileMode(420), modTime: time.Unix(1659335952, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"../../../../../../../../resources/component-descriptor-ocm-v3-schema.yaml": ResourcesComponentDescriptorOcmV3SchemaYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("nonexistent") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"..": &bintree{nil, map[string]*bintree{
		"..": &bintree{nil, map[string]*bintree{
			"..": &bintree{nil, map[string]*bintree{
				"..": &bintree{nil, map[string]*bintree{
					"..": &bintree{nil, map[string]*bintree{
						"..": &bintree{nil, map[string]*bintree{
							"..": &bintree{nil, map[string]*bintree{
								"..": &bintree{nil, map[string]*bintree{
									"resources": &bintree{nil, map[string]*bintree{
										"component-descriptor-ocm-v3-schema.yaml": &bintree{ResourcesComponentDescriptorOcmV3SchemaYaml, map[string]*bintree{}},
									}},
								}},
							}},
						}},
					}},
				}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
