// Code generated by go-bindata. (@generated) DO NOT EDIT.

//Package jsonscheme generated by go-bindata.// sources:
// ../../../../../../../resources/component-descriptor-v2-schema.yaml
package jsonscheme

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _ResourcesComponentDescriptorV2SchemaYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x59\x4f\x6f\x1b\xb7\x12\xbf\xeb\x53\x0c\x60\x03\x94\x62\xaf\x64\xeb\x21\x87\xec\xc5\x08\x92\xcb\xc3\x7b\x6d\x8a\x24\xe8\xa1\x8a\x6a\xd0\xbb\xb3\x12\xdd\x5d\x72\x4b\x52\x8a\xd5\xc4\xdf\xbd\x20\xb9\xdc\xff\x2b\x4b\x72\xd2\xa2\x68\x0e\xb1\x38\x1c\x0e\x87\x33\xbf\xf9\x27\x9d\xb3\x38\x04\xb2\xd6\x3a\x57\xe1\x6c\xb6\xa2\x32\x46\x8e\x72\x1a\xa5\x62\x13\xcf\x54\xb4\xc6\x8c\xaa\x59\x24\xb2\x5c\x70\xe4\x3a\x88\x51\x45\x92\xe5\x5a\xc8\x60\x3b\x27\xa3\x73\xc7\x51\x93\x70\xaf\x04\x0f\x1c\x75\x2a\xe4\x6a\x16\x4b\x9a\xe8\xd9\xfc\x6a\x7e\x15\x5c\xcf\x0b\x81\x64\xe4\xc5\x30\xc1\x43\x20\xef\x72\xe4\xf0\xc6\xdf\x01\x3f\x88\x18\x53\xd8\xce\xc1\x73\x9f\xc7\x98\xa8\x70\x04\x90\xa1\xa6\xe6\x2f\x80\xde\xe5\x18\x02\x11\x77\xf7\x18\x69\x62\x49\x4d\x99\xa5\xca\x50\xa9\x6c\xcf\xc7\x54\x53\x77\x40\xe2\xef\x1b\x26\x31\x76\x12\x01\x02\x20\xee\xc6\x9f\x51\x2a\x26\xb8\xe3\xca\xa5\xc8\x51\x6a\x86\xca\xf3\x35\x98\x3c\xb1\x54\x49\x69\xc9\xf8\x8a\x8c\xac\xba\x72\x85\x83\xfa\x76\x05\xd3\x74\x25\x24\xd3\xeb\xac\x12\x9a\x53\xad\x51\x9a\x07\xfd\xba\xa0\xc1\x1f\x4b\xf3\xdf\x55\xf0\x6a\x76\x1b\x2c\x2f\xce\x49\xc1\x16\x09\x9e\xb0\x55\x08\x5f\xe0\xd1\x52\x68\x1c\x33\x63\x06\x9a\xfe\x54\xdd\x01\x09\x4d\x15\x8e\x00\x52\x7a\x87\xe9\xa0\x56\x3d\x46\xe1\x34\x43\x52\x2d\xb7\x34\xdd\xe0\xd0\x13\x0c\xef\xa0\x49\x1c\xd1\x9e\x0f\xe1\xcb\xa3\x5f\xb7\x0d\x59\x7b\xf3\x76\x71\x15\xbc\xaa\xbd\x54\xb1\x15\x67\x7c\xd5\xb9\xe1\x4e\x88\x14\x29\xf7\x6c\x35\xc3\x9b\x7f\xe7\x12\x93\x10\xc8\xd9\xcc\x02\x69\x66\x77\xad\x83\x4a\x90\xfc\x58\xaa\xdd\xa3\x72\x46\x1f\xfe\x8f\x7c\xa5\xd7\x21\xcc\x5f\xbe\x1c\xf5\xba\x25\x70\x7e\x59\xbe\x18\x2f\xa6\xcb\x16\x69\xf2\xc2\xd3\xbe\xcc\x2f\x1f\xc7\xb3\xc6\xf6\x6d\xcf\x91\x5b\x73\x66\x62\x5e\x3d\x02\x60\x31\x72\xcd\xf4\xee\xb5\xd6\x92\xdd\x6d\x34\xfe\x0f\x77\x4e\xd5\x8c\xf1\x52\xaf\x3e\xad\xcc\xe5\xe3\x45\x70\x7b\xe1\x15\xf1\xc4\xc9\x8d\x13\x2d\x31\xa5\x0f\x18\x7f\xc0\x6c\x8b\xd2\xc9\x3c\x03\x4d\x7f\x43\x0e\x89\x14\x19\x28\xbb\x61\xc2\x18\x28\x8f\x81\xc6\xf7\x1b\xa5\x31\x06\x2d\x80\xa6\xa9\xf8\x0c\x94\x83\xc8\x1d\xd2\x20\x45\x1a\x33\xbe\x02\xb2\x25\x97\x90\xd1\x7b\x21\x03\xc1\xd3\xdd\xa5\x3d\x6a\xd7\xd3\x8c\xf1\x82\xea\xef\x5a\x33\x05\x19\x52\xae\x40\xaf\x11\x12\x61\xa4\x1a\x21\xce\xfc\x0a\xa8\x44\x73\x95\xc1\x0c\x8b\x9b\xfa\x2a\xaf\xf0\xf5\x74\x3e\xfd\x4f\xfd\x73\x90\x08\x71\x71\x47\x65\x41\xdb\xd6\x19\xb6\x7d\x1c\xd7\xd3\xb9\xff\x54\xb2\xd5\xf8\xcb\x8f\x8d\x63\x75\x63\x6f\x97\x37\xe3\xab\xaf\x8b\xeb\xe0\xd5\xf2\x53\xfc\x62\x32\xbe\x09\x3f\x4d\xeb\x84\xc9\x4d\x3f\x29\x18\x8f\x6f\xc2\x8a\xf8\xf5\x53\x6c\x7d\xf4\x3a\xf8\x25\x58\x1a\xe4\xfb\xcf\x5e\xe4\x81\xcc\x13\x7f\xe3\xc5\xb8\xbe\x71\x61\x85\x34\x28\x96\xb3\x88\xae\x6e\xfe\xea\x40\xef\xa9\x5c\xb6\x33\x71\xa4\x4c\x22\x6a\x85\x5c\x1f\x88\x09\x3c\x3a\x10\xe6\x42\x31\x2d\xe4\xee\x8d\xe0\x1a\x1f\xf4\x31\xa9\xc9\x70\x0d\xa5\x22\x2b\x61\x4f\x76\xa6\x51\x84\x4a\x1d\x58\x4e\xee\xa8\x42\xcb\x05\x89\x90\xc5\x51\x54\x30\x36\x2b\x7c\xd0\xc8\x4d\x0a\x53\x93\x27\x14\x1d\x01\x28\xb1\x91\x11\xbe\xc5\x84\x71\x9b\xa3\x8f\x78\xad\xc9\xad\xe5\xa2\xc8\x9a\xe5\xda\x48\x28\x17\x4e\xbf\xd3\x53\x74\x27\x65\xf6\xfa\xaf\x60\xc6\x07\x2d\xe9\x7f\x0b\x86\xc1\xa4\xdb\x91\x40\x86\xd2\x7f\xeb\x60\x23\xe8\xc9\x21\xbe\x75\x44\x5b\xe6\x54\x87\x89\x4a\x49\x77\xd5\x3b\x99\xc6\xac\xc6\xd4\xb9\xdd\x4a\xf1\xec\x75\xc4\xf4\x31\xbb\x7d\xeb\xe6\x98\xad\x50\xe9\x0f\x39\x46\x47\x38\x78\x4d\xd5\xfa\xb5\xef\x01\x2a\xb7\x0b\x99\xd1\x94\x29\x6a\xe0\xd2\xdd\xb6\xe5\x74\xc0\xd5\x0d\x81\x6d\x53\x38\x73\x79\x50\xf4\x5e\xb2\xf7\x88\xab\xe3\xfd\x1c\x23\x00\xcd\x32\x54\x9a\x66\x79\xdb\x08\xce\x06\x03\x1a\xef\x13\x5a\x90\x58\x17\xbe\x0d\x06\x30\x21\x9a\x51\x1d\x42\x4c\x35\x06\x86\xdf\x06\x1e\x5b\x71\xaa\x37\x12\x8f\x74\x0a\xdd\x63\x71\xb3\xca\x30\x66\xf4\xa3\x8f\xbe\x83\x9a\xba\x23\x8d\xe9\x48\xe5\x3d\x15\x57\x33\x45\x7d\x5c\xa3\x63\x72\x79\x4a\x24\xb6\xa6\x96\xcf\x86\x5a\xdf\xd6\xe7\xaf\x92\xf1\xd4\x8c\xe4\x20\x5f\x2e\x4b\x79\x07\xb4\xa4\x87\xa6\xa9\x86\x41\xdc\x7d\x83\x79\xa3\x8a\xc0\x7a\xf3\x58\x7b\x61\xcf\x99\x06\x46\x48\x0d\x70\x16\xc8\x83\xc7\x1a\x50\xb7\xe1\xcf\xd1\x34\x4a\x6f\x4f\x49\x02\xa5\x4d\x4f\x30\x49\x27\x97\xf6\xf0\x3c\x33\x5d\x1f\x61\xf5\xd2\x0e\xe5\x68\xe7\x0c\x32\x5c\x73\x8f\xa8\x79\x4f\x59\xa7\xa5\x57\xa3\xd3\x7f\x56\xe9\x39\x1a\x76\x12\x8b\x9a\x5f\x7f\x3c\x9c\x5c\x91\xda\xd0\x72\x5d\x85\x8c\xde\x63\x72\x60\x2f\x43\x41\x62\x82\x12\x79\x84\xb6\x95\x87\x71\x35\xdf\xa7\x22\xa2\xe9\xa4\xe8\x52\xc8\x89\xa1\xeb\xc1\xf3\x01\x53\x8c\xb4\x90\xc7\xa3\xec\x9b\x16\xef\xfa\xa0\xf7\xde\xbf\xfc\x54\x5b\x95\x92\x0e\x1d\x97\x7b\x91\x67\xc6\xe8\xfa\x97\x0c\xc7\xdb\xb8\x67\x74\x3d\x14\xf6\xfb\x1a\x40\x38\x03\x1a\xe9\x0d\x4d\xd3\x5d\x58\xdd\x11\xd8\x8a\xf2\x79\x06\x2a\xc7\x88\xd1\xd4\x60\x5a\x4b\x16\x19\x95\xd5\x3f\xa5\x67\xfc\x0e\x0d\x61\x3b\x17\x08\x8e\xef\x92\xfa\xe1\xc0\xdf\xc2\x37\x69\x4a\x1a\x1b\xfb\x13\x67\x99\x34\x9e\x1e\x14\xf6\x0d\x2a\x5e\x8c\x3a\xf8\xcb\x9d\x02\x95\x70\x66\xcf\xdb\x74\x50\x49\xb9\x2c\x26\xf6\x8d\xd2\x90\x51\x1d\xad\x6b\xe1\xa0\x3a\x23\x49\x6d\x3a\xb3\x4b\xe3\x15\x5d\x42\xde\x92\x7c\xc7\xdc\x8f\xf1\x7f\xc9\xa4\xe2\x92\xf7\xb3\x91\xe9\xc4\x54\x55\xc7\x19\xfb\x49\xfb\x21\xdf\x64\x21\x2c\x88\x75\x35\xb9\x04\x62\xc6\x59\xc9\x69\x4a\x96\xdf\x2f\x70\x3a\x93\xd4\xd0\x28\xe5\x36\xbf\x5f\x9c\x95\xf8\x3d\xb8\x1e\x1c\x5d\x00\x1a\x89\xbe\x08\x84\xd6\x57\x1e\xaa\xb6\x99\x4b\xb1\x65\x71\x05\xa0\x00\x48\x23\x86\x9b\x45\xa5\xac\x67\xaa\x21\xbf\x71\xe2\x6f\x6b\x95\x22\x89\x16\x83\x1f\x7b\x46\xb6\x85\x07\xe2\x65\xe1\xb4\x65\xc9\xd0\x1d\xdf\x3c\xa4\xdb\x66\x7b\x2e\x26\x3b\x12\xfd\x51\xef\x84\xbf\xfe\x3b\x86\xc2\x73\xcf\x4e\x06\xad\xea\x41\xda\x6d\x43\x05\x9c\xe7\x5e\xd5\x15\xd9\xee\x7c\xbf\x81\x9f\xba\xef\x19\xb5\x62\xb5\x1e\x88\x01\x90\x0c\xdd\xcf\x3c\xf5\x60\x21\xa3\x66\x28\x54\x3f\x27\x75\x7e\x21\x70\x87\x5b\xd9\x61\xe8\xe1\xa4\x3e\x3e\x37\xa7\x9b\xda\x43\x1b\x8f\x1c\x1a\x3c\x49\x6b\x78\x3c\x49\x5a\xff\xd4\x45\xfe\x0c\x00\x00\xff\xff\xd3\x97\x5f\x7a\xeb\x1b\x00\x00")

func ResourcesComponentDescriptorV2SchemaYamlBytes() ([]byte, error) {
	return bindataRead(
		_ResourcesComponentDescriptorV2SchemaYaml,
		"../../../../../../../resources/component-descriptor-v2-schema.yaml",
	)
}

func ResourcesComponentDescriptorV2SchemaYaml() (*asset, error) {
	bytes, err := ResourcesComponentDescriptorV2SchemaYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../../../../../../../resources/component-descriptor-v2-schema.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"../../../../../../../resources/component-descriptor-v2-schema.yaml": ResourcesComponentDescriptorV2SchemaYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//
//	data/
//	  foo.txt
//	  img/
//	    a.png
//	    b.png
//
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"..": {nil, map[string]*bintree{
		"..": {nil, map[string]*bintree{
			"..": {nil, map[string]*bintree{
				"..": {nil, map[string]*bintree{
					"..": {nil, map[string]*bintree{
						"..": {nil, map[string]*bintree{
							"..": {nil, map[string]*bintree{
								"resources": {nil, map[string]*bintree{
									"component-descriptor-v2-schema.yaml": {ResourcesComponentDescriptorV2SchemaYaml, map[string]*bintree{}},
								}},
							}},
						}},
					}},
				}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
