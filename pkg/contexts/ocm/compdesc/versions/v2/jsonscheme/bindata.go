// Code generated by go-bindata. (@generated) DO NOT EDIT.

//Package jsonscheme generated by go-bindata.// sources:
// ../../../../../../../resources/component-descriptor-v2-schema.yaml
package jsonscheme

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _ResourcesComponentDescriptorV2SchemaYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x5f\x6f\x1b\xb9\x11\x7f\xdf\x4f\x31\x38\x1b\xa0\x7c\xf6\x5a\x8e\x8a\x14\x88\x5e\x0c\x37\x87\x02\x41\x7b\xe7\x43\x92\xf6\xa1\x8e\x1b\x50\xbb\x23\x89\xe9\x2e\xa9\x92\x94\x62\x5d\xce\xdf\xbd\x20\xb9\xdc\xe5\xfe\x95\x64\xc5\x39\x1c\x7a\x79\xb8\x33\xb9\xc3\x99\xe1\x8f\xbf\x19\x0e\x49\x9d\xb2\x74\x0a\x64\xa9\xf5\x4a\x4d\xc7\xe3\x05\x95\x29\x72\x94\x97\x49\x26\xd6\xe9\x58\x25\x4b\xcc\xa9\x1a\x27\x22\x5f\x09\x8e\x5c\xc7\x29\xaa\x44\xb2\x95\x16\x32\xde\x4c\x48\x74\xea\x24\x02\x0d\x9f\x94\xe0\xb1\xeb\xbd\x14\x72\x31\x4e\x25\x9d\xeb\xf1\xe4\x6a\x72\x15\xbf\x98\x14\x0a\x49\xe4\xd5\x30\xc1\xa7\x40\x6e\x57\xc8\xe1\xb5\xb7\x01\x3f\x8a\x14\x33\xd8\x4c\xc0\x4b\x9f\xa6\x38\x57\xd3\x08\x20\x47\x4d\xcd\xff\x01\xf4\x76\x85\x53\x20\x62\xf6\x09\x13\x4d\x6c\x57\x5d\x67\xe9\x32\x54\x2e\xdb\xf1\x29\xd5\xd4\x0d\x90\xf8\xdf\x35\x93\x98\x3a\x8d\x00\x31\x10\x67\xf1\x9f\x28\x15\x13\xdc\x49\xad\xa4\x58\xa1\xd4\x0c\x95\x97\xab\x09\xf9\xce\xd2\x25\xa5\x25\xe3\x0b\x12\x59\x77\xe5\x02\x7b\xfd\x6d\x2b\xa6\xd9\x42\x48\xa6\x97\x79\xa5\x74\x45\xb5\x46\x69\x26\xf4\xef\x3b\x1a\xff\x72\x6f\xfe\x73\x15\xbf\x1a\x7f\x8c\xef\xcf\x4f\x49\x21\x96\x08\x3e\x67\x8b\x29\x7c\x81\x47\xdb\x43\xd3\x94\x19\x18\x68\xf6\x73\x65\x03\xe6\x34\x53\x18\x01\x64\x74\x86\x59\xaf\x57\x1d\xa0\x70\x9a\x23\xa9\x9a\x1b\x9a\xad\xb1\x6f\x0a\x46\xb6\x17\x12\xd7\x69\xc7\x4f\xe1\xcb\xa3\x6f\x37\x81\x0c\xe6\xbc\xb9\xbb\x8a\x5f\x05\x33\x55\x6c\xc1\x19\x5f\xb4\x2c\xcc\x84\xc8\x90\x72\x2f\x16\x00\x6f\xfe\x9d\x4a\x9c\x4f\x81\x9c\x8c\x2d\x91\xc6\xf6\xab\x5d\xa0\x92\x24\x3f\x95\x6e\x77\xb8\x9c\xd3\x87\xbf\x23\x5f\xe8\xe5\x14\x26\x2f\x5f\x46\x9d\xcb\x12\xbb\x75\xb9\xff\x7e\x74\x77\x79\xdf\xe8\x3a\xfb\xde\xf7\x7d\x99\x5c\x3c\x8e\xc6\xb5\xcf\x1f\x3b\x86\x7c\x34\x63\xce\xcc\xac\x23\x00\x96\x22\xd7\x4c\x6f\x6f\xb4\x96\x6c\xb6\xd6\xf8\x37\xdc\x3a\x57\x73\xc6\x4b\xbf\xba\xbc\x32\xc6\x47\x77\xf1\xc7\x73\xef\x88\xef\x3c\xbb\x76\xaa\x25\x66\xf4\x01\xd3\x77\x98\x6f\x50\x3a\x9d\x27\xa0\xe9\x7f\x90\xc3\x5c\x8a\x1c\x94\xfd\x60\xc2\x18\x28\x4f\x81\xa6\x9f\xd6\x4a\x63\x0a\x5a\x00\xcd\x32\xf1\x19\x28\x07\xb1\x72\x4c\x83\x0c\x69\xca\xf8\x02\xc8\x86\x5c\x40\x4e\x3f\x09\x19\x0b\x9e\x6d\x2f\xec\x50\xdb\xbe\xcc\x19\x2f\x7a\xbd\xad\x25\x53\x90\x23\xe5\x0a\xf4\x12\x61\x2e\x8c\x56\xa3\xc4\xc1\xaf\x80\x4a\x34\xa6\x0c\x67\x58\x5a\xf7\x57\x79\x87\x5f\x5c\x4e\x2e\xff\x14\xfe\x1d\xcf\x85\x38\x9f\x51\x59\xf4\x6d\x42\x81\x4d\x97\xc4\x8b\xcb\x89\xff\xab\x14\x0b\xe4\xcb\x3f\x6b\xc3\x42\xb0\x37\xf7\xd7\xa3\xab\x5f\xef\x5e\xc4\xaf\xee\x3f\xa4\xdf\x9f\x8d\xae\xa7\x1f\x2e\xc3\x8e\xb3\xeb\xee\xae\x78\x34\xba\x9e\x56\x9d\xbf\x7e\x48\xed\x1a\xdd\xc4\xff\x8a\xef\x0d\xf3\xfd\xdf\x5e\xe5\x9e\xc2\x67\xde\xe2\xf9\x28\xfc\x70\x6e\x95\xd4\x7a\xac\x64\x11\x5d\xed\xfc\xd5\xa2\xde\xae\x5c\xb6\x35\x71\xa4\x4c\x22\x6a\x84\x5c\x17\x89\x09\x3c\x3a\x12\xae\x84\x62\x5a\xc8\xed\x6b\xc1\x35\x3e\xe8\x43\x52\x93\x91\xea\x4b\x45\x56\xc3\x40\x76\x16\x09\x7b\xdb\x6d\x9b\x66\xd9\xed\xbc\xb2\xd2\x98\x4b\xcb\xe1\x2a\x37\x36\x3d\x2c\xbc\x9c\x51\x85\xff\x90\x19\xa9\x32\x5c\xcb\x59\xf3\xaf\x10\x0b\xbb\x7a\x52\xa8\x4b\xfa\x41\xee\xfa\x91\xae\x56\xb5\xbc\x38\x38\x14\x00\xf9\x3a\x9f\xc2\x1d\x59\xcb\xec\x67\xaa\x97\xe4\x02\x88\x5a\xd2\xc9\xcb\x3f\xc7\x29\x5b\xa0\xd2\xe4\x3e\x6a\xe8\x39\x54\xb3\x45\x77\xc1\x94\x96\x5b\xa3\xfd\xf6\xf5\x9b\xb2\x79\x6f\xd0\xa7\x49\x82\x4a\xed\xb9\x99\x1b\x64\xac\x14\xcc\x85\x2c\x86\xa2\x82\x91\x69\xe1\x83\x46\x6e\x36\x10\x75\xb6\x83\x26\x11\xc0\x82\xe9\xe5\x7a\x76\x33\x6c\x7b\x90\x67\xb6\x69\x28\x10\x2c\xa8\xed\x99\x3f\x89\x87\x4d\xd8\x9c\x83\x25\xfc\x85\xa1\x1d\xc3\x0d\x3f\x87\x25\x12\x91\xe7\x4c\x0f\x45\x03\x17\x1c\x8f\xc1\xe5\xc8\x79\xff\x24\x38\x3a\x62\x28\xb1\x96\x09\xfe\x80\x73\xc6\x6d\x11\x73\x80\x3b\xa6\xf8\x28\x1b\x45\x59\x51\xb6\x8d\x86\xb2\xe1\x28\xf4\xf4\x1a\xa6\x55\x53\x74\x26\xb8\x42\x18\x1f\xb4\xa4\x6f\x0a\x81\xde\xaa\xa4\xa5\x81\xf4\xd5\x47\xad\x7c\x14\xec\x8a\x64\x7f\xf0\x6d\x1d\xa8\x5a\x42\x54\x4a\xba\xad\xe6\xc9\x34\xe6\xb5\x2c\xd5\xb0\x6e\xb5\x78\xf1\x30\xa8\x6d\x9b\x6f\x6f\xe7\xf5\x64\xd8\x18\xee\x46\x90\x21\x91\x30\x66\x07\x05\xcd\x11\xc4\x8b\x45\x00\x2e\x93\xbd\x5b\x61\x72\x00\x85\x96\x54\x2d\x6f\x7c\x19\x5e\x11\x4b\xc8\x9c\x66\x4c\x51\x43\xc8\xf6\x67\x5b\xd1\xf6\x90\xa9\xa6\xb0\x09\xb6\x5b\x10\x4f\xbb\x4e\x23\x83\x43\x5c\x29\xdd\x2d\x11\x01\x68\x96\xa3\xd2\x34\x5f\x35\x41\x70\x18\xf4\x78\x3c\xa4\xb4\xe8\x62\xed\x00\xa9\x09\x80\xc9\xd3\x39\xd5\x53\x48\xa9\xc6\xd8\xc8\xdb\xd0\x66\x0b\x4e\xf5\x5a\xe2\x81\x8b\x42\x07\x10\x37\xad\x1c\x53\x46\xdf\xfb\xf8\xde\xeb\x5c\x75\x20\x98\xae\xab\xb4\x53\x49\xd5\xf7\xa9\xf7\x4b\x74\x42\x6e\xb3\x12\x73\x5b\xd6\x96\xd3\x86\xe0\xe8\xd4\xb5\x5e\xa5\xe0\x53\x73\x9e\xa3\x7c\xd9\x2c\xf5\xb9\xaa\x66\xf0\x54\xb8\x6f\x22\xac\x01\xe2\xec\xf5\x66\xa6\x2a\x02\xc3\xf3\x5b\x30\xc3\x8e\x31\x35\x8e\x90\x80\x70\x96\xc8\xbd\xc3\x6a\x54\x77\x1b\x1a\x9a\xb3\xca\x0f\x4f\x49\x02\x25\xa6\x4f\x80\xa4\x95\xad\x3b\x64\x8e\xdc\x10\x0e\x40\xbd\xc4\xa1\xbc\x5d\x71\x80\x1c\xb2\xc9\xf7\xee\xaa\xbb\xd0\x69\xf8\x55\x2b\x58\x8f\xda\xdc\x0e\xa6\x9d\xc4\xa2\xaa\x08\x27\x0f\x4f\xde\xf3\x9a\xd4\xb2\x38\x2b\x99\xbc\xf5\x75\xd8\xce\x82\x96\x9a\x9a\x0d\x25\xf2\x04\xed\x69\x1a\x46\xd5\x15\x5b\x26\x12\x9a\x9d\x15\x75\x50\x5f\x71\xe5\xc9\xf1\x0e\x33\x4c\xb4\x90\x87\xb3\xe8\xab\x6e\xff\xe1\x5d\xca\x5b\x3f\xb3\xa7\x62\x51\x6a\xda\xf7\x46\xaa\x93\x59\x31\x90\xcd\xf0\x3d\x5e\xc7\xed\xcf\xbe\xb4\x1d\x2a\x11\xe1\x04\x68\xa2\xd7\x34\xcb\xb6\xd3\xca\x46\x6c\x77\x84\xcf\x63\x50\x2b\x4c\x18\xcd\x0c\x27\xb5\x64\x89\x01\x41\xfd\x5e\xaa\xca\x67\x28\x19\x9b\xb1\x2c\x38\x36\x4b\xc6\xc2\x0a\x5f\x67\xd9\x60\xfd\xd7\x48\x7c\x3e\xe8\xab\x0d\xfb\xc0\x73\xa6\x57\xa0\xf6\xbe\x19\x2d\xf8\x06\x27\x76\xbc\x0d\xe4\x4a\xcb\x45\x71\xdd\xb5\x56\x1a\x72\xaa\x93\x65\x40\x74\xd5\x3a\xae\xb4\x8f\x9c\x99\x2d\x0c\x83\xae\xb0\x76\xfe\xbf\x3d\xc5\xb8\xb4\x7b\x34\x27\x9d\x9a\x6a\xbf\x70\x60\xef\x7d\x7c\xb5\x4b\x4d\x2e\x80\xe0\x83\x46\xc9\x69\x56\x9e\xe0\x7f\x2f\xa7\x2c\x91\xb0\xbf\x64\x62\x9f\x63\x96\x9d\xeb\x5f\x59\x86\x6a\xab\x34\xe6\x87\x8c\xba\xed\x32\xf2\x7c\x19\x40\x24\xec\x4d\x4e\x17\x47\xdd\x6b\xd8\x26\x33\x5a\xca\x7d\xed\xab\x5c\x78\x84\xf7\x63\x9e\x2b\x75\x33\x3b\xee\x2e\x2b\x20\x8f\x98\x58\x46\xb7\x3e\xda\x8e\x9b\x0f\x90\xc2\x25\x02\xd5\xdd\xd5\xbc\xef\x9c\x74\x63\x26\x50\xdf\xf6\xcd\x41\x29\xa7\x9c\xcd\x51\xe9\xe6\x09\xa9\x61\xf4\x89\xc7\x30\x87\x8c\x4b\xc2\x2e\x20\x9c\x07\x0a\xb4\xd8\x61\xb1\x49\xd1\xb6\x39\x27\xe1\x4d\x69\x2a\x17\xa8\x31\x85\x44\x70\x5d\x16\x32\xbd\xea\x15\xfb\x65\x70\x2e\xe6\x3b\x30\x0e\xb3\xad\x46\xe5\x6d\xcc\x0c\xd8\x4d\xbd\x7c\x9d\xcf\xcc\x82\x46\x00\xbd\x61\x7a\x04\x5d\xe6\x2c\xc3\x6a\xcf\x3b\x96\x31\x1d\x1e\x56\xec\xf1\xa6\xfa\x70\xf1\xdf\x43\x38\x40\x2f\xa9\x06\xa6\xec\xdc\x0d\xfc\x8c\xdb\x6f\xdf\x99\x8f\xea\x3b\x48\x99\xb4\xc5\xf2\xb6\x77\x3d\x3c\x6e\xb7\x5f\x29\xbe\x9e\x01\xb0\xdb\x66\x9c\x0d\x93\xb3\x4e\x4c\x1b\xef\xf0\x99\xe9\x65\x01\x4d\xb2\x96\x12\xb9\x86\xae\xe7\xf2\x21\x94\x7c\x6a\x7d\x5b\x54\x37\x87\x60\xd4\x53\x35\xf5\x82\xf8\x47\x9d\x13\xd2\x80\x78\xe8\xbf\x65\x89\xd1\x2e\x16\x82\x8d\xf5\xb9\x37\xf2\x08\xa0\xba\xda\x3d\x22\x18\xd7\xfe\xc5\xe6\xc8\xad\xdb\x38\x53\x82\xbf\x1e\x78\x9d\x89\x00\x16\xc8\x51\xb2\xe4\x37\x7c\x59\x29\x3c\x70\x8f\x2b\x45\xe3\x8f\xa8\xfd\xe6\x51\x5b\x2d\x83\xeb\xff\xf6\x41\x5b\xa3\xe2\xf3\x17\xdf\xe5\x8e\xb2\xf7\x35\xd0\xc1\xf7\x3e\x6d\x0e\xb6\xde\xe6\x55\xf0\x71\x25\xc5\x86\xa5\xd5\xfa\xc5\x40\x6a\x07\xfc\xfa\x5d\x52\x59\x87\xab\x9a\xfe\xda\x88\xdf\xec\x06\x34\x91\x68\x0f\xa8\xef\x3b\x5e\x62\xee\x3c\x07\x2f\x8a\x45\xab\xde\xf2\xdb\xaf\x32\xae\xbf\x0d\xdb\xc1\xc4\x6c\x1d\x42\xbb\xcf\x98\xad\x5f\x5c\x10\x38\xf1\x45\x48\xb6\xbd\x80\xcf\x08\x82\x67\xdb\xe2\xf7\x45\xb6\x56\x17\xdc\xbb\xe9\x17\x70\x47\xd0\x3d\x43\x68\x15\xab\x7e\xf4\x2d\x43\xe3\x6d\xbb\x5c\xce\x36\xe9\x8e\x35\xd5\x56\xd9\xbc\x0c\x7f\x9e\x35\x0e\x6f\xdd\xc8\x4e\x3a\xd4\x6a\xc8\x1d\xe2\x8d\xbd\xcb\x26\x99\x6e\xe8\xe0\xcb\x63\x14\x45\x8d\x8c\x13\xa6\x93\x18\x48\x8e\xee\x67\xa0\x61\xc8\x93\xa8\x1e\xd0\xd5\xcf\x4d\x5b\xbf\x20\x74\x83\x1b\x39\xae\x6f\x09\x48\xf8\xb6\x57\xaf\x02\x02\xc8\x6b\x70\xf7\xbd\x8a\x91\xc6\xcb\xd6\x93\xb4\x75\x3f\x09\x91\xff\x05\x00\x00\xff\xff\xb6\x68\xc7\xc2\x0b\x2c\x00\x00")

func ResourcesComponentDescriptorV2SchemaYamlBytes() ([]byte, error) {
	return bindataRead(
		_ResourcesComponentDescriptorV2SchemaYaml,
		"../../../../../../../resources/component-descriptor-v2-schema.yaml",
	)
}

func ResourcesComponentDescriptorV2SchemaYaml() (*asset, error) {
	bytes, err := ResourcesComponentDescriptorV2SchemaYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../../../../../../../resources/component-descriptor-v2-schema.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"../../../../../../../resources/component-descriptor-v2-schema.yaml": ResourcesComponentDescriptorV2SchemaYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//
//	data/
//	  foo.txt
//	  img/
//	    a.png
//	    b.png
//
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"..": {nil, map[string]*bintree{
		"..": {nil, map[string]*bintree{
			"..": {nil, map[string]*bintree{
				"..": {nil, map[string]*bintree{
					"..": {nil, map[string]*bintree{
						"..": {nil, map[string]*bintree{
							"..": {nil, map[string]*bintree{
								"resources": {nil, map[string]*bintree{
									"component-descriptor-v2-schema.yaml": {ResourcesComponentDescriptorV2SchemaYaml, map[string]*bintree{}},
								}},
							}},
						}},
					}},
				}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
