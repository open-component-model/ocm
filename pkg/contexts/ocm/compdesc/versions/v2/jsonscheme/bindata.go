// Code generated by go-bindata. (@generated) DO NOT EDIT.

// Package jsonscheme generated by go-bindata.
// sources:
// ../../../../../../../resources/component-descriptor-v2-schema.yaml
package jsonscheme

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _ResourcesComponentDescriptorV2SchemaYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\xdd\x6f\xdb\xba\x15\x7f\xd7\x5f\x71\x70\x53\x40\x4e\x13\xc5\xad\x87\x0e\xb8\x7e\x09\xb2\x5e\x6c\x28\xb6\xdd\x0c\xed\xdd\x1e\x96\x66\x05\x2d\x1d\xdb\xec\x28\xd2\x23\x29\x37\x6a\x6f\xfe\xf7\x81\xa4\xa8\x6f\xc9\x76\x9c\xb4\xdb\x45\xf3\x12\x91\x3a\x5f\x3c\xfc\x9d\x0f\x52\x7e\x46\x93\x39\x84\x6b\xad\x37\x6a\x3e\x9d\xae\x88\x4c\x90\xa3\xbc\x88\x99\xc8\x92\xa9\x8a\xd7\x98\x12\x35\x8d\x45\xba\x11\x1c\xb9\x8e\x12\x54\xb1\xa4\x1b\x2d\x64\xb4\x9d\x85\xc1\x33\x47\x51\x93\xf0\x51\x09\x1e\xb9\xd9\x0b\x21\x57\xd3\x44\x92\xa5\x9e\xce\x5e\xcc\x5e\x44\x2f\x67\x85\xc0\x30\xf0\x62\xa8\xe0\x73\x08\xff\x54\x68\x85\xd7\x5e\x0f\xfc\x54\xea\x81\xed\x0c\x2a\xb6\x25\xe5\xd4\x70\xa9\x79\x00\x90\xa2\x26\xe6\x3f\x80\xce\x37\x38\x87\x50\x2c\x3e\x62\xac\x43\x3b\xd5\x54\x51\xae\x00\xaa\x15\x58\xfe\x84\x68\xe2\x18\x24\xfe\x27\xa3\x12\x13\x27\x11\x20\x82\xd0\xe9\xfd\x07\x4a\x45\x05\x77\x54\x1b\x29\x36\x28\x35\x45\xe5\xe9\x1a\x44\x7e\xb2\x34\x49\x69\x49\xf9\x2a\x0c\x02\x00\x46\x16\xc8\x06\xed\xed\x51\xcf\x49\x8a\x61\x35\xdc\x12\x96\xe1\x90\x15\x86\x76\x50\xb9\x9b\xb4\xfc\x73\xf8\x72\xef\xc7\x6d\x93\x37\x44\x6b\x94\xc6\x5d\xff\xda\xde\xbc\x88\x7e\xbc\x3d\x7b\xe6\x79\x15\x5d\x71\xa2\x33\xd9\xd5\xb1\x10\x82\x21\xe1\x76\x85\xa5\x97\x7f\x2e\xad\xe9\xb1\x24\x25\x77\x7f\x41\xbe\xd2\xeb\x39\xcc\x5e\xbd\x0a\x5a\x9a\x6f\x48\xf4\xf9\xf6\x26\x22\xd1\x67\x63\xc1\xf3\xc9\xcd\xc5\x6d\x6b\xea\xf4\xb9\x9f\xfb\x32\x3b\xbf\x9f\x4c\x1b\xaf\x3f\xf4\xb0\x7c\x30\x3c\xa7\x66\x31\x01\x00\x4d\x90\x6b\xaa\xf3\x2b\xad\x25\x5d\x64\x1a\xff\x8c\xb9\x33\x35\xa5\xbc\xb4\xab\xcf\x2a\xa3\x7c\x72\x13\x7d\x38\xf3\x86\xf8\xc9\xd3\x4b\x27\x5a\x22\x23\x77\x98\xbc\xc3\x74\x8b\xd2\xc9\x3c\x01\x4d\xfe\x8d\x1c\x96\x52\xa4\xa0\xec\x0b\x13\x16\x40\x78\x02\x24\xf9\x98\x29\x8d\x09\x68\x01\x84\x31\xf1\x09\x08\x07\x61\x11\x4b\x18\x30\x24\x09\xe5\x2b\x08\xb7\xe1\x39\xa4\xe4\xa3\x90\x91\xe0\x2c\x3f\xb7\xac\x76\x7c\x91\x52\x5e\xcc\x7a\x5d\x6b\xaa\x20\x45\xc2\x15\xe8\x35\xc2\x52\x18\xa9\x46\x88\x73\xbf\x02\x22\xd1\xa8\x32\x50\xa0\x49\xd3\x5e\xe5\x0d\x7e\x79\x31\xbb\xf8\x5d\xfd\x39\x5a\x0a\x71\xb6\x20\xb2\x98\xdb\xd6\x09\xb6\x7d\x14\x2f\x2f\x66\xfe\xa9\x24\xab\xd1\x97\x8f\x0d\xb6\xba\xb3\xb7\xb7\x97\x93\x17\xbf\xde\xbc\x8c\x7e\xbc\x7d\x9f\x3c\x3f\x9d\x5c\xce\xdf\x5f\xd4\x27\x4e\x2f\xfb\xa7\xa2\xc9\xe4\x72\x5e\x4d\xfe\xfa\x3e\xb1\x7b\x74\x15\xfd\x33\xba\x35\x80\xf6\xcf\x5e\xe4\x9e\xc4\xa7\x5e\xe3\xd9\xa4\xfe\xe2\xcc\x0a\x69\xcc\x58\xca\x22\x68\xba\x09\xa0\x03\xbd\xc1\x64\x50\xc4\x77\x6e\xe2\x48\xcd\xe1\x0b\x3c\x93\xb8\x9c\x43\x78\x32\xad\xa5\xc0\x69\x1f\x94\x43\xb8\x77\x50\xdc\x08\x45\xb5\x90\xf9\x6b\xc1\x35\xde\xe9\x43\xf2\x8e\xa1\x1a\xca\x33\x56\xc2\x48\x92\x13\x31\x7d\xdb\xaf\x9b\x30\x76\xbd\xac\xb4\xf4\xae\xa8\x63\x76\x95\xfe\xda\x76\x16\xb6\x2e\x88\xc2\xbf\x4b\x16\x56\x49\xac\x63\xb2\xf9\x2b\xc8\xea\x53\x03\x59\xd2\xfc\x35\xf2\xd8\x5f\xc9\x66\x43\xf9\x6a\x4f\x56\x00\xe4\x59\x3a\x87\x9b\x30\x93\xec\x6f\x44\xaf\xc3\x73\x08\xd5\x9a\xcc\x5e\xfd\x3e\x4a\xe8\x0a\x95\x0e\x6f\x83\x96\x9c\x43\x25\x5b\x1f\xaf\xa8\xd2\x32\x37\xd2\xaf\x5f\xbf\x29\x87\xb7\x66\x0f\x48\x1c\xa3\x52\x7b\x56\x46\xe3\x19\x4b\x05\x4b\x21\x0b\x56\x54\x30\x31\x23\xbc\xd3\xc8\x4d\x8d\x50\xa7\x3b\xc0\x12\x00\xac\xa8\x5e\x67\x8b\xab\x71\xdd\xa3\x68\xb3\x43\x03\x81\xda\x86\xda\x99\xe5\x83\xd0\xd8\x76\x9b\x33\xb0\x74\x7f\xa1\x68\x07\xbb\x41\xe9\x38\x45\x2c\xd2\x94\xea\xb1\x98\xe0\x82\xe3\x31\x7e\x39\x72\xdd\x3f\x0b\x8e\x0e\x18\x4a\x64\x32\xc6\x9f\xca\x80\x3b\xc0\x1c\xd3\x5f\x94\x83\xa2\x73\x28\xc7\x46\x42\x39\x70\x10\x7a\x78\x9b\x02\x07\x24\xbb\x82\x05\xef\xb4\x24\x6f\x0a\x82\xf9\x81\x72\xc2\xa1\x76\x68\x20\x43\xd5\x6a\x66\xf8\x40\x18\x96\x18\xb4\x2d\xa1\xea\xb0\x12\x29\x49\x5e\x71\x52\x8d\x69\x23\x9b\xf5\x5a\x66\x65\x79\xa6\x7a\x0a\xb0\x63\x9e\x5f\x2f\x9b\xa9\xb3\x57\x88\xe3\x0b\x77\x13\xd6\xa3\x7d\x0f\x72\x73\x3c\xf0\xc4\x01\x80\xcb\x84\xef\x36\x18\x1f\x00\xc1\x35\x51\xeb\x2b\xb6\x12\x92\xea\x75\x5a\x01\x53\xc8\x94\x30\xaa\x88\x51\xd4\x7d\x6d\x9b\xde\x01\x30\x36\x04\xb6\x37\xc1\x6d\x9f\x87\x6d\xaf\x92\x51\x16\xd7\x6d\xf7\x53\x04\xb5\x86\xfa\x40\x27\x90\x91\x15\x9a\x51\x8a\x09\x25\xbf\xf8\x78\xec\xae\x99\x1c\x6d\xbc\x9b\x2a\xf5\x54\x54\xcd\xba\xf2\xcb\x1a\x1d\x91\x2b\x2e\x62\x69\x5b\xd2\x72\xd9\x50\x3b\xcd\x8c\xfa\xe7\xa1\x39\xca\x41\xac\x1c\x96\xf2\x0e\x48\x4c\x8d\x05\x3b\x79\x3b\xb2\x43\x85\xeb\x91\x83\x53\x2f\x67\x03\x0f\x36\x46\x94\x8c\xdf\xfa\xe2\xb3\xb3\x8a\x13\x53\xa8\x50\x22\x8f\xd1\x1e\x27\x60\x52\x9d\xd9\x99\x88\x09\x3b\x2d\x92\xff\x50\x45\xf1\x69\xf1\x1d\x32\x8c\xb5\x90\x0f\xcd\xa2\x4f\x90\xd1\xea\x07\xcb\xb7\x7e\x95\x0f\xf5\x4b\x29\x69\xdf\x53\x77\xa3\x17\xac\x9f\xc6\xc7\x6f\x05\x7a\x8e\xc2\x83\xeb\xec\x55\x31\x56\x29\xe1\x04\x48\xac\x33\xc2\x58\x3e\xaf\x34\x45\x36\xd0\x3e\x4d\x41\x6d\x30\xa6\x84\x81\x44\x43\x1f\x5b\x25\xff\xbf\xc5\xf5\xc9\x6a\x64\x3b\xa2\x05\xc7\x76\x8d\x2c\x74\xf1\x8c\xb1\x3d\x8a\x5c\x3d\xfa\xed\x19\xcc\x85\x5c\x95\x25\x0f\x6c\xc6\xbd\x00\xb5\xf7\x0d\x51\x81\x49\x38\xb1\xfc\x36\xf0\x2b\x29\xe7\xc5\xfd\x40\xa6\x34\xa4\x44\xc7\xeb\x5a\x30\xa8\x4e\x4f\xd7\xed\xcb\x99\xad\x7e\xb5\xa9\x7a\xb3\xf0\xbd\xd5\x2b\x57\xe5\x12\xf7\x23\x21\xd6\x09\xab\x4e\x23\x6e\x13\xf6\x6e\x36\x2d\x04\xcc\x21\xd1\x1c\xe5\x24\x27\xec\x37\xd0\x7a\x8a\x98\xfe\x81\x89\xfd\x7b\x4f\xeb\x83\x3f\x52\x86\x2a\x57\x1a\xd3\xc3\x79\xaf\xfb\x14\x3e\x75\xf6\x10\x31\x7d\x93\x92\xd5\x51\x07\x47\x3b\xa4\x46\x4a\x59\x37\x1f\xe5\x44\x59\xbf\x80\xf0\x78\x6a\xaa\xd9\x71\x45\x54\xb9\xf3\x88\x85\x31\x92\xfb\xb8\x3c\x6e\x3d\x10\x16\x26\x85\x50\x5d\x0e\x2c\x87\x1a\xdb\x2b\xb3\x80\x66\x5b\x61\x3a\xdb\x94\x70\xba\x44\xa5\xdb\x2d\x6d\x4b\xe9\x03\xfb\x66\xe7\x19\x97\xc0\x5d\xa0\x38\x0b\x14\x68\xb1\x43\x63\x1b\xa8\x5d\x75\x8e\xc2\xab\xd2\x44\xae\x50\x63\x02\xb1\xe0\xba\x6c\x94\x06\xc5\x2b\xfa\x79\x74\x2d\xe6\x3d\x50\x0e\x8b\x5c\xa3\xf2\x3a\x16\xc6\xd9\x6d\xb9\x3c\x4b\x17\x66\x43\x03\x80\xc1\x90\x3d\x02\x2e\x4b\xca\xb0\xaa\x97\xc7\x22\xa6\xc7\xc2\x0a\x3d\x5e\xd5\x90\x5f\xfc\xfb\xba\x3b\x40\xaf\x89\x06\xaa\xec\xda\x8d\xfb\x29\xb7\xef\x7e\x30\x2f\xd5\x0f\x90\x50\x69\x1b\xf3\x7c\x70\x3f\xbc\xdf\xae\x1f\x29\xbe\x9e\xc0\x61\xd7\xed\x38\x1b\x07\x67\x13\x98\x36\xde\xe1\x13\xd5\xeb\xc2\x35\x71\x26\x25\x72\x0d\x7d\x1f\xf7\xc6\xbc\xe4\x53\xeb\xdb\xa2\x33\x3a\xe6\x9b\x5c\xfd\x14\xd0\xe7\xc4\xef\x3d\xd2\xee\x5a\x62\x37\xe3\xeb\x37\x26\x43\xcd\x45\xad\xec\x7e\x9d\x62\x1f\x00\x54\xf7\x63\x47\x04\x6c\xe6\xaf\xcd\x8f\x2c\xef\xc6\x98\x72\x3b\xb2\x91\x2b\xf2\x00\x60\x85\x1c\x25\x8d\xbf\xe1\xf5\x76\x61\x81\xbb\xe1\x2e\x06\xdf\x23\xfb\x7f\x20\xb2\xab\x8d\x71\xf3\xdf\x36\xb0\x1b\x40\xfd\x5a\x4d\x7c\x59\x99\xf6\xbe\xae\x3a\xf8\x7e\xaa\x8b\xd3\xce\x47\x54\x55\x7b\xb9\x91\x62\x4b\x93\x6a\x47\x23\x08\x1b\x97\x0c\xcd\x3b\xaf\xb2\x9f\x57\x0d\xf9\x0d\x8e\x5d\xd8\xdf\xff\xca\xeb\x08\x60\x76\xd7\x7c\x30\xce\x3a\xe7\xd4\xb1\x03\x68\xe7\x1b\x77\x08\x27\xbe\x1f\x61\xf9\x39\x7c\x42\x10\x9c\xe5\xc5\xef\x3a\x6c\xdb\x2e\xb8\xbf\x9c\xf6\x7b\xb0\x23\x92\x9e\x2c\x5e\x8a\xed\x7b\xa4\x0b\x8a\xd6\x37\x45\xcf\xdf\x83\xa1\xc7\x51\xd8\x15\x5c\x81\xe0\xa1\x2b\xdb\x7f\xef\xeb\x97\x7a\xe1\x9e\x60\x69\x34\x9b\x7b\x31\xb5\xca\x98\xcd\x25\xfd\x2e\x85\x2f\xf7\x41\x10\xb4\x12\x4b\x3d\x6b\x44\x10\xa6\xe8\x7e\xe3\x56\x8f\xec\x30\x68\xc6\x6d\xf5\x5b\xba\x5e\x83\xbc\x88\x56\x42\x1b\xdf\xa0\xb0\xfe\x1d\xa7\xd9\x1c\xd4\x36\xa4\xb1\x19\xe3\xdf\x46\xc2\xff\x06\x00\x00\xff\xff\xb5\x11\x4c\xe8\xae\x28\x00\x00")

func ResourcesComponentDescriptorV2SchemaYamlBytes() ([]byte, error) {
	return bindataRead(
		_ResourcesComponentDescriptorV2SchemaYaml,
		"../../../../../../../resources/component-descriptor-v2-schema.yaml",
	)
}

func ResourcesComponentDescriptorV2SchemaYaml() (*asset, error) {
	bytes, err := ResourcesComponentDescriptorV2SchemaYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../../../../../../../resources/component-descriptor-v2-schema.yaml", size: 10414, mode: os.FileMode(436), modTime: time.Unix(1665732052, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"../../../../../../../resources/component-descriptor-v2-schema.yaml": ResourcesComponentDescriptorV2SchemaYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("nonexistent") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"..": &bintree{nil, map[string]*bintree{
		"..": &bintree{nil, map[string]*bintree{
			"..": &bintree{nil, map[string]*bintree{
				"..": &bintree{nil, map[string]*bintree{
					"..": &bintree{nil, map[string]*bintree{
						"..": &bintree{nil, map[string]*bintree{
							"..": &bintree{nil, map[string]*bintree{
								"resources": &bintree{nil, map[string]*bintree{
									"component-descriptor-v2-schema.yaml": &bintree{ResourcesComponentDescriptorV2SchemaYaml, map[string]*bintree{}},
								}},
							}},
						}},
					}},
				}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
