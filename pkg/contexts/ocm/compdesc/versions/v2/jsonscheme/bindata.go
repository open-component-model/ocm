// Code generated by go-bindata. (@generated) DO NOT EDIT.

//Package jsonscheme generated by go-bindata.// sources:
// ../../../../../../../resources/component-descriptor-v2-schema.yaml
package jsonscheme

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _ResourcesComponentDescriptorV2SchemaYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\xdd\x6f\x1b\xb9\x11\x7f\xd7\x5f\x31\x38\x07\xa0\x1c\x7b\x2d\x47\x45\x0a\x44\x2f\x86\x9b\x43\x81\xa0\xbd\x73\x91\xa4\x7d\xa8\xa3\x06\xd4\xee\x48\x62\xca\x25\x55\x92\x52\xac\xcb\xe5\x7f\x2f\x48\x2e\xf7\x7b\x57\x5f\x76\xee\x0e\x88\x1f\x12\x91\x3b\x9c\x19\x0e\x7f\xf3\xc1\xd9\x7d\xc6\x92\x09\x90\xa5\x31\x2b\x3d\x19\x8d\x16\x54\x25\x28\x50\x5d\xc5\x5c\xae\x93\x91\x8e\x97\x98\x52\x3d\x8a\x65\xba\x92\x02\x85\x89\x12\xd4\xb1\x62\x2b\x23\x55\xb4\x19\x93\xc1\x33\x4f\x51\xe2\xf0\x49\x4b\x11\xf9\xd9\x2b\xa9\x16\xa3\x44\xd1\xb9\x19\x8d\xaf\xc7\xd7\xd1\x8b\x71\xc6\x90\x0c\x02\x1b\x26\xc5\x04\xc8\xdd\x0a\x05\xbc\x0e\x32\xe0\x27\x99\x20\x87\xcd\x18\x0a\xea\x39\x13\xcc\x12\xeb\xc9\x00\x20\x45\x43\xed\xff\x00\x66\xbb\xc2\x09\x10\x39\xfb\x84\xb1\x21\x6e\xaa\xca\x39\x57\x1c\x0a\xc5\xdd\xfa\x84\x1a\xea\x17\x28\xfc\xdf\x9a\x29\x4c\x3c\x47\x80\x08\x88\x97\xfb\x2f\x54\x9a\x49\xe1\xa9\x56\x4a\xae\x50\x19\x86\x3a\xd0\x55\x88\xc2\x64\xae\x92\x36\x8a\x89\x05\x19\x0c\x00\x38\x9d\x21\xef\xd4\xb7\x45\xbc\xa0\x29\x92\x62\xb8\xa1\x7c\x8d\x5d\x5a\x58\xda\x4e\xe1\x7e\xd2\xad\x9f\xc0\x97\xaf\x61\x5c\x57\x79\x45\x8d\x41\x65\xcd\xf5\x9f\xcd\xfd\x75\xf4\x6a\x7a\xf1\x2c\xac\xd5\x6c\x21\x98\x58\x34\x24\xcc\xa4\xe4\x48\x45\x20\x4b\x51\x2d\xf0\x96\x2f\xa4\x62\x66\x99\xb6\x72\xbe\xa7\xd1\x2f\x53\xfb\xcf\x75\xf4\x6a\xf4\x31\x2a\xc9\x70\x8b\x5f\x4b\x31\x67\x0b\xa7\xe5\x00\x20\x3f\xb6\x9f\xf3\xed\xb5\x6c\x2d\xa5\x0f\x7f\x47\xb1\x30\xcb\x09\x8c\x5f\xbe\x1c\xb4\x0a\x8c\xbc\xc4\xe9\xf3\xe1\xfd\xd5\xb4\x36\x75\xfe\x3c\xcc\x7d\x19\x5f\x7e\x1d\x8e\x2a\x8f\x3f\xb6\x2c\xf9\x68\xd7\x9c\x5b\xcd\x07\x00\x2c\x41\x61\x98\xd9\xde\x1a\xa3\xd8\x6c\x6d\xf0\x6f\xb8\xf5\xaa\xa6\x4c\xe4\x7a\xb5\x69\x65\x85\x0f\xef\xa3\x8f\x17\x41\x91\x30\x79\x7e\xe3\x59\x2b\xe4\xf4\x01\x93\x77\x98\x6e\x50\x79\x9e\x67\x60\xe8\x7f\x51\xc0\x5c\xc9\x14\xb4\x7b\x60\xdd\x0b\xa8\x48\x80\x26\x9f\xd6\xda\x60\x02\x46\x02\xe5\x5c\x7e\x06\x2a\x40\x3a\x17\xa0\x1c\x38\xd2\x84\x89\x05\x90\x0d\xb9\x84\x94\x7e\x92\x2a\x92\x82\x6f\x2f\xdd\x52\x37\xbe\x4a\x99\xc8\x66\x83\xac\x25\xd3\x90\x22\x15\x1a\xcc\x12\x61\x2e\x2d\x57\xcb\xc4\x9b\x5f\x03\x55\x68\x45\x59\x6c\xb1\xa4\xaa\xaf\x0e\x0a\xbf\xb8\x1a\x5f\xfd\xa9\xfc\x3b\x9a\x4b\x79\x31\xa3\x2a\x9b\xdb\x94\x09\x36\x6d\x14\x2f\xae\xc6\xe1\x57\x4e\x56\xa2\xcf\x7f\x56\x96\x95\x8d\xbd\x99\xde\x0c\xaf\x7f\xbd\x7f\x11\xbd\x9a\x7e\x48\x9e\x9f\x0f\x6f\x26\x1f\xae\xca\x13\xe7\x37\xed\x53\xd1\x70\x78\x33\x29\x26\x7f\xfd\x90\xb8\x33\xba\x8d\xfe\x1d\x4d\xad\x87\x84\xdf\x81\xe5\x9e\xc4\xe7\x41\xe2\xc5\xb0\xfc\xe0\xc2\x31\xa9\xcc\x38\xca\xcc\x43\x9a\x11\xa5\x01\xbd\xce\xe8\x92\x05\x8c\xad\xf5\x23\x3d\x81\x2f\xf0\x4c\xe1\x7c\x02\xe4\x6c\x54\x8a\xa9\xa3\x36\x28\x13\xf8\xea\xa1\xb8\x92\x9a\x19\xa9\xb6\xaf\xa5\x30\xf8\x60\x0e\x09\x64\x96\xaa\x2b\x70\x39\x0e\x3d\x51\x53\xc6\xec\x6d\xbb\x6c\xca\xf9\xdd\xbc\x90\xd2\xba\xa3\x86\xda\x45\x3c\xad\xeb\x99\xe9\x3a\xa3\x1a\xff\xa9\x38\x29\x62\x57\x43\x65\xfb\x97\x91\x95\xa7\x3a\xc2\xae\xfd\xab\xc4\xb1\x9f\xe8\x6a\x55\x89\xa5\xbd\x4b\x01\x50\xac\xd3\x09\xdc\x93\xb5\xe2\xff\xa0\x66\x49\x2e\x81\xe8\x25\x1d\xbf\xfc\x73\x94\xb0\x05\x6a\x43\xa6\x83\x1a\x9f\x43\x39\x3b\x1b\x2f\x98\x36\x6a\x6b\xb9\xdf\xbd\x7e\x93\x0f\xa7\xf6\x0c\x68\x1c\xa3\xd6\x7b\xa6\x5a\x6b\x19\x47\x05\x73\xa9\xb2\xa5\xa8\x61\x68\x47\xf8\x60\x50\xd8\xa4\xa3\xcf\x77\x80\x65\x00\xb0\x60\x66\xb9\x9e\xdd\xf6\xcb\xee\x45\x9b\x1b\x5a\x08\x94\x0e\xd4\xcd\xcc\x8f\x42\x63\xdd\x6c\x5e\xc1\xdc\xfc\x99\xa0\x1d\xcb\x2d\x4a\xfb\x29\x62\x99\xa6\xcc\xf4\xf9\x84\x90\x02\x4f\xb1\xcb\x89\xfb\xfe\x59\x0a\xf4\xc0\xd0\x72\xad\x62\xfc\x31\x77\xb8\x03\xd4\xb1\x05\x4b\x3e\xc8\x4a\x91\x7c\x6c\x39\xe4\x03\x0f\xa1\xe3\xeb\x1e\x38\x20\xd8\x65\x4b\xf0\xc1\x28\xfa\x26\x23\x98\x1c\xc8\x87\x74\xd5\x57\x1d\x11\xaa\x94\x33\xc9\xfe\xc7\xe1\xaa\x49\xdd\x20\xa2\x4a\xd1\x6d\xb1\x73\x66\x30\xad\xc4\xad\x56\x1d\x1c\xaf\xb0\xa8\xec\xec\x6e\x2c\xb6\x77\xf3\x6a\x90\x6c\x65\xe2\xd7\x91\xdd\x84\x65\xbf\xde\x83\xdc\x5e\x28\x02\xf1\x00\xc0\xc7\xbc\x77\x2b\x8c\x0f\x00\xdb\x92\xea\x65\x5e\x96\x16\x10\x94\x2a\xa5\x9c\x69\x6a\x05\x35\x1f\xbb\x7a\xb9\x03\x76\x15\x86\xf5\x43\xf0\x07\x15\x00\xda\x2a\xa4\x77\x89\x2f\xd4\xdb\x29\x06\xbe\x16\xa7\x66\xad\xf0\x40\x23\xd0\x9e\x1d\xda\x51\x8a\x09\xa3\xef\x83\xe7\x35\xf7\x4c\x4f\x56\xde\x4f\xe5\x72\x0a\xaa\x6a\x06\x79\xbf\x44\x4f\xe4\xd3\x88\x9c\xbb\xe2\x33\xdf\x36\x94\x2e\x42\xbd\xf6\x39\x36\x1a\xe5\x0c\x0e\x88\x39\x95\x1d\x7a\x8c\xee\x70\xfc\x02\xc8\xe5\x4b\x56\x49\xf1\xce\x95\x15\x00\xf8\x84\x80\xb6\xee\xff\xf1\x18\xd7\xc8\x77\x7e\xc4\x3e\x1b\x11\xae\x85\xe6\x51\x42\xe9\xc1\x06\xcd\x6d\x92\x77\x13\xbc\x71\x0e\x49\x98\x9d\x19\x6a\x97\xa5\x5a\xb5\xab\x94\x80\x8f\x90\x22\x8e\xc4\x98\xc2\x2c\x67\x97\xcd\x01\x27\xe6\x8f\x3a\xfc\x9c\xfd\xb5\x8a\xdf\x86\x5a\x67\x67\xd1\x48\x6d\x5d\x84\x0a\x45\x8c\xee\xf6\x0a\xc3\xa2\xd5\xc4\x65\x4c\xf9\x79\x56\x6b\x74\x15\x30\x01\x3a\xef\x90\x63\x6c\xa4\x3a\x16\x69\x4f\x90\x56\xcb\x7d\x8c\xb7\x61\x97\xc7\xda\x25\xe7\xb4\x6f\xd7\xa8\x15\x77\x11\x90\x4d\x7f\x57\xab\xa5\xf3\x72\x18\xb4\xfb\x0a\x33\x38\x03\x1a\x9b\x35\xe5\x7c\x3b\x29\x24\x45\x2e\xda\x7f\x1e\x81\x5e\x61\xcc\x28\xb7\x58\x35\x8a\xc5\x4e\xc8\x1f\xb7\x96\x7b\xb2\x42\xad\x1e\x01\xa4\xc0\x7a\xa1\x96\xc9\x12\x6b\xce\xf7\xa8\xb4\x6a\x01\x34\x84\x8a\x22\x55\x1f\x78\xf7\x0b\x0c\xf4\xde\x1d\xce\x0c\x93\x70\xe6\xd6\x3b\xc7\x2f\xb8\x5c\x66\xed\xa8\xb5\x36\x90\x52\x13\x2f\x4b\xce\xa0\x1b\x57\x88\xe6\x35\x90\xbb\x12\xac\x34\x55\xae\x58\xbf\xdf\x2c\xf2\x5d\xf9\xc0\xfd\x48\x88\xf5\xcc\x8a\xec\xe3\x0f\x61\xef\xab\xa6\x83\x00\xb9\x04\x82\x0f\x06\x95\xa0\x3c\xbf\x6d\xff\x71\xef\x3f\x32\x66\x7f\xe1\x72\xff\x0b\x90\xb3\xc1\x5f\x19\x47\xbd\xd5\x06\xd3\xc3\xd7\xde\xb5\x09\x7c\xea\xe8\x21\x63\xf6\x26\xa5\x8b\x93\xfa\x14\x6e\xc8\x2c\x97\x3c\x6f\x3e\x4a\x03\xa3\xdc\xef\x0a\x78\xaa\x8a\xd9\xd1\x91\x2c\xcc\x79\xc2\xc6\x38\xdd\x06\xbf\x3c\x6d\x3f\x40\x32\x95\x08\x14\xbd\xa8\x79\xd7\xed\xea\xd6\x6e\xa0\x5a\x56\xd8\xeb\x55\x4a\x05\x9b\xa3\x36\xf5\x7b\x55\x4d\xe8\x91\x97\x37\x6f\x19\x1f\xc0\xbd\xa3\x78\x0d\x34\x18\xb9\x43\x62\x1d\xa8\x4d\x71\x9e\x22\x88\x32\x54\x2d\xd0\x60\x02\xb1\x14\x26\x2f\x94\x3a\xd9\x6b\xf6\x4b\xef\x5e\xec\x73\x60\x02\x66\x5b\x83\x3a\xc8\x98\x59\x63\xd7\xf9\x8a\x75\x3a\xb3\x07\x3a\x00\xe8\x74\xd9\x13\xe0\x32\x67\x1c\x8b\x7c\x79\x2a\x62\x5a\x34\x2c\xd0\x13\x44\x75\xd9\x25\x3c\x2f\x9b\x03\xcc\x92\x1a\x60\xda\xed\xdd\x9a\x9f\x09\xf7\xec\x07\xfb\x50\xff\x00\x09\x53\xae\x30\xdf\x76\x9e\x47\xb0\xdb\xdd\x23\xf9\xd7\x13\x18\xec\xae\xee\x67\xfd\xe0\xac\x02\xd3\xf9\x3b\x7c\x66\x66\x99\x99\x26\x5e\x2b\x85\xc2\x40\xdb\xcb\xe9\x3e\x2b\x85\xd0\xfa\x36\xab\x8c\x0e\xb1\x51\x47\xc5\xd5\x69\xc4\xef\x35\xd2\xee\x5c\xe2\x0e\xe3\xdb\x17\x26\x5d\xc5\x45\x29\xed\x7e\x9b\x64\x3f\x00\x28\x9a\xb4\x27\x38\xec\x3a\xbc\xa5\x39\x31\xbd\x5b\x65\xf2\xe3\x58\xf7\xbc\x91\x19\x00\x2c\x50\xa0\x62\xf1\x6f\xf8\x36\x25\xd3\xc0\xbf\x50\xc9\x06\xdf\x3d\xfb\x77\xe0\xd9\xc5\xc1\xf8\xf9\xdf\xd6\xb1\x2b\x40\xfd\x56\x45\x7c\x9e\x99\xf6\x6e\x57\x1d\xdc\x9f\x6a\xe2\xb4\xf1\xce\x5e\x97\x1e\xae\x94\xdc\xb0\xa4\x38\xd1\x08\x48\xa5\xc9\x50\xed\x79\xe5\xf5\xbc\xae\xf0\xaf\xac\xf8\x5d\x74\x73\x63\x85\xee\x62\xfc\x9e\x35\xdd\xee\x3e\x20\xf4\x32\x3b\xc6\xe2\x7d\xff\x5c\xaa\x94\x9a\x09\x24\xd4\x60\x64\x58\xde\xaf\x6e\x9a\xf0\x60\xd8\x36\xae\xbd\x7d\xf7\xd9\xc6\x17\x1a\x04\xce\x42\x79\xc3\xb7\x97\xf0\x19\x41\x0a\xbe\xcd\xbe\x4a\x72\xb7\x00\x29\x82\xb2\xe1\x48\x77\x38\xe6\x93\xb9\x5f\x86\x86\x47\xea\x77\xd4\xde\x88\xe7\x07\xdc\x84\xe4\xe3\x08\x6c\x32\xae\xb7\xfa\x9f\xf2\xec\xcb\x3d\x42\xb2\x27\x58\x2a\xb5\xeb\x5e\x8b\x6a\x59\xd1\x85\xa6\x76\x93\xba\xef\x06\x07\xb5\x38\x55\x0e\x42\x11\x90\x14\xfd\x27\x9f\xe5\x40\x41\x06\xd5\x30\x50\x7c\x5a\xda\xaa\x50\x60\x51\x8b\x8f\xfd\x07\x44\xca\xef\x26\xab\xb5\x46\xe9\x40\x2a\x87\xd1\xff\xfa\x8f\xd4\xde\xfc\x9d\xc0\xb3\xfd\x65\x19\xf9\x7f\x00\x00\x00\xff\xff\xa6\x30\x71\x09\x15\x2c\x00\x00")

func ResourcesComponentDescriptorV2SchemaYamlBytes() ([]byte, error) {
	return bindataRead(
		_ResourcesComponentDescriptorV2SchemaYaml,
		"../../../../../../../resources/component-descriptor-v2-schema.yaml",
	)
}

func ResourcesComponentDescriptorV2SchemaYaml() (*asset, error) {
	bytes, err := ResourcesComponentDescriptorV2SchemaYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../../../../../../../resources/component-descriptor-v2-schema.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"../../../../../../../resources/component-descriptor-v2-schema.yaml": ResourcesComponentDescriptorV2SchemaYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//
//	data/
//	  foo.txt
//	  img/
//	    a.png
//	    b.png
//
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"..": {nil, map[string]*bintree{
		"..": {nil, map[string]*bintree{
			"..": {nil, map[string]*bintree{
				"..": {nil, map[string]*bintree{
					"..": {nil, map[string]*bintree{
						"..": {nil, map[string]*bintree{
							"..": {nil, map[string]*bintree{
								"resources": {nil, map[string]*bintree{
									"component-descriptor-v2-schema.yaml": {ResourcesComponentDescriptorV2SchemaYaml, map[string]*bintree{}},
								}},
							}},
						}},
					}},
				}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
