// Code generated by go-bindata. (@generated) DO NOT EDIT.

//Package jsonscheme generated by go-bindata.// sources:
// ../../../../../../../resources/component-descriptor-v2-schema.yaml
package jsonscheme

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _ResourcesComponentDescriptorV2SchemaYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x1a\x5d\x6f\xdb\xba\xf5\x5d\xbf\xe2\xe0\xa6\x80\x9c\x26\x8a\x5b\x0f\x1d\x70\xfd\x12\x64\x1d\x06\x14\xdb\xbd\x19\xda\x6e\x0f\x4b\xbd\x82\x96\x8e\x6d\x76\x14\xe9\x91\x94\x1b\xb5\xb7\xff\x7d\x20\x29\xea\x5b\xb2\x1d\xa7\xed\x2e\xd0\xbc\x44\xa4\xce\x17\xcf\xf7\xa1\xfc\x84\x26\x73\x08\x37\x5a\x6f\xd5\x7c\x3a\x5d\x13\x99\x20\x47\x79\x15\x33\x91\x25\x53\x15\x6f\x30\x25\x6a\x1a\x8b\x74\x2b\x38\x72\x1d\x25\xa8\x62\x49\xb7\x5a\xc8\x68\x37\x0b\x83\x27\x0e\xa2\x46\xe1\x83\x12\x3c\x72\xbb\x57\x42\xae\xa7\x89\x24\x2b\x3d\x9d\x3d\x9b\x3d\x8b\x9e\xcf\x0a\x82\x61\xe0\xc9\x50\xc1\xe7\x10\xde\x6e\x91\xc3\x4b\xcf\x03\x7e\x11\x09\x32\xd8\xcd\xa0\x82\x5e\x51\x4e\x0d\xb0\x9a\x07\x00\x29\x6a\x62\xfe\x03\xe8\x7c\x8b\x73\x08\xc5\xf2\x03\xc6\x3a\xb4\x5b\x4d\xca\xa5\xe0\x50\x09\x6e\xf1\x13\xa2\x89\x43\x90\xf8\xdf\x8c\x4a\x4c\x1c\x45\x80\x08\x42\xc7\xf7\x9f\x28\x15\x15\xdc\x41\x6d\xa5\xd8\xa2\xd4\x14\x95\x87\x6b\x00\xf9\xcd\x52\x24\xa5\x25\xe5\xeb\x30\x08\x00\x18\x59\x22\x1b\x94\xb7\x87\x3d\x27\x29\x86\xd5\x72\x47\x58\x86\x43\x52\x18\xd8\x41\xe6\x6e\xd3\xe2\xcf\xe1\xf3\x17\xbf\x6e\x8b\xbc\x25\x5a\xa3\x34\xea\xfa\xf7\xee\xee\x59\xf4\xf3\xe2\xe2\x89\xc7\x55\x74\xcd\x29\x5f\x77\x38\x2c\x85\x60\x48\xb8\x3d\x5f\xa9\xe3\x5f\x4b\x59\x7a\xe4\x48\xc9\xfd\xdf\x90\xaf\xf5\x66\x0e\xb3\x17\x2f\x82\x16\xdf\x3b\x12\x7d\x5a\xdc\x45\x24\xfa\x64\xf8\x3f\x9d\xdc\x5d\x2d\x5a\x5b\xe7\x4f\xfd\xde\xe7\xd9\xe5\x97\xc9\xb4\xf1\xfa\x7d\x0f\xca\x7b\x83\x73\x6e\x8e\x12\x00\xd0\x04\xb9\xa6\x3a\xbf\xd1\x5a\xd2\x65\xa6\xf1\xaf\x98\x3b\x51\x53\xca\x4b\xb9\xfa\xa4\x32\xcc\x27\x77\xd1\xfb\x0b\x2f\x88\xdf\x3c\xbf\x76\xa4\x25\x32\x72\x8f\xc9\x1b\x4c\x77\x28\x1d\xcd\x33\xd0\xe4\x3f\xc8\x61\x25\x45\x0a\xca\xbe\x30\xb1\x00\x84\x27\x40\x92\x0f\x99\xd2\x98\x80\x16\x40\x18\x13\x1f\x81\x70\x10\xd6\x5f\x09\x03\x86\x24\xa1\x7c\x0d\xe1\x2e\xbc\x84\x94\x7c\x10\x32\x12\x9c\xe5\x97\x16\xd5\xae\xaf\x52\xca\x8b\x5d\xcf\x6b\x43\x15\xa4\x48\xb8\x02\xbd\x41\x58\x09\x43\xd5\x10\x71\xea\x57\x40\x24\x1a\x56\xc6\x11\x68\xd2\x94\x57\x79\x81\x9f\x5f\xcd\xae\xfe\x50\x7f\x8e\x56\x42\x5c\x2c\x89\x2c\xf6\x76\x75\x80\x5d\x1f\xc4\xf3\xab\x99\x7f\x2a\xc1\x6a\xf0\xe5\x63\x03\xad\xae\xec\xdd\xe2\x7a\xf2\xec\xb7\xbb\xe7\xd1\xcf\x8b\x77\xc9\xd3\xf3\xc9\xf5\xfc\xdd\x55\x7d\xe3\xfc\xba\x7f\x2b\x9a\x4c\xae\xe7\xd5\xe6\x6f\xef\x12\x6b\xa3\x9b\xe8\x5f\xd1\xc2\xb8\xb3\x7f\xf6\x24\x0f\x04\x3e\xf7\x1c\x2f\x26\xf5\x17\x17\x96\x48\x63\xc7\x42\x16\x21\xd3\x0d\xff\x8e\xeb\x0d\xa6\x82\x22\xba\x73\x13\x47\x6a\x0e\x9f\xe1\x89\xc4\xd5\x1c\xc2\xb3\x69\x2d\x01\x4e\xfb\x5c\x39\x84\x2f\xce\x15\xb7\x42\x51\x2d\x64\xfe\x52\x70\x8d\xf7\xfa\x98\xac\x63\xa0\x86\xb2\x8c\xa5\x30\x92\xe2\x44\x4c\x5f\xf7\xf3\x26\x8c\xdd\xae\x2a\x2e\xbd\x27\xea\x88\x5d\x25\xbf\xb6\x9c\x85\xac\x4b\xa2\xf0\x1f\x92\x85\x55\x0a\xeb\x88\x6c\xfe\x0a\xb0\xfa\xd6\x40\x8e\x34\x7f\x8d\x3c\xf6\x0b\xd9\x6e\x1b\x89\x6f\x14\x15\x00\x79\x96\xce\xe1\x2e\xcc\x24\xfb\x3b\xd1\x9b\xf0\x12\x42\xb5\x21\xb3\x17\x7f\x8c\x12\xba\x46\xa5\xc3\x45\xd0\xa2\x73\x2c\x65\xab\xe3\x35\x55\x5a\xe6\x86\xfa\xed\xcb\x57\xe5\x72\x61\x6c\x40\xe2\x18\x95\x3a\xb0\x2e\x1a\xcd\x58\x28\x58\x09\x59\xa0\xa2\x82\x89\x59\xe1\xbd\x46\x6e\x2a\x84\x3a\xdf\xe3\x2c\x01\xc0\x9a\xea\x4d\xb6\xbc\x19\xe7\x3d\xea\x6d\x76\x69\x5c\xa0\x66\x50\xbb\xb3\x7a\x90\x37\xb6\xd5\xe6\x04\x2c\xd5\x5f\x30\xda\x83\x6e\xbc\x74\x1c\x22\x16\x69\x4a\xf5\x58\x4c\x70\xc1\xf1\x14\xbd\x9c\x78\xee\x5f\x05\x47\xe7\x18\x4a\x64\x32\xc6\x3f\x97\x01\x77\x84\x38\xa6\xbb\x28\x17\x45\xdf\x50\xae\x0d\x85\x72\xe1\x5c\xe8\xe1\x4d\x0a\x1c\x91\xec\x0a\x14\xbc\xd7\x92\xbc\x2a\x00\xe6\x47\xd2\x09\x87\x9a\xa1\x81\x0c\x55\xab\x99\xe1\xe1\xe6\xb0\xad\x9f\xea\x00\x11\x29\x49\x5e\x9d\x9c\x6a\x4c\x1b\x79\xab\x57\x06\x4b\xcb\x23\xd5\x83\xdd\xae\x79\x7e\xbb\x6a\x26\xc9\x5e\x22\x0e\x2f\xdc\x0f\x58\x8f\xeb\x03\xc0\x4d\xf7\xef\x81\x03\x00\x97\xf3\xde\x6c\x31\x3e\xc2\xd9\x36\x44\x6d\x6e\xd8\x5a\x48\xaa\x37\x69\xe5\x82\x42\xa6\x84\x51\x45\x0c\xa3\xee\x6b\xdb\xdc\x0e\xb8\x5d\x83\x60\xdb\x08\xce\x50\xde\x41\x7b\x99\x8c\xa2\xb8\xae\xba\x1f\x22\x70\x8d\x33\xd1\x99\xc4\x23\x95\x40\x46\x4e\x68\x56\x29\x26\x94\xbc\xf5\x91\xd7\x3d\x33\x39\x59\x78\xb7\x55\xf2\xa9\xa0\x9a\x15\xe4\xed\x06\x1d\x90\x2b\x23\x62\x65\x9b\xcf\xf2\xd8\x50\x9b\x5a\x46\xf5\xf3\xd0\x6c\xe4\x5c\xac\x5c\x96\xf4\x8e\x48\x41\x8d\x03\x3b\x7a\x7b\xf2\x40\xe5\xd7\xf5\x01\xa9\x76\x8e\x41\xcc\x86\x3f\xd8\x18\x51\x32\x7e\xed\xcb\xcc\xde\x7a\x4d\x4c\x49\x42\x89\x3c\x46\x3b\x38\xc0\xa4\x1a\xc9\x99\x88\x09\x3b\x2f\xd2\xfc\x50\xed\xf0\x09\xf0\x0d\x32\x8c\xb5\x90\x0f\xcd\x97\x5f\x21\xa3\xd5\x47\xc8\xd7\xfe\x94\x0f\xd5\x4b\x49\xe9\xd0\xe9\xba\xd1\xf5\xd5\xa7\xee\xf1\xe9\xbf\x67\xe8\x1d\x3c\x67\x2f\x8b\xb1\x9a\x08\x67\x40\x62\x9d\x11\xc6\xf2\x79\xc5\x29\xb2\x81\xf6\x71\x0a\x6a\x8b\x31\x25\x0c\x24\x1a\xf8\xd8\x32\xf9\xfd\x96\xd1\xaf\x56\x23\xdb\x11\x2d\x38\xb6\x6b\x64\xc1\x8b\x67\x8c\x1d\x50\xe4\xea\xd1\x6f\xa7\x2d\x17\x72\x55\x96\x3c\xb2\xed\xf6\x04\xd4\xc1\x37\x41\x85\x4f\xc2\x99\xc5\xb7\x81\x5f\x51\xb9\x2c\x6e\x02\x32\xa5\x21\x25\x3a\xde\xd4\x82\x41\x75\xba\xb7\x6e\x07\xce\x6c\xf5\xab\x6d\xd5\x9b\x85\x1f\x4d\x5d\x79\x2a\x97\xb8\x1f\xc9\x63\x1d\xb1\x6a\xee\x70\x46\x38\xb8\xcb\xb7\x2e\x60\xc6\x41\x33\xb4\x49\x4e\x58\x39\xe8\xfc\x7e\x5b\x4f\x11\xd3\x3f\x31\x71\x78\xef\x69\x75\xf0\x17\xca\x50\xe5\x4a\x63\x7a\x3c\xee\x6d\x1f\xc3\xaf\x9d\x3d\x44\x4c\x5f\xa5\x64\x7d\xd2\x88\x68\x97\xd4\x50\x29\xeb\xe6\xa3\xcc\x8e\xf5\xab\x06\xef\x4f\x4d\x36\x7b\x2e\x83\x2a\x75\x9e\x70\x30\x46\x72\x1f\x97\xa7\x9d\x07\xc2\x42\xa4\x10\xaa\x6b\x80\xd5\x50\x63\x7b\x63\x0e\xd0\x6c\x2b\x4c\x67\x9b\x12\x4e\x57\xa8\x74\xbb\xa5\x6d\x31\x7d\x60\xdf\xec\x34\xe3\x12\xb8\x0b\x14\x27\x81\x02\x2d\xf6\x70\x6c\x3b\x6a\x97\x9d\x83\xf0\xac\x34\x91\x6b\xd4\x98\x40\x2c\xb8\x2e\x1b\xa5\x41\xf2\x8a\x7e\x1a\x3d\x8b\x79\x0f\x94\xc3\x32\xd7\xa8\x3c\x8f\xa5\x51\x76\x9b\x2e\xcf\xd2\xa5\x31\x68\x00\x30\x18\xb2\x27\xb8\xcb\x8a\x32\xac\xea\xe5\xa9\x1e\xd3\x23\x61\xe5\x3d\x9e\xd5\x90\x5e\xfc\xfb\xba\x3a\x40\x6f\x88\x06\xaa\xec\xd9\x8d\xfa\x29\xb7\xef\x7e\x32\x2f\xd5\x4f\x90\x50\x69\x1b\xf3\x7c\xd0\x1e\x5e\x6f\xb7\x8f\x14\x5f\x5f\x41\x61\xb7\xed\x38\x1b\x77\xce\xa6\x63\xda\x78\x87\x8f\x54\x6f\x0a\xd5\xc4\x99\x94\xc8\x35\xf4\x7d\xc4\x1b\xd3\x92\x4f\xad\xaf\x8b\xce\xe8\x94\x6f\x6f\xf5\x29\xa0\x4f\x89\x3f\x7a\xa4\xfd\xb5\xc4\x1a\xe3\xdb\x37\x26\x43\xcd\x45\xad\xec\x7e\x9b\x62\x1f\x00\x54\xf7\x63\x27\x04\x6c\xe6\x2f\xc8\x4f\x2c\xef\x46\x98\xd2\x1c\xd9\xc8\x65\x78\x00\xb0\x46\x8e\x92\xc6\xdf\xf1\x22\xbb\x90\xc0\xdd\x65\x17\x8b\x1f\x91\xfd\x7f\x10\xd9\x95\x61\xdc\xfe\xf7\x0d\xec\x86\xa3\x7e\xab\x26\xbe\xac\x4c\x07\x5f\x57\x1d\x7d\x3f\xd5\xf5\xd3\xce\xe7\x52\x55\x7b\xb9\x95\x62\x47\x93\xca\xa2\x11\x84\x8d\x4b\x86\xe6\x9d\x57\xd9\xcf\xab\x06\xfd\x06\xc6\x3e\xdf\x3f\xfc\xca\xeb\x04\xc7\x8c\x25\xda\xc1\xf8\x2d\xed\x86\xdd\x9d\xf7\xd0\xcb\xc2\x8c\xd5\xa7\xd6\x95\x90\x29\xd1\x73\x48\x88\xc6\x48\xd3\xf2\xfa\xb8\xab\xc2\xa3\xdd\xb6\x33\xf6\x8e\xcd\xb3\x9d\x8f\xe3\x21\x9c\xf9\xf6\x86\xe5\x97\xf0\x11\x41\x70\x96\x17\x3f\x08\xb1\x53\x80\xe0\x5e\x58\x6f\xd2\xef\xf5\xad\xa9\xf0\x86\x47\xba\xef\x68\x7d\x8c\x2c\x0d\xdc\x75\xc9\xc7\x61\xd8\x25\x5c\x5d\xb6\x3c\xf4\x64\x87\xdb\xbe\x7e\x47\x18\x1e\xe8\x2c\x8d\xde\xf5\x20\xa4\x56\x55\xb4\xa9\xa9\x5f\xa5\xf0\xf9\x4b\x10\x04\xad\x3c\x55\x4f\x42\x11\x84\x29\xba\x9f\xc6\xd5\x13\x45\x18\x34\xd3\x40\xf5\x13\xbc\x5e\x81\x3c\x89\x56\x7e\x1c\x37\x50\x58\xff\x2c\xd4\xec\x35\x6a\x06\x69\x18\x63\xfc\x53\x4b\xf8\xbf\x00\x00\x00\xff\xff\x25\x78\x14\x55\xdc\x28\x00\x00")

func ResourcesComponentDescriptorV2SchemaYamlBytes() ([]byte, error) {
	return bindataRead(
		_ResourcesComponentDescriptorV2SchemaYaml,
		"../../../../../../../resources/component-descriptor-v2-schema.yaml",
	)
}

func ResourcesComponentDescriptorV2SchemaYaml() (*asset, error) {
	bytes, err := ResourcesComponentDescriptorV2SchemaYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../../../../../../../resources/component-descriptor-v2-schema.yaml", size: 10460, mode: os.FileMode(420), modTime: time.Unix(1682092368, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"../../../../../../../resources/component-descriptor-v2-schema.yaml": ResourcesComponentDescriptorV2SchemaYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//
//	data/
//	  foo.txt
//	  img/
//	    a.png
//	    b.png
//
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"..": {nil, map[string]*bintree{
		"..": {nil, map[string]*bintree{
			"..": {nil, map[string]*bintree{
				"..": {nil, map[string]*bintree{
					"..": {nil, map[string]*bintree{
						"..": {nil, map[string]*bintree{
							"..": {nil, map[string]*bintree{
								"resources": {nil, map[string]*bintree{
									"component-descriptor-v2-schema.yaml": {ResourcesComponentDescriptorV2SchemaYaml, map[string]*bintree{}},
								}},
							}},
						}},
					}},
				}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
