// Code generated by go-bindata. (@generated) DO NOT EDIT.

//Package jsonscheme generated by go-bindata.// sources:
// ../../../../../../../resources/component-descriptor-v2-schema.yaml
package jsonscheme

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _ResourcesComponentDescriptorV2SchemaYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x5f\x6f\x1b\xb9\x11\x7f\xd7\xa7\x18\x9c\x0d\x50\x3e\x7b\x2d\x47\x45\x0a\x44\x2f\x86\x9b\x43\x81\xa0\xbd\xf3\x21\x49\xfb\x50\x47\x0d\xa8\xdd\x91\xc4\x74\x97\x54\x49\x4a\xb1\x2e\xe7\xef\x5e\x90\x5c\xee\x72\xff\xea\x5f\x9c\xc3\xa1\xe7\x87\x44\xe4\x0e\x67\x86\x3f\xfe\x66\x38\xe4\xee\x39\x4b\x26\x40\x96\x5a\xaf\xd4\x64\x34\x5a\x50\x99\x20\x47\x79\x1d\xa7\x62\x9d\x8c\x54\xbc\xc4\x8c\xaa\x51\x2c\xb2\x95\xe0\xc8\x75\x94\xa0\x8a\x25\x5b\x69\x21\xa3\xcd\x98\x0c\xce\x9d\x44\xa0\xe1\x93\x12\x3c\x72\xbd\xd7\x42\x2e\x46\x89\xa4\x73\x3d\x1a\xdf\x8c\x6f\xa2\x17\xe3\x5c\x21\x19\x78\x35\x4c\xf0\x09\x90\xfb\x15\x72\x78\xed\x6d\xc0\x8f\x22\xc1\x14\x36\x63\xf0\xd2\xe7\x09\xce\xd5\x64\x00\x90\xa1\xa6\xe6\x7f\x00\xbd\x5d\xe1\x04\x88\x98\x7d\xc2\x58\x13\xdb\x55\xd5\x59\xb8\x0c\xa5\xcb\x76\x7c\x42\x35\x75\x03\x24\xfe\x77\xcd\x24\x26\x4e\x23\x40\x04\xc4\x59\xfc\x27\x4a\xc5\x04\x77\x52\x2b\x29\x56\x28\x35\x43\xe5\xe5\x2a\x42\xbe\xb3\x70\x49\x69\xc9\xf8\x82\x0c\xac\xbb\x72\x81\x9d\xfe\x36\x15\xd3\x74\x21\x24\xd3\xcb\xac\x54\xba\xa2\x5a\xa3\x34\x13\xfa\xf7\x03\x8d\x7e\x99\x9a\x7f\x6e\xa2\x57\xa3\x8f\xd1\xf4\xf2\x9c\xe4\x62\xb1\xe0\x73\xb6\x98\xc0\x17\x78\xb2\x3d\x34\x49\x98\x81\x81\xa6\x3f\x97\x36\x60\x4e\x53\x85\x03\x80\x94\xce\x30\xed\xf4\xaa\x05\x14\x4e\x33\x24\x65\x73\x43\xd3\x35\x76\x4d\xc1\xc8\x76\x42\xe2\x3a\xed\xf8\x09\x7c\x79\xf2\xed\x3a\x90\xc1\x9c\x37\x0f\x37\xd1\xab\x60\xa6\x8a\x2d\x38\xe3\x8b\x86\x85\x99\x10\x29\x52\xee\xc5\x02\xe0\xcd\xdf\xb9\xc4\xf9\x04\xc8\xd9\xc8\x12\x69\x64\x9f\xda\x05\x2a\x48\xf2\x53\xe1\x76\x8b\xcb\x19\x7d\xfc\x3b\xf2\x85\x5e\x4e\x60\xfc\xf2\xe5\xa0\x75\x59\x22\xb7\x2e\xd3\xef\x87\x0f\xd7\xd3\x5a\xd7\xc5\xf7\xbe\xef\xcb\xf8\xea\x69\x38\xaa\x3c\xfe\xd8\x32\xe4\xa3\x19\x73\x61\x66\x3d\x00\x60\x09\x72\xcd\xf4\xf6\x4e\x6b\xc9\x66\x6b\x8d\x7f\xc3\xad\x73\x35\x63\xbc\xf0\xab\xcd\x2b\x63\x7c\xf8\x10\x7d\xbc\xf4\x8e\xf8\xce\x8b\x5b\xa7\x5a\x62\x4a\x1f\x31\x79\x87\xd9\x06\xa5\xd3\x79\x06\x9a\xfe\x07\x39\xcc\xa5\xc8\x40\xd9\x07\x26\x8c\x81\xf2\x04\x68\xf2\x69\xad\x34\x26\xa0\x05\xd0\x34\x15\x9f\x81\x72\x10\x2b\xc7\x34\x48\x91\x26\x8c\x2f\x80\x6c\xc8\x15\x64\xf4\x93\x90\x91\xe0\xe9\xf6\xca\x0e\xb5\xed\xeb\x8c\xf1\xbc\xd7\xdb\x5a\x32\x05\x19\x52\xae\x40\x2f\x11\xe6\xc2\x68\x35\x4a\x1c\xfc\x0a\xa8\x44\x63\xca\x70\x86\x25\x55\x7f\x95\x77\xf8\xc5\xf5\xf8\xfa\x4f\xe1\xef\x68\x2e\xc4\xe5\x8c\xca\xbc\x6f\x13\x0a\x6c\xda\x24\x5e\x5c\x8f\xfd\xaf\x42\x2c\x90\x2f\x7e\x56\x86\x85\x60\x6f\xa6\xb7\xc3\x9b\x5f\x1f\x5e\x44\xaf\xa6\x1f\x92\xef\x2f\x86\xb7\x93\x0f\xd7\x61\xc7\xc5\x6d\x7b\x57\x34\x1c\xde\x4e\xca\xce\x5f\x3f\x24\x76\x8d\xee\xa2\x7f\x45\x53\xc3\x7c\xff\xdb\xab\xdc\x53\xf8\xc2\x5b\xbc\x1c\x86\x0f\x2e\xad\x92\x4a\x8f\x95\xcc\xa3\xab\x99\xbf\x1a\xd4\xdb\x95\xcb\xb6\x26\x8e\x94\x49\x44\xb5\x90\x6b\x23\x31\x81\x27\x47\xc2\x95\x50\x4c\x0b\xb9\x7d\x2d\xb8\xc6\x47\x7d\x48\x6a\x32\x52\x5d\xa9\xc8\x6a\xe8\xc9\xce\x22\x66\x6f\xdb\x6d\xd3\x34\xbd\x9f\x97\x56\x6a\x73\x69\x38\x5c\xe6\xc6\xba\x87\xb9\x97\x33\xaa\xf0\x1f\x32\x25\x65\x86\x6b\x38\x6b\xfe\x72\xb1\xb0\xab\x23\x85\xba\xa4\x1f\xe4\xae\x1f\xe9\x6a\x55\xc9\x8b\xbd\x43\x01\x90\xaf\xb3\x09\x3c\x90\xb5\x4c\x7f\xa6\x7a\x49\xae\x80\xa8\x25\x1d\xbf\xfc\x73\x94\xb0\x05\x2a\x4d\xa6\x83\x9a\x9e\x43\x35\x5b\x74\x17\x4c\x69\xb9\x35\xda\xef\x5f\xbf\x29\x9a\x53\x83\x3e\x8d\x63\x54\x6a\xcf\xcd\xdc\x20\x63\xa5\x60\x2e\x64\x3e\x14\x15\x0c\x4d\x0b\x1f\x35\x72\xb3\x81\xa8\x8b\x1d\x34\x19\x00\x2c\x98\x5e\xae\x67\x77\xfd\xb6\x7b\x79\x66\x9b\x86\x02\xc1\x82\xda\x9e\xf9\x51\x3c\xac\xc3\xe6\x1c\x2c\xe0\xcf\x0d\xed\x18\x6e\xf8\xd9\x2f\x11\x8b\x2c\x63\xba\x2f\x1a\xb8\xe0\x78\x0a\x2e\x27\xce\xfb\x27\xc1\xd1\x11\x43\x89\xb5\x8c\xf1\x07\x9c\x33\x6e\x8b\x98\x03\xdc\x31\xc5\x47\xd1\xc8\xcb\x8a\xa2\x6d\x34\x14\x0d\x47\xa1\xe3\x6b\x98\x46\x4d\xd1\x9a\xe0\x72\x61\x7c\xd4\x92\xbe\xc9\x05\x3a\xab\x92\x86\x06\xd2\x55\x1f\x35\xf2\x51\xb0\x2b\x92\xfd\xc1\xb7\x75\xa0\x6a\x08\x51\x29\xe9\xb6\x9c\x27\xd3\x98\x55\xb2\x54\xcd\xba\xd5\xe2\xc5\xc3\xa0\xb6\x6d\xbe\xbd\x9f\x57\x93\x61\x6d\xb8\x1b\x41\xfa\x44\xc2\x98\xed\x15\x34\x47\x10\x2f\x36\x00\x70\x99\xec\xdd\x0a\xe3\x03\x28\xb4\xa4\x6a\x79\xe7\xcb\xf0\x92\x58\x42\x66\x34\x65\x8a\x1a\x42\x36\x1f\xdb\x8a\xb6\x83\x4c\x15\x85\x75\xb0\xdd\x82\x78\xda\xb5\x1a\xe9\x1d\xe2\x4a\xe9\x76\x89\x01\x80\x66\x19\x2a\x4d\xb3\x55\x1d\x04\x87\x41\x87\xc7\x7d\x4a\xf3\x2e\xd6\x0c\x90\x8a\x00\x98\x3c\x9d\x51\x3d\x81\x84\x6a\x8c\x8c\xbc\x0d\x6d\xb6\xe0\x54\xaf\x25\x1e\xb8\x28\xb4\x07\x71\xd3\xca\x30\x61\xf4\xbd\x8f\xef\xbd\xce\x55\x07\x82\xe9\xba\x0a\x3b\xa5\x54\x75\x9f\x7a\xbf\x44\x27\xe4\x36\x2b\x31\xb7\x65\x6d\x31\x6d\x08\x8e\x4e\x6d\xeb\x55\x08\x1e\x9b\xf3\x1c\xe5\x8b\x66\xa1\xcf\x55\x35\xbd\xa7\xc2\x7d\x13\x61\x05\x10\x67\xaf\x33\x33\x95\x11\x18\x9e\xdf\x82\x19\xb6\x8c\xa9\x70\x84\x04\x84\xb3\x44\xee\x1c\x56\xa1\xba\xdb\xd0\xd0\x9c\x55\x7e\x38\x26\x09\x14\x98\x1e\x01\x49\x23\x5b\xb7\xc8\x9c\xb8\x21\x1c\x80\x7a\x81\x43\x71\xbb\xe2\x00\x39\x64\x93\xef\xdc\x55\x77\xa1\x53\xf3\xab\x52\xb0\x9e\xb4\xb9\x1d\x4c\x3b\x89\x79\x55\x11\x4e\x1e\x8e\xde\xf3\xea\xd4\xb2\x38\x2b\x19\xbf\xf5\x75\xd8\xce\x82\x96\x9a\x9a\x0d\x25\xf2\x18\xed\x69\x1a\x86\xe5\x15\x5b\x2a\x62\x9a\x5e\xe4\x75\x10\x39\x32\x74\x3d\x79\xde\x61\x8a\xb1\x16\xf2\x70\x96\x7d\xd5\xf2\x20\xbc\x6b\x79\xeb\x67\x7e\x2c\x56\x85\xa6\x7d\x6f\xac\x5a\x99\x17\x01\xd9\x84\xf7\x7c\x87\x63\xdc\x72\x7b\xb4\x2f\xed\xfb\x4a\x4c\x38\x03\x1a\xeb\x35\x4d\xd3\xed\xa4\xb4\x11\xd9\x1d\xe5\xf3\x08\xd4\x0a\x63\x46\x53\xc3\x69\x2d\x59\x6c\x5c\x56\xbf\x97\xaa\xf4\x19\x4a\xce\x7a\x2e\x10\x1c\xeb\x25\x67\x6e\x85\xaf\xd3\xb4\xb7\x7e\xac\x25\x4e\x9f\x34\xca\x0d\xff\xc0\x73\xaa\x57\xa0\xf6\xbe\x59\xcd\xf9\x08\x67\x76\xbc\x4d\x04\xa5\x96\xab\xfc\xba\x6c\xad\x34\x64\x54\xc7\xcb\x20\x10\x54\xe3\xb8\xd3\x3c\xb2\xa6\xb6\xb0\x0c\xba\xc2\xda\xfb\xff\xf6\x14\xe4\xd2\xf6\xc9\x9c\x74\x6a\xca\xfd\xc6\x81\xbd\xf7\xf1\xd7\x2e\x35\xb9\x02\x82\x8f\x1a\x25\xa7\x69\x71\x03\xf0\x7b\x39\xa5\x89\x98\xfd\x25\x15\xfb\x1c\xd3\xec\x5c\xff\xca\x52\x54\x5b\xa5\x31\x3b\x64\xd4\x7d\x9b\x91\xe7\xcb\x00\x22\x66\x6f\x32\xba\x38\xe9\x5e\xc4\x36\x99\xd1\x52\xec\x7b\x5f\xe5\xc2\x24\xbc\x5f\xf3\x5c\xa9\x9a\xd9\x71\xf7\x59\x02\x79\xc2\xc4\x52\xba\xf5\xd1\x76\xda\x7c\x80\xe4\x2e\x11\x28\xef\xbe\xe6\x5d\xe7\xac\x3b\x33\x81\x6a\x59\x60\x0e\x5a\x19\xe5\x6c\x8e\x4a\xd7\x4f\x58\x35\xa3\x47\x1e\xe3\x1c\x32\x2e\x09\xbb\x80\x70\x1e\x28\xd0\x62\x87\xc5\x3a\x45\x9b\xe6\x9c\x84\x37\xa5\xa9\x5c\xa0\xc6\x04\x62\xc1\x75\x51\xe8\x74\xaa\x57\xec\x97\xde\xb9\x98\xe7\xc0\x38\xcc\xb6\x1a\x95\xb7\x31\x33\x60\xd7\xf5\xf2\x75\x36\x33\x0b\x3a\x00\xe8\x0c\xd3\x13\xe8\x32\x67\x29\x96\x7b\xde\xa9\x8c\x69\xf1\xb0\x64\x8f\x37\xd5\x85\x8b\x7f\x1e\xc2\x01\x7a\x49\x35\x30\x65\xe7\x6e\xe0\x67\xdc\x3e\xfb\xce\x3c\x54\xdf\x41\xc2\xa4\x2d\xa6\xb7\x9d\xeb\xe1\x71\xbb\xff\x4a\xf1\xf5\x0c\x80\xdd\xd7\xe3\xac\x9f\x9c\x55\x62\xda\x78\x87\xcf\x4c\x2f\x73\x68\xe2\xb5\x94\xc8\x35\xb4\xbd\x6e\xef\x43\xc9\xa7\xd6\xb7\x79\x75\x73\x08\x46\x1d\x55\x53\x27\x88\x7f\xd4\x39\x21\x0d\x88\x87\xfe\x5b\x96\x18\xcd\x62\x21\xd8\x58\x9f\x7b\x23\x1f\x00\x94\x57\xc3\x27\x04\xe3\xda\xbf\xf1\x39\x71\xeb\x36\xce\x14\xe0\xaf\x7b\xde\xee\x0c\x00\x16\xc8\x51\xb2\xf8\x37\x7c\x33\x93\x7b\xe0\x5e\xce\xe4\x8d\x3f\xa2\xf6\x9b\x47\x6d\xb9\x0c\xae\xff\xdb\x07\x6d\x85\x8a\xcf\x5f\x7c\x17\x3b\xca\xde\xd7\x44\x07\xdf\x0b\x35\x39\xd8\x78\xb7\xaf\x82\x87\x2b\x29\x36\x2c\x29\xd7\x2f\x02\x52\x39\xe0\x57\xef\x9a\x8a\x3a\x5c\x55\xf4\x57\x46\xfc\x66\x37\xa8\xb1\x44\x7b\x40\x7d\xdf\xf2\x26\xe7\xc1\x73\xf0\x2a\x5f\xb4\xf2\x5b\x80\xe6\x5b\x1d\xd7\xdf\x84\xed\x60\x62\x36\x0e\xa1\xed\x67\xcc\xc6\x17\x1b\x04\xce\x7c\x11\x92\x6e\xaf\xe0\x33\x82\xe0\xe9\x36\xff\x3e\xc9\xd6\xea\x82\x7b\x37\xfd\x02\xee\x08\xba\x67\x08\xad\x7c\xd5\x4f\xbe\x65\xa8\xbd\x1b\x2f\x96\xb3\x49\xba\x53\x4d\x35\x55\xd6\x2f\xd3\x9f\x67\x8d\xc3\x5b\x37\xb2\x93\x0e\x95\x1a\x72\x87\x78\x6d\xef\xb2\x49\xa6\x1d\x3a\xf8\xf2\x34\x18\x0c\x6a\x19\x27\x4c\x27\x11\x90\x0c\xdd\x67\xa4\x61\xc8\x93\x41\x35\xa0\xcb\xcf\x55\x1b\x5f\x20\xba\xc1\xb5\x1c\xd7\xb5\x04\x24\x7c\x37\x58\xad\x02\x02\xc8\x2b\x70\x77\xbd\x55\x23\xb5\x37\x63\x47\x69\x6b\x7f\xa5\x44\xfe\x17\x00\x00\xff\xff\x2c\x80\x3d\x6a\x4b\x2c\x00\x00")

func ResourcesComponentDescriptorV2SchemaYamlBytes() ([]byte, error) {
	return bindataRead(
		_ResourcesComponentDescriptorV2SchemaYaml,
		"../../../../../../../resources/component-descriptor-v2-schema.yaml",
	)
}

func ResourcesComponentDescriptorV2SchemaYaml() (*asset, error) {
	bytes, err := ResourcesComponentDescriptorV2SchemaYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../../../../../../../resources/component-descriptor-v2-schema.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"../../../../../../../resources/component-descriptor-v2-schema.yaml": ResourcesComponentDescriptorV2SchemaYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//
//	data/
//	  foo.txt
//	  img/
//	    a.png
//	    b.png
//
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"..": {nil, map[string]*bintree{
		"..": {nil, map[string]*bintree{
			"..": {nil, map[string]*bintree{
				"..": {nil, map[string]*bintree{
					"..": {nil, map[string]*bintree{
						"..": {nil, map[string]*bintree{
							"..": {nil, map[string]*bintree{
								"resources": {nil, map[string]*bintree{
									"component-descriptor-v2-schema.yaml": {ResourcesComponentDescriptorV2SchemaYaml, map[string]*bintree{}},
								}},
							}},
						}},
					}},
				}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
