// Code generated by go-bindata. (@generated) DO NOT EDIT.

// Package jsonscheme generated by go-bindata.
// sources:
// ../../../../../../../resources/component-descriptor-v2-schema.yaml
package jsonscheme

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _ResourcesComponentDescriptorV2SchemaYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x1a\xdb\x6e\xe3\xb8\xf5\xdd\x5f\x71\xb0\x09\x20\x67\x12\xd9\x19\xb7\x53\x60\xfc\x12\xa4\xb3\x68\x31\x68\xbb\x29\x32\xdb\x3e\x34\x71\x17\xb4\x74\x6c\x33\xa5\x48\x97\xa4\x9c\x68\x67\xe7\xdf\x0b\x92\xa2\x6e\x96\x64\x3b\x4e\x66\xdb\x62\xf2\x12\x91\x3a\xf7\x3b\x29\x9f\xd2\x78\x0a\xc1\x4a\xeb\xb5\x9a\x8e\xc7\x4b\x22\x63\xe4\x28\x47\x11\x13\x69\x3c\x56\xd1\x0a\x13\xa2\xc6\x91\x48\xd6\x82\x23\xd7\x61\x8c\x2a\x92\x74\xad\x85\x0c\x37\x93\x60\x70\xea\x20\x2a\x14\x1e\x94\xe0\xa1\xdb\x1d\x09\xb9\x1c\xc7\x92\x2c\xf4\x78\x72\x39\xb9\x0c\xdf\x4e\x72\x82\xc1\xc0\x93\xa1\x82\x4f\x21\xf8\x63\xce\x15\x3e\x78\x3e\xf0\x7d\xc1\x07\x36\x13\x28\xd1\x16\x94\x53\x83\xa5\xa6\x03\x80\x04\x35\x31\xff\x01\x74\xb6\xc6\x29\x04\x62\xfe\x80\x91\x0e\xec\x56\x9d\x45\xa1\x01\x94\x1a\x58\xfc\x98\x68\xe2\x10\x24\xfe\x3b\xa5\x12\x63\x47\x11\x20\x84\xc0\xf1\xfd\x3b\x4a\x45\x05\x77\x50\x6b\x29\xd6\x28\x35\x45\xe5\xe1\x6a\x40\x7e\xb3\x10\x49\x69\x49\xf9\x32\x18\x0c\x00\x18\x99\x23\xeb\x94\xb7\x85\x3d\x27\x09\x06\xe5\x72\x43\x58\x8a\x96\x52\xa1\xcd\x0f\x24\xc1\x1a\x45\xcf\xce\x6c\x25\xe4\xe9\xcf\xc8\x97\x7a\x35\x85\xc9\xbb\x77\x4e\x7a\xa2\x35\x4a\x63\x90\x7f\xde\x91\xf0\xe7\xcb\xf0\xfd\xe8\x3e\x9c\x9d\xdf\x8d\x66\x66\x39\xfb\x3c\xb9\xf8\xed\x97\xf1\x5d\xe8\x5e\x8d\x7f\x1a\xcd\xde\x9c\x5a\x86\x34\x46\xae\xa9\xce\xae\xb5\x96\x74\x9e\x6a\xfc\x13\x66\x8e\x6f\x42\x79\xc1\xa4\x83\xc5\x6c\x78\x17\xfe\x74\x9e\x3f\xbf\xf1\x9b\x67\x57\x8e\xb4\x44\x46\x9e\x30\xfe\x84\xc9\x06\xa5\xa3\x79\x02\x9a\xfc\x0b\x39\x2c\xa4\x48\x40\xd9\x17\x26\x96\x80\xf0\x18\x48\xfc\x90\x2a\x8d\x31\x68\x01\x84\x31\xf1\x08\x84\x83\xb0\x6e\x26\x0c\x18\x92\x98\xf2\x25\x04\x9b\xe0\x02\x12\xf2\x20\x64\x28\x38\xcb\x2e\x2c\xaa\x5d\x8f\x12\xca\xf3\x5d\xcf\x6b\x45\x15\x24\x48\xb8\x02\xbd\x42\x58\x08\x43\xd5\x10\x71\xb6\x54\x40\x24\x1a\x56\xb0\x21\x8c\xc6\x75\x79\x95\x17\xf8\xed\x68\x32\xfa\x4d\xf5\x39\x5c\x08\x71\x3e\x27\x32\xdf\xdb\x54\x01\x36\x6d\x10\x6f\x47\x13\xff\x54\x80\x55\xe0\x8b\xc7\x1a\x5a\xd5\xd8\x9b\xd9\xd5\xf0\xf2\x97\xbb\xb7\xe1\xfb\xd9\x7d\xfc\xe6\x6c\x78\x35\xbd\x1f\x55\x37\xce\xae\xda\xb7\xc2\xe1\xf0\x6a\x5a\x6e\xfe\x72\x1f\x5b\x1f\x5d\x87\xff\x08\x67\x77\x97\xe1\x7b\xff\xec\x49\xee\x09\x7c\xe6\x39\x9e\x0f\xab\x2f\xce\x2d\x91\xda\x8e\x85\x3c\x0d\xda\xc2\xb8\x2d\xf4\x3a\x33\x28\x4f\xcd\xcc\x24\x85\x9a\xc2\x67\x38\x95\xb8\x98\x42\x70\x32\xae\xd4\x8d\x71\x5b\x28\x07\xf0\xc5\x85\xe2\x5a\x28\xaa\x85\xcc\x3e\x08\xae\xf1\x49\x1f\x92\xac\x06\xaa\xab\x44\x58\x0a\x3d\x95\x41\x44\xf4\xb6\x9d\x37\x61\xec\x66\x51\x72\x69\xd5\x68\x4b\xec\xb2\x66\x34\xe5\xcc\x65\x9d\x13\x85\x7f\x93\x2c\x28\x76\xb7\x45\x36\x7f\x39\x58\x75\xab\xb5\xd0\xb8\xbf\x5a\x51\xfa\x0b\x59\xaf\x29\x5f\xee\x89\x0a\x80\x3c\x4d\xa6\x70\x17\xa4\x92\xfd\x95\xe8\x55\x70\x01\x81\x5a\x91\xc9\xbb\xdf\x85\x31\x5d\xa2\xd2\xc1\x6c\xd0\xa0\x73\x28\x65\x6b\xe3\x25\x55\x5a\x66\x86\xfa\xcd\x87\x8f\xc5\x72\x66\x7c\x40\xa2\x08\x95\xda\xb3\x9d\x18\xcb\x58\x28\x58\x08\x99\xa3\xa2\x82\xa1\x59\xe1\x93\x46\x6e\x7a\x81\x3a\xdb\x11\x2c\x03\x80\x25\xd5\xab\x74\x7e\xdd\xcf\xbb\x37\xda\xec\xd2\x84\x40\xc5\xa1\x76\x67\xf1\xac\x68\x6c\x9a\xcd\x09\x58\x98\x3f\x67\xb4\x03\xdd\x44\x69\x3f\x44\x24\x92\x84\xea\xbe\x9c\xe0\x82\xe3\x31\x76\x39\x52\xef\x1f\x04\x47\x17\x18\x4a\xa4\x32\xc2\xef\x8b\x84\x3b\x40\x1c\xd3\xc0\x8b\xc5\xc6\x4d\x08\xc5\xda\x50\x28\x16\x2e\x84\x3a\x04\xe7\x45\x97\xef\x11\x7c\xff\x62\x97\xa3\xe0\x93\x96\xe4\x63\x0e\x30\x3d\x90\x8e\x27\xb2\x69\x8e\x3d\x1d\x15\xaa\xd2\x33\x83\x67\x86\x61\x11\x83\x76\x8e\x52\x5b\xa8\x44\x4a\x92\x95\x98\x54\x63\x52\xab\x66\xad\x92\x59\x5a\x1e\xa9\x5a\x02\xec\x9a\x67\x37\x8b\x7a\xe9\x6c\x25\xe2\xf0\x82\xdd\x80\xd5\x6c\xdf\x03\xdc\xcc\xd4\x1e\x78\x00\xe0\x2a\xe1\xa7\x35\x46\x07\x84\xe0\x8a\xa8\xd5\x35\x5b\x0a\x49\xf5\x2a\x29\x03\x53\xc8\x84\x30\xaa\x88\x61\xb4\xfd\xda\x4e\x9a\x1d\xc1\x58\x23\xd8\x74\x82\x73\x9f\x0f\xdb\x56\x26\xbd\x28\x96\x71\x07\x84\x49\x45\xba\xe4\x44\xa7\x12\x0f\x34\x02\xe9\xd1\xd0\xac\x12\x8c\x29\xf9\xd1\xe7\xe3\xb6\xce\xe4\x68\xe1\xdd\x56\xc1\xa7\x84\xaa\xf7\x95\x1f\x57\xe8\x80\x5c\x73\x11\x0b\x3b\x92\x16\x6a\x43\x7e\x04\xd8\x69\x9f\xe7\xd6\x28\x17\x62\xc5\xb2\xa0\x77\x40\x61\xaa\x29\xec\xe8\xed\xa8\x0e\x65\x5c\x7b\xcd\x1a\x7a\x74\x62\xd6\xe2\xc1\xe6\x88\x92\xd1\xad\x6f\x3e\x3b\xbb\x38\x31\x8d\x0a\x25\xf2\x08\xed\x71\x02\x86\xe5\x41\x97\x89\x88\xb0\xb3\xbc\xf8\x77\x75\x14\x5f\x16\x3f\x21\xc3\x48\x0b\xf9\xdc\x2a\xfa\x0a\x15\xad\x7a\x4a\xbc\xf5\x5a\x3e\xd7\x2e\x05\xa5\x7d\x8f\xaa\xb5\x59\xb0\x7a\x84\xed\x3f\x4a\xb7\x9c\x6b\x3b\xf5\x6c\x65\xd1\xd7\x29\xe1\x04\x48\xa4\x53\xc2\x58\x36\x2d\x39\x85\x36\xd1\x1e\xc7\xa0\xd6\x18\x51\xc2\x40\xa2\x81\x8f\x2c\x93\xff\xdd\xe6\xfa\x6a\x3d\xb2\x99\xd1\x82\x63\xb3\x47\xe6\xbc\x78\xca\xd8\x1e\x4d\xae\x9a\xfd\xf6\x0c\xe6\x52\xae\xac\x92\x07\x0e\xe3\x9e\x80\xda\xfb\x5a\x25\x8f\x49\x38\xb1\xf8\x36\xf1\x4b\x2a\x17\xf9\xfd\x40\xaa\x34\x24\x44\x47\xab\x4a\x32\xa8\xad\x99\x6e\x7b\x2e\x67\xb6\xfb\x55\xb6\xaa\xc3\xc2\xb7\x51\xaf\xd0\xca\x15\xee\x17\x8a\x58\x47\xac\x3c\x8d\x38\x27\xec\x3d\x6c\xda\x10\x30\x87\x44\x73\x94\x93\x9c\xb0\xff\x83\xd1\x53\x44\xf4\xf7\x4c\xec\x3f\x7b\x5a\x1b\xfc\x81\x32\x54\x99\xd2\x98\x1c\x8e\x7b\xd3\xc6\xf0\xb5\xab\x87\x88\xe8\xc7\x84\x2c\x8f\x3a\x38\xda\x25\x35\x54\x8a\xbe\xf9\x22\x27\xca\xea\x05\x84\x8f\xa7\x3a\x9b\x1d\x57\x44\xa5\x39\x8f\x50\x8c\x91\xcc\xe7\xe5\x71\xfa\x40\x90\x8b\x14\x40\x79\x39\xb0\xe8\x1a\x6c\xaf\x8d\x02\xf5\xb1\xc2\x4c\xb6\x09\xe1\x74\x81\x4a\x37\x47\xda\x06\xd3\x67\xce\xcd\xce\x32\xae\x80\xbb\x44\x71\x12\x28\xd0\x62\x07\xc7\x66\xa0\x6e\xb3\x73\x10\x9e\x95\x26\x72\x89\x1a\x63\x88\x04\xd7\xc5\xa0\xd4\x49\x5e\xd1\x9f\x7b\x75\x31\xef\x81\x72\x98\x67\x1a\x95\xe7\x31\x37\xc6\x6e\xd2\xe5\x69\x32\x37\x0e\x1d\x00\x74\xa6\xec\x11\xe1\xb2\xa0\x0c\xcb\x7e\x79\x6c\xc4\xb4\x48\x58\x46\x8f\x67\xd5\x65\x17\xff\xbe\x6a\x0e\xd0\x2b\xa2\x81\x2a\xab\xbb\x31\x3f\xe5\xf6\xdd\x77\xe6\xa5\xfa\x0e\x62\x2a\xed\x60\x9e\x75\xfa\xc3\xdb\xed\xe6\x85\xf2\xeb\x15\x0c\x76\xd3\xcc\xb3\xfe\xe0\xac\x07\xa6\xcd\x77\x78\xa4\x7a\x95\x9b\x26\x4a\xa5\x44\xae\xa1\xed\x8b\x58\x9f\x95\x7c\x69\xbd\xcd\x27\xa3\x63\x3e\x64\x55\x4f\x01\x6d\x46\xfc\x36\x23\xed\xee\x25\xd6\x19\x5f\x7f\x30\xe9\x1a\x2e\x2a\x6d\xf7\xeb\x34\xfb\x01\x40\x79\x3f\x76\x44\xc2\xa6\xfe\xda\xfc\xc8\xf6\x6e\x84\x29\xdc\x91\xf6\x5c\x91\x0f\x00\x96\xc8\x51\xd2\xe8\x57\xbc\xde\xce\x25\x70\x37\xdc\xf9\xe2\x5b\x66\xff\x17\x64\x76\xe9\x18\xb7\xff\xeb\x26\x76\x2d\x50\xbf\xd6\x10\x5f\x74\xa6\xbd\xaf\xab\x0e\xbe\x9f\xda\x8e\xd3\xad\x8f\xa8\xaa\xf2\x72\x2d\xc5\x86\xc6\xa5\x47\x43\x08\x6a\x97\x0c\xf5\x3b\xaf\x62\x9e\x57\x35\xfa\x35\x8c\x5d\xb1\xbf\xff\x95\xd7\x11\x81\xb9\xad\xf3\xc1\x71\xb6\x75\x4e\xed\x3b\x80\x6e\x7d\xe3\x0e\xe0\xc4\xcf\x23\x2c\xbb\x80\x47\x04\xc1\x59\x96\xff\xae\xc3\x8e\xed\x82\xfb\xcb\x69\xef\x83\x1d\x99\xf4\x6a\xf9\x92\xbb\xef\x85\x2e\x28\x1a\xdf\x14\x3d\x7e\x4b\x0c\xbd\x0c\xc3\x6d\xc2\x65\x10\x3c\x57\xb3\xfd\x7d\x5f\xbd\xd4\x0b\xf6\x0c\x96\xda\xb0\xb9\x17\x52\xa3\x8d\xd9\x5a\xd2\x6e\x52\xf8\xfc\x65\x30\x18\x34\x0a\x4b\xb5\x6a\x84\x10\x24\xe8\x7e\x18\x56\xcd\xec\x60\x50\xcf\xdb\xf2\x07\x68\xad\x02\x79\x12\x8d\x82\xd6\xef\xa0\xa0\xfa\x1d\xa7\x3e\x1c\x54\x1c\x52\x73\x46\xff\xb7\x91\xe0\x3f\x01\x00\x00\xff\xff\xde\x1c\x66\x61\xe3\x27\x00\x00")

func ResourcesComponentDescriptorV2SchemaYamlBytes() ([]byte, error) {
	return bindataRead(
		_ResourcesComponentDescriptorV2SchemaYaml,
		"../../../../../../../resources/component-descriptor-v2-schema.yaml",
	)
}

func ResourcesComponentDescriptorV2SchemaYaml() (*asset, error) {
	bytes, err := ResourcesComponentDescriptorV2SchemaYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../../../../../../../resources/component-descriptor-v2-schema.yaml", size: 10211, mode: os.FileMode(420), modTime: time.Unix(1659335952, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"../../../../../../../resources/component-descriptor-v2-schema.yaml": ResourcesComponentDescriptorV2SchemaYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("nonexistent") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"..": &bintree{nil, map[string]*bintree{
		"..": &bintree{nil, map[string]*bintree{
			"..": &bintree{nil, map[string]*bintree{
				"..": &bintree{nil, map[string]*bintree{
					"..": &bintree{nil, map[string]*bintree{
						"..": &bintree{nil, map[string]*bintree{
							"..": &bintree{nil, map[string]*bintree{
								"resources": &bintree{nil, map[string]*bintree{
									"component-descriptor-v2-schema.yaml": &bintree{ResourcesComponentDescriptorV2SchemaYaml, map[string]*bintree{}},
								}},
							}},
						}},
					}},
				}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
