// Code generated by go-bindata. (@generated) DO NOT EDIT.

// Package jsonscheme generated by go-bindata.
// sources:
// ../../../../../../../../resources/component-descriptor-ocm-v3-schema.yaml
package jsonscheme

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _ResourcesComponentDescriptorOcmV3SchemaYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x1a\xdb\x6e\xdc\xb8\xf5\x5d\x5f\x71\xb0\x0e\xa0\x71\x6c\xcd\xc4\x0e\x52\x60\xe7\xc5\x70\xb3\x28\x10\xb4\xbb\x5e\x24\xdb\x3e\xd4\x99\x06\x1c\xe9\x68\x86\x59\x8a\x9c\x92\xd4\xd8\x4a\x36\xff\x5e\x90\x14\x75\x1b\x69\xae\x4e\xda\x62\xd7\x2f\x1e\x52\xe7\xc6\xc3\x73\x97\x9e\xd1\x64\x0a\xe1\x52\xeb\x95\x9a\x4e\x26\x0b\x22\x13\xe4\x28\xc7\x31\x13\x79\x32\x51\xf1\x12\x33\xa2\x26\xb1\xc8\x56\x82\x23\xd7\x51\x82\x2a\x96\x74\xa5\x85\x8c\x44\x9c\x45\xeb\x97\x84\xad\x96\xe4\x2a\x0c\x9e\x39\xd8\x06\xad\x8f\x4a\xf0\xc8\xed\x8e\x85\x5c\x4c\x12\x49\x52\x3d\xb9\x7e\x71\xfd\x22\xba\xba\x2e\x49\x87\x81\x27\x48\x05\x9f\x42\x78\xf7\xfa\x47\x78\xed\x99\xc1\x0f\x15\x33\x58\xbf\x84\x1a\x23\xa5\x9c\x1a\x04\x35\x0d\x00\x32\xd4\xc4\xfc\x07\xd0\xc5\x0a\xa7\x10\x8a\xf9\x47\x8c\x75\x68\xb7\xda\xd4\xab\x63\xc0\x1a\xa5\xa2\x82\x5b\xe4\x84\x68\xe2\xa0\x25\xfe\x3b\xa7\x12\x13\x47\x0e\x20\x82\x90\x93\x0c\xc3\x7a\x59\xe2\xb9\x1d\x92\x24\x56\x0c\xc2\x7e\x96\x62\x85\x52\x53\x54\x53\x48\x09\x53\x68\x9f\xaf\xea\xdd\x92\x82\xa1\xe6\x7f\x03\x3c\x93\x98\x4e\x21\x3c\x9b\x34\x4e\x54\xab\xfa\xa7\x06\xe7\x92\xed\x0e\x54\x89\x8c\x3c\x62\xf2\x0e\xb3\x35\x4a\x8f\xca\xc8\x1c\x99\xda\x81\xe9\x80\x3c\xca\x4a\x8a\x35\x4d\x50\xee\x40\xf2\x60\x61\x10\xb4\xd9\x94\xf7\x40\xa4\x24\x85\xa3\x49\x35\x66\x95\x0c\xc3\x12\x84\x9e\xd0\xe0\x7d\xee\x71\x43\x84\xe5\xe5\x7a\x97\xfe\x1d\x7d\xa5\x25\xe5\x0b\xaf\x68\x83\x3d\x85\xcf\x5f\x86\x14\xbf\x22\x5a\xa3\x34\xc6\xf4\xaf\xf5\xfd\x8b\xe8\xfb\xd9\xc5\x33\xcf\x5c\xd1\x05\x27\x3a\x97\x1b\x1c\xc2\xb9\x10\x0c\xc9\x1e\x56\x13\x00\xb4\xee\xbf\xa5\x07\x27\xa8\x23\x92\x91\xc7\xbf\x21\x5f\xe8\xe5\x14\xae\x5f\xbd\x0a\x3a\x92\xdd\x93\xe8\xd3\xec\x3e\x22\xd1\x27\x23\xe1\xf3\xd1\xfd\x78\xd6\xd9\x3a\x7f\xee\xf7\x3e\x5f\x5f\x7e\x19\x4d\x5a\x8f\x3f\xf4\xa0\x7c\x30\x38\xe7\xe6\xb0\x01\x00\x4d\x90\x6b\xaa\x8b\x5b\xad\x25\x9d\xe7\x1a\xff\x8a\x85\x13\x35\xa3\xbc\x92\xab\x4f\x2a\xc3\x7c\x74\x1f\x7d\xb8\xf0\x82\xf8\xcd\xf3\x1b\x47\xba\x65\xc3\x8e\xe6\x19\x68\xf2\x2b\x72\x48\xa5\xc8\x40\xd9\x07\x26\x9e\x00\xe1\x09\x90\xe4\x63\xae\x34\x26\xa0\x05\x10\xc6\xc4\x03\x10\x0e\x62\xe5\xf4\x0b\x0c\x49\x42\xf9\x02\xc2\x75\x78\x09\x19\xf9\x68\x82\x16\x67\xc5\xa5\x45\xb5\xeb\x71\x46\x79\xb9\xeb\x79\x2d\xa9\x82\x0c\x09\x57\xa0\x97\x08\xa9\x30\x54\x0d\x11\xa7\x7e\x05\x44\xa2\x61\x65\x4c\x85\x26\x6d\x79\x95\x17\xf8\x6a\x7c\x3d\x7e\xd9\xfc\x1d\xa5\x42\x5c\xcc\x89\x2c\xf7\xd6\x4d\x80\x75\x1f\xc4\xd5\xf8\xda\xff\xaa\xc0\x1a\xf0\xd5\xcf\x16\x5a\x53\xd9\xeb\xd9\xcd\xe8\xc5\x6f\xf7\x57\xd1\xf7\xb3\xf7\xc9\xf3\xf3\xd1\xcd\xf4\xfd\xb8\xb9\x71\x7e\xd3\xbf\x15\x8d\x46\x37\xd3\x7a\xf3\xb7\xf7\x89\xbd\xa3\xdb\xe8\x9f\xd1\xcc\x18\xbc\xff\xed\x49\xee\x09\x7c\xee\x39\x5e\x8c\x9a\x0f\x2e\x2c\x91\xd6\x8e\x85\x2c\x9d\xaa\x63\xf9\x7d\xa6\x37\x18\x2a\x4a\xef\x2f\x8c\x1f\xa9\x29\x7c\xee\x8f\x3b\x7d\xa6\x1c\xc2\x17\x67\x8a\x2b\xa1\xa8\x16\xb2\x78\x2d\xb8\xc6\x47\x7d\x48\x54\x32\x50\x43\x51\xc8\x52\xe8\xc6\x88\xc6\x19\x45\x4c\xdf\xf6\xf3\x26\x8c\xdd\xa5\x35\x97\x81\x2c\xd0\x41\xad\x83\x63\x57\xce\x52\xd6\x39\x51\xf8\x77\xc9\xc2\x3a\xc8\x6d\x88\x6c\xfe\x4a\xb0\xe6\x56\x6f\x6c\x72\x7f\xad\x38\xf6\x23\x59\xad\x28\x5f\xec\x89\x0a\x80\x3c\xcf\xa6\x70\x1f\xe6\x92\xfd\x4c\xf4\x32\xbc\x84\x50\x2d\xc9\xf5\xab\x3f\x45\x09\x5d\xa0\xd2\xe1\x2c\xe8\xd0\x39\x94\xb2\xd5\xf1\x82\x2a\x2d\x0b\x43\xfd\xee\xf5\x9b\x6a\x39\x33\x77\x40\xe2\x18\x95\xda\xb3\xae\x30\x9a\xb1\x50\x90\x0a\x59\xa2\xa2\x82\x91\x59\xe1\xa3\x46\x6e\x72\x88\x3a\xdf\x61\x2c\x01\xc0\x82\xea\x65\x3e\xbf\xdd\xce\x7b\xab\xb5\xd9\xa5\x31\x81\xc6\x85\xda\x9d\xf4\x28\x6b\xec\xaa\xcd\x09\x58\xa9\xbf\x64\xb4\x03\xdd\x58\xe9\x76\x88\x58\x64\x19\xd5\xdb\x7c\x82\x0b\x8e\xa7\xe8\xe5\xc4\x73\xff\x24\x38\x3a\xc3\x50\x22\x97\x31\xfe\x50\x39\xdc\x01\xe2\x98\xea\xa3\x5a\x94\x95\x45\xb5\x36\x14\xaa\x85\x33\xa1\x03\x8a\x98\x0d\xc1\xf7\x0f\x76\x25\x0a\x3e\x6a\x49\xde\x94\x00\x3b\x2a\xbf\x0d\x3a\x4f\x50\xa7\x1e\x6a\x86\x95\x0d\x1e\x51\xe0\x36\x9d\xdb\xae\x79\x71\x97\xb6\x83\x62\x2f\x15\x87\x17\xee\x06\x6c\xfa\xf1\x1e\xe0\xa6\x63\xf2\xc0\x01\x80\x8b\x71\xef\x56\x18\x1f\x60\x5c\x4b\xa2\x96\xb7\x6c\x21\x24\xd5\xcb\xac\x36\x39\x21\x33\xc2\xa8\x22\x86\xd1\xe6\x63\x5b\xee\x1e\xd9\xcb\xb4\x18\x6e\x2d\xaa\xfb\x85\xd8\xa3\x0e\xef\x87\x08\x1a\xa5\xf6\x81\x4a\x22\x5b\x34\x60\x56\x19\x26\x94\xfc\xe2\x3d\xf1\x70\x9d\x90\x93\x0f\xe7\xb6\x2a\x39\x6a\xa8\x76\xc6\xf9\x65\x89\x0e\xc8\xa5\x1d\x91\xda\x62\xb5\x52\x0b\x34\xba\xa0\xad\xfa\x3b\x36\x7a\x39\x13\xad\x96\x15\xbd\x23\xf5\xb6\xb3\x2f\x73\xfc\x76\x38\x79\xed\x37\x5b\x5a\xb2\x5e\xcc\x96\x3d\x59\x1f\x54\x32\x7e\xeb\xd3\xd6\xce\xfc\x4f\x4c\x8a\x43\x89\x3c\x46\xdb\x88\xc0\xa8\x1e\x98\x30\x11\x13\x76\x5e\xa6\x8d\xa1\x5c\xe4\x03\xea\x3b\x64\x18\x6b\xb1\xab\xf3\x1e\x8c\xbf\x07\xc5\x42\x5b\xe2\x96\x62\x1f\x7b\xd0\xea\x9c\xfb\xb6\xe7\xbd\xe3\x8d\xd3\x07\x2b\x3d\x5d\xf3\xe0\xf9\x7b\x45\xd8\x96\x54\xe1\x0c\x48\xac\x73\xc2\x58\x31\xad\x39\x45\xd6\xf3\x1e\x26\xa0\x56\x18\x53\xc2\x40\xa2\x81\x8f\x2d\x93\xff\xdf\x3c\x7c\x44\x3a\xed\x3a\xa7\xe0\xd8\x4d\xa7\xa5\x42\x79\xce\xd8\x1e\xf9\xb0\xe9\xc8\xd6\x4a\x9d\xf7\xd4\x01\xf1\xc0\x8a\xdc\x13\x50\x87\x8e\xf9\xe0\xcc\xe2\x5b\x1f\xae\xa9\x5c\x96\x43\x82\x5c\x69\xc8\x88\x8e\x97\x0d\x37\x50\x1b\x85\xdd\x66\x71\xce\x6c\x22\x6c\x6c\x35\xeb\x8a\x3f\xea\xbd\xea\x54\x2e\x06\xab\x0d\xa8\xc6\x60\x11\xba\xc3\xc5\x41\x21\x1c\xb1\xba\x25\x71\x97\xb0\x77\xc5\x69\x4d\xc0\x74\x8a\xa6\x9f\x93\x9c\xb0\xff\xe9\xfa\x53\xc4\xf4\xcf\x4c\xec\x5f\x80\xda\xd3\xfd\x85\x32\x54\x85\xd2\x98\x1d\x8e\x7b\xd7\xc7\xf0\x6b\xc7\x05\x11\xd3\x37\x19\x59\x9c\xd4\x17\xda\x25\x35\x54\xde\xfa\xcc\xf6\x24\x0d\x63\x73\xbe\xe0\x2d\xa5\xcd\x66\xc7\x04\xa8\x56\xe7\x09\x07\x63\xa4\xf0\x1e\x77\xda\x79\x20\x2c\x45\x0a\xa1\xee\xfd\xd3\xa1\xea\xf4\xd6\x1c\xa0\x5d\x2a\x98\xf2\x34\x23\x9c\xa6\xa8\x74\xb7\x2e\xed\x30\x3d\xb2\xf8\x75\x9a\x71\xa1\xd9\x39\x8a\x93\x40\x81\x16\x3b\x38\x76\x0d\x75\x93\x9d\x83\xf0\xac\x34\x91\x0b\xd4\x98\x40\x2c\xb8\xae\x8a\x9f\x41\xf2\x8a\x7e\xda\x7a\x16\xf3\x1c\x28\x87\x79\xa1\x51\x79\x1e\x73\xa3\xec\x2e\x5d\x9e\x67\x73\xff\xc2\x65\xc8\x65\x4f\x30\x97\x94\x32\xac\x33\xe1\xa9\x16\xd3\x23\x61\x6d\x3d\x9e\xd5\x90\x5e\xfc\xf3\xa6\x3a\x40\x2f\x89\x06\xaa\xec\xd9\x8d\xfa\x29\xb7\xcf\xbe\x33\x0f\xd5\x77\x90\x50\x69\xab\xe7\x62\xf0\x3e\xbc\xde\xee\x9e\xc8\xbf\xbe\x82\xc2\xee\xba\x7e\xb6\xdd\x38\xdb\x86\x69\xfd\x1d\x1e\xa8\x5e\x96\xaa\x89\x73\x29\x91\xeb\xba\x40\x81\xfa\x05\xee\x36\x2d\xf9\xd0\xfa\xb6\xac\x79\x4e\x79\x21\xd7\xac\xec\xfb\x94\xf8\x47\xf5\xb3\x3b\x97\xd8\xcb\x78\xca\x92\x63\xa8\x6c\x68\x24\xd4\x6f\x93\xc6\x03\x80\x7a\xfc\x75\x82\x2b\xe6\x7e\xde\x7d\x62\xe2\x36\xc2\x54\x8a\xce\xb7\xcc\xb6\x03\x80\x05\x72\x94\x34\xfe\x2f\xce\xa5\x4b\x09\xdc\x68\xba\x5c\x7c\x6b\x9f\x7d\x9a\x71\xcf\xef\xcc\xa7\xeb\x8b\x73\xfb\x5f\xcb\xa5\x5b\x26\xfa\xad\x0a\xf3\xf6\x07\x24\x87\x5a\xe0\x57\xb1\xa7\x43\x27\x63\x6a\xdb\x60\xb9\x9d\x82\xed\xfc\x27\xa5\xb1\x6d\x28\x7d\x26\x2e\x2b\x43\xb3\x6c\x4c\xc9\xbc\x79\xe9\x63\x4f\x5a\x4e\x20\x9e\xa8\x25\xee\xbc\xca\x6a\xbc\xaf\x73\x85\xfb\x13\xf1\x91\xed\xce\xaa\x1e\xe8\x1c\x4e\x7f\xa3\x53\xde\xf2\x1a\xbc\x1e\x1a\x85\xfb\x20\x74\x4b\x9e\xbd\x90\x3a\x21\x37\x0c\x82\x8e\xb9\x34\x2d\xdd\xc4\xcd\x15\xfd\x47\x1d\x5b\x23\x08\x7f\xa5\x3c\x29\x7f\x36\xbf\x45\x8b\x9c\x59\x85\x41\xdb\x04\x6a\xf4\x96\x6d\x36\x4d\xbd\xd1\xb0\x65\xe3\xce\xe7\x7c\xd5\xd7\x7a\x97\xee\xb1\x12\xa9\x7e\x20\x12\xeb\x07\xb6\xea\x34\x32\x0d\xd2\x8f\x05\x57\x7a\x0a\x61\xf5\x95\x5e\xe3\x3c\xfe\x04\x0e\xb9\x57\x61\x06\x24\xec\xfb\xb8\x62\xbf\x6f\xc7\x3a\xf7\x3f\x7c\x95\x1b\x1f\x50\x84\x70\xe6\xab\x61\x56\x5c\xc2\x03\x82\xe0\xac\x28\x3f\x1a\xb2\x4d\xa3\xe0\xd8\x72\xfc\x7e\x9f\x29\xdf\x2e\x54\x6f\x0c\x4e\xf8\xe6\xad\xa2\x11\xfe\x27\x00\x00\xff\xff\xb4\x92\x45\xb3\x85\x29\x00\x00")

func ResourcesComponentDescriptorOcmV3SchemaYamlBytes() ([]byte, error) {
	return bindataRead(
		_ResourcesComponentDescriptorOcmV3SchemaYaml,
		"../../../../../../../../resources/component-descriptor-ocm-v3-schema.yaml",
	)
}

func ResourcesComponentDescriptorOcmV3SchemaYaml() (*asset, error) {
	bytes, err := ResourcesComponentDescriptorOcmV3SchemaYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../../../../../../../../resources/component-descriptor-ocm-v3-schema.yaml", size: 10629, mode: os.FileMode(436), modTime: time.Unix(1665846116, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"../../../../../../../../resources/component-descriptor-ocm-v3-schema.yaml": ResourcesComponentDescriptorOcmV3SchemaYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("nonexistent") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"..": &bintree{nil, map[string]*bintree{
		"..": &bintree{nil, map[string]*bintree{
			"..": &bintree{nil, map[string]*bintree{
				"..": &bintree{nil, map[string]*bintree{
					"..": &bintree{nil, map[string]*bintree{
						"..": &bintree{nil, map[string]*bintree{
							"..": &bintree{nil, map[string]*bintree{
								"..": &bintree{nil, map[string]*bintree{
									"resources": &bintree{nil, map[string]*bintree{
										"component-descriptor-ocm-v3-schema.yaml": &bintree{ResourcesComponentDescriptorOcmV3SchemaYaml, map[string]*bintree{}},
									}},
								}},
							}},
						}},
					}},
				}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
