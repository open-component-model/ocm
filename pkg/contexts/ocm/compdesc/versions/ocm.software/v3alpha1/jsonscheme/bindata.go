// Code generated by go-bindata. (@generated) DO NOT EDIT.

//Package jsonscheme generated by go-bindata.// sources:
// ../../../../../../../../resources/component-descriptor-ocm-v3-schema.yaml
package jsonscheme

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _ResourcesComponentDescriptorOcmV3SchemaYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x1a\x5d\x6f\xdb\x38\xf2\x5d\xbf\x62\xb0\x2d\x20\xa7\x89\xe2\x24\x45\x0f\xa8\x5f\x82\x5c\x8a\x03\x8a\xbb\xdd\x2c\xda\xde\x3d\x5c\x9a\x2b\x68\x69\x64\xb3\x4b\x91\x3e\x92\x76\xe2\xed\xf6\xbf\x1f\x48\x8a\xfa\xb2\x24\x5b\xb6\xdb\xbb\xc3\x6e\x1e\x5a\x93\x9a\x6f\xce\x0c\x67\x46\x7a\x4e\x93\x09\x84\x73\xad\x17\x6a\x32\x1e\xcf\x88\x4c\x90\xa3\x3c\x8f\x99\x58\x26\x63\x15\xcf\x31\x23\x6a\x1c\x8b\x6c\x21\x38\x72\x1d\x25\xa8\x62\x49\x17\x5a\xc8\x48\xc4\x59\xb4\x7a\x49\xd8\x62\x4e\x2e\xc3\xe0\xb9\x83\xad\xd0\xfa\xac\x04\x8f\xdc\xee\xb9\x90\xb3\x71\x22\x49\xaa\xc7\x57\x17\x57\x17\xd1\xe5\x55\x4e\x3a\x0c\x3c\x41\x2a\xf8\x04\xc2\xbb\xdb\x1f\xe1\xd6\x33\x83\x37\x05\x33\x58\xbd\x84\x12\x23\xa5\x9c\x1a\x04\x35\x09\x00\x32\xd4\xc4\xfc\x0f\xa0\xd7\x0b\x9c\x40\x28\xa6\x9f\x31\xd6\xa1\xdd\xaa\x53\x2f\xd4\x80\x15\x4a\x45\x05\xb7\xc8\x09\xd1\xc4\x41\x4b\xfc\xf7\x92\x4a\x4c\x1c\x39\x80\x08\x42\x4e\x32\x0c\xcb\x65\x8e\xe7\x76\x48\x92\x58\x31\x08\xfb\x59\x8a\x05\x4a\x4d\x51\x4d\x20\x25\x4c\xa1\x7d\xbe\x28\x77\x73\x0a\x86\x9a\xff\x0d\xf0\x5c\x62\x3a\x81\xf0\xd9\xb8\xa2\x51\x69\xea\x9f\x2a\x9c\x73\xb6\x5b\x50\x25\x32\xf2\x84\xc9\x7b\xcc\x56\x28\x3d\x2a\x23\x53\x64\x6a\x0b\xa6\x03\xf2\x28\x0b\x29\x56\x34\x41\xb9\x05\xc9\x83\x79\xb4\x58\x22\x31\x4f\x3e\xd0\xaa\x92\xee\x50\x94\x96\x94\xcf\x8a\xcd\x54\xc8\x8c\xe8\x09\x24\x44\x63\xa4\x69\x86\x41\x50\x97\x34\x3f\x4a\x22\x25\x59\x3b\xfa\x54\x63\x56\xa8\xd1\xad\x44\xe8\x09\x75\xba\xc4\x0e\x87\x4c\xd8\x32\x5f\x6f\x3b\xc2\x16\xed\x2c\xf6\x04\xbe\x7c\xed\x3a\xbb\x05\xd1\x1a\xa5\xf1\xc7\x7f\xad\xee\x2f\xa2\xd7\x0f\xa7\xcf\x3d\x73\x45\x67\x9c\xf2\x59\x93\x7e\x38\x15\x82\x21\xe1\x1e\x2c\x43\x39\xc3\x1b\x36\x13\x92\xea\x79\xd6\x4a\xf9\x9e\x44\xbf\x3e\x98\x7f\x2e\xa2\xd7\xe3\x4f\x51\x85\x87\x45\xbe\x15\x3c\xa5\xb3\x42\xca\x3e\x4f\x0e\x00\x6a\x3e\x59\x33\xac\xd3\xdc\x91\xce\xc8\xd3\xdf\x90\xcf\xf4\x7c\x02\x57\xaf\x5e\x05\xad\x02\x45\x4e\xa2\x87\x17\xa3\xfb\xf3\x87\xc6\xd6\xc9\x0b\xbf\xf7\xe5\xea\xec\xeb\x68\x5c\x7b\xfc\xa9\x05\xe5\x93\xc1\x39\x31\x9a\x05\x00\x34\x41\xae\xa9\x5e\xdf\x68\x2d\xe9\x74\xa9\xf1\xaf\xb8\x76\xa2\x66\x94\x17\x72\xb5\x49\x65\x98\x8f\xee\xa3\x4f\xa7\x5e\x10\xbf\x79\x72\xed\x48\xd7\xe2\xca\xd1\x7c\x06\x9a\xfc\x82\x1c\x52\x29\x32\x50\xf6\x81\xc9\x71\x40\x78\x02\x24\xf9\xbc\x54\x1a\x13\xd0\x02\x08\x63\xe2\x11\x08\x07\xb1\x70\xf6\x05\x86\x24\xa1\x7c\x06\xe1\x2a\x3c\x83\x8c\x7c\x36\x89\x94\xb3\xf5\x99\x45\xb5\xeb\xf3\x8c\xf2\x7c\xd7\xf3\x9a\x53\x05\x19\x12\xae\x40\xcf\x11\x52\x61\xa8\x1a\x22\xce\xfc\x0a\x88\x44\xc3\xca\xf8\x1e\x4d\xea\xf2\x2a\x2f\xf0\xe5\xf9\xd5\xf9\xcb\xea\xef\x28\x15\xe2\x74\x4a\x64\xbe\xb7\xaa\x02\xac\xda\x20\x2e\xcf\xaf\xfc\xaf\x02\xac\x02\x5f\xfc\xac\xa1\x55\x8d\xbd\x7a\xb8\x1e\x5d\xfc\x76\x7f\x19\xbd\x7e\xf8\x98\xbc\x38\x19\x5d\x4f\x3e\x9e\x57\x37\x4e\xae\xdb\xb7\xa2\xd1\xe8\x7a\x52\x6e\xfe\xf6\x31\xb1\x67\x74\x13\xfd\x33\x7a\x30\x11\xe4\x7f\x7b\x92\x3b\x02\x9f\x78\x8e\xa7\xa3\xea\x83\x53\x4b\xa4\xb6\x63\x21\xf3\x08\x6a\x78\x7e\x9b\xeb\x75\xe6\x9e\x3c\x9d\xac\x4d\x1c\xa9\x09\x7c\x69\x4f\x64\x6d\xae\x1c\xc2\x57\xe7\x8a\x0b\xa1\xa8\x16\x72\x7d\x2b\xb8\xc6\x27\x3d\x24\xcd\x19\xa8\xae\xb4\x66\x29\x34\xd3\x4e\x45\x47\x11\xd3\x77\xed\xbc\x09\x63\x77\x69\xc9\xa5\xe3\x66\x6a\xa0\x96\xd9\xb6\x29\x67\x2e\xeb\x94\x28\xfc\xbb\x64\x61\x99\xdb\x36\x44\x36\x7f\x39\x58\x75\xab\x35\x37\xb9\xbf\x5a\x1e\xfb\x91\x2c\x16\xb5\x5c\xdb\x8b\x0a\x80\x7c\x99\x4d\xe0\x3e\x5c\x4a\xf6\x33\xd1\xf3\xf0\x0c\x42\x35\x27\x57\xaf\xfe\x14\x25\x74\x86\x4a\x87\x0f\x41\x83\xce\x50\xca\xd6\xc6\x33\xaa\xb4\x5c\x1b\xea\x77\xb7\x6f\x8b\xe5\x83\x39\x03\x12\xc7\xa8\xd4\x8e\xb5\x8e\xb1\x8c\x85\x32\x97\x6d\x8e\x8a\x0a\x46\x66\x85\x4f\x1a\xb9\xb9\x94\xd4\xc9\x16\x67\x09\x00\x66\x54\xcf\x97\xd3\x9b\x7e\xde\xbd\xde\x66\x97\xc6\x05\x2a\x07\x6a\x77\xd2\xbd\xbc\xb1\x69\x36\x27\x60\x61\xfe\x9c\xd1\x16\x74\xe3\xa5\xfd\x10\xb1\xc8\x32\xaa\xfb\x62\x82\x0b\x8e\x87\xd8\xe5\x40\xbd\x7f\x12\x1c\x9d\x63\x28\xb1\x94\x31\xbe\x29\x02\x6e\x80\x38\xa6\x9c\x29\x16\x79\xa9\x52\xac\x0d\x85\x62\xe1\x5c\x68\x40\x55\xb4\x21\xf8\xee\xc9\x2e\x47\xc1\x27\x2d\xc9\xdb\x1c\x60\x4b\x35\xba\x41\xe7\x08\xb5\xf3\x0e\xc7\xb1\x47\x79\x5d\x0d\x63\xbb\xe6\xeb\xbb\xb4\x9e\xfe\x5a\xa9\x38\xbc\x70\x3b\x60\x35\x62\x77\x00\x37\xfd\x9a\x07\x0e\x00\x5c\x36\x7b\xbf\xc0\x78\x80\x1b\xcd\x89\x9a\x17\x05\x69\xe9\x5c\xa6\xcc\x67\x54\xd9\xb6\x60\xf3\xb1\xad\x94\xf7\xec\xa4\x6a\x0c\x7b\xeb\xf1\x76\x21\x76\x28\xe1\xdb\x21\x02\x57\xa5\x13\xbd\x94\x38\xd0\x48\xa4\xc7\x02\x66\x95\x61\x42\xc9\x07\x1f\x73\xc3\x6d\x42\x0e\x56\xce\x6d\x15\x72\x94\x50\xf5\xbb\xe5\xc3\x1c\x1d\x90\xbb\x60\x44\x6a\xcb\xd2\xc2\x2c\x50\x69\xa0\x7a\xed\xb7\x6f\x9e\x72\x2e\x5a\x2c\x0b\x7a\x7b\xda\x6d\x6b\x4b\xe7\xf8\x6d\x09\xf2\x32\x6e\xaa\xdd\x5c\x45\xcf\x4e\xcc\x9a\x3f\xb9\x9b\x05\x4d\x03\xf1\x66\x9f\x48\xec\x32\xd4\x3e\x9d\x6c\x33\x73\xb6\xc0\x1c\x25\x45\x0f\xb6\x6f\x61\xa2\x62\x56\xe4\x6c\x35\xe4\x22\xee\xbd\xf9\x1a\x1e\x26\x31\xbf\x62\x1d\x97\xa3\xf8\xd9\x77\x99\xfe\xec\xe9\xb9\x0d\x7d\x37\xee\xc0\xca\x5c\x06\x9a\xb3\x99\x4e\x36\x4d\xa7\xb6\xc7\xa8\x64\xfc\xce\x97\x62\x5b\x6b\x5a\x62\xca\x36\x94\xc8\x63\xb4\xcd\x35\x8c\xca\xc1\x24\x13\x31\x61\x27\x79\x29\xd4\x55\x5f\x79\x0f\x7c\x8f\x0c\x63\x2d\xb6\x4d\xb8\x3a\x1d\x76\xd0\xad\x6f\xdb\xb6\x5c\xec\x7d\x15\x2d\xf4\xdc\x75\x86\xd5\xea\x48\x87\x0f\x30\x5b\x26\x41\xc3\x7c\xb9\xaf\x50\x84\x67\x40\x62\xbd\x24\x8c\xad\x27\x25\xa7\xc8\xde\x31\x8f\x63\x50\x0b\x8c\x29\x61\xc6\x39\xb5\xa4\xb1\x65\xf2\xff\x5b\x5b\xee\x51\x38\x36\x83\x59\x70\x6c\x16\x8e\xb9\x41\xf9\x92\xb1\x1d\x2a\xbf\x46\x4a\xf5\x51\x5f\x5e\xfd\x03\xbb\x4c\x4f\x40\x0d\x1d\xa7\xc3\x33\x8b\x6f\x63\xb8\xa4\x72\x96\x0f\xbe\x96\x4a\x43\x46\x74\x3c\xaf\x84\x81\xda\x48\xd9\x9b\x0d\x27\xb3\x25\x5f\x65\xab\x5a\x41\xff\xd1\xc3\x14\x5a\xb9\x1c\x7c\xa4\x2c\xef\x88\x95\x17\x89\x3b\x84\x9d\x9b\x5a\xeb\x02\xe1\x19\x84\xf8\xa4\x51\x72\xc2\x8a\xbe\xfe\x7f\xb1\xd3\x12\x31\xfd\x33\x13\xbb\xb7\x5a\x56\xbb\xbf\x50\x86\x6a\xad\x34\x66\xc3\x71\xef\xda\x18\x7e\xeb\xbc\x20\x62\xfa\x36\x23\xb3\x83\x66\x1d\x76\x49\x0d\x95\x77\xfe\x66\x3b\xca\x10\xa4\x3a\x33\xf3\x9e\x52\x67\xb3\x65\xaa\x59\x9a\xf3\x00\xc5\x18\x59\xfb\x88\x3b\x4c\x1f\x08\x73\x91\x42\x28\xe7\x59\x69\x57\x1f\x76\x63\x14\xa8\x97\x0a\xa6\x11\xcb\x08\xa7\x29\x2a\xdd\xec\xc0\x1a\x4c\xf7\x6c\xf3\x9c\x65\x5c\x6a\x76\x81\xe2\x24\x50\xa0\xc5\x16\x8e\x4d\x47\xdd\x64\xe7\x20\x3c\x2b\x4d\xe4\x0c\x35\x26\x10\x0b\xae\x8b\xe2\xa7\x93\xbc\xa2\xbf\xf6\xea\x62\x9e\x03\xe5\x30\x5d\x6b\x54\x9e\xc7\xd4\x18\xbb\x49\x97\x2f\xb3\xa9\x39\xd0\x00\xa0\x33\x64\x0f\x70\x97\x94\x32\x2c\x6f\xc2\x43\x3d\xa6\x45\xc2\xd2\x7b\x3c\xab\x2e\xbb\xf8\xe7\x55\x73\x80\x9e\x13\x0d\x54\x59\xdd\x8d\xf9\x29\xb7\xcf\x7e\x30\x0f\xd5\x0f\x90\x50\x69\xab\xe7\x75\xe7\x79\x78\xbb\xdd\x1d\x29\xbe\xbe\x81\xc1\xee\x9a\x71\xd6\xef\x9c\x75\xc7\xb4\xf1\x0e\x8f\x54\xcf\x73\xd3\xc4\x4b\x29\x91\xeb\xb2\x40\x81\xf2\x43\x89\x3e\x2b\xf9\xd4\xfa\x2e\xaf\x79\x86\xd8\xa8\xef\xd3\x84\x36\x23\xfe\x51\xfd\x6c\xbf\x4b\xec\x61\x1c\xb3\xe4\xe8\x2a\x1b\x2a\x17\xea\xf7\xb9\xc6\x03\x80\x72\xd0\x7b\x40\x28\x2e\xfd\x3b\x9c\x03\x2f\x6e\x23\x4c\x61\xe8\x65\xcf\xfb\x9a\x00\x60\x86\x1c\x25\x8d\xff\x8b\xef\x5a\x72\x09\xdc\xeb\x96\x7c\xf1\xbd\x63\xf6\x38\x83\xcd\xdf\x59\x4c\x97\x07\xe7\xf6\xbf\x55\x48\xd7\x5c\xf4\x7b\x15\xe6\xf5\x0f\xb5\x86\x7a\xe0\x37\xf1\xa7\xa1\x93\x31\xd5\x37\xdd\xae\x5f\xc1\x76\xfe\x93\xd2\xd8\x36\x94\xfe\x26\xce\x2b\x43\xb3\xac\x4c\xc9\xbc\x7b\xe9\x7d\x35\xcd\x27\x10\x47\x6a\x89\x1b\xaf\x67\x2b\xef\xa0\x5d\xe1\x7e\x24\x3e\xb2\xde\x59\x95\x03\x9d\xe1\xf4\x37\x3a\xe5\x9e\x4f\x3b\xca\xa1\x51\xb8\x0b\x42\xb3\xe4\xd9\x09\xa9\x91\x72\xc3\x20\x68\xb8\x4b\xd5\xd3\x4d\xde\x5c\xd0\x7f\x94\xb9\x35\x82\xf0\x17\xca\x93\xfc\x67\xf5\x9b\xcf\xc8\xb9\x55\x18\xd4\x5d\xa0\x44\xaf\xf9\x66\xd5\xd5\x2b\x0d\x5b\x76\xde\xf8\x6c\xb6\xf8\x2a\xf6\xcc\x3d\x56\x22\xd5\x8f\x44\x62\xf9\xc0\x56\x9d\x46\xa6\x4e\xfa\xb1\xe0\x4a\x4f\x20\x2c\xde\x70\x54\xf4\xf1\x1a\x38\xe4\x56\x83\x19\x90\xb0\xed\x83\xa1\xdd\x3e\xb0\x6c\x9c\x7f\xf7\x51\x6e\x7c\x14\x14\xc2\x33\x5f\x0d\xb3\xf5\x19\x3c\x22\x08\xce\xd6\xf9\x87\x70\xb6\x69\x14\x1c\x6b\x81\xdf\x1e\x33\xf9\xdb\x88\xe2\xdd\xd8\x01\x1f\x86\x16\x34\xc2\xc6\xab\xb5\x03\x68\xb6\xbf\x7e\x0a\xff\x13\x00\x00\xff\xff\x13\x21\xd9\x86\x4e\x2d\x00\x00")

func ResourcesComponentDescriptorOcmV3SchemaYamlBytes() ([]byte, error) {
	return bindataRead(
		_ResourcesComponentDescriptorOcmV3SchemaYaml,
		"../../../../../../../../resources/component-descriptor-ocm-v3-schema.yaml",
	)
}

func ResourcesComponentDescriptorOcmV3SchemaYaml() (*asset, error) {
	bytes, err := ResourcesComponentDescriptorOcmV3SchemaYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../../../../../../../../resources/component-descriptor-ocm-v3-schema.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"../../../../../../../../resources/component-descriptor-ocm-v3-schema.yaml": ResourcesComponentDescriptorOcmV3SchemaYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//
//	data/
//	  foo.txt
//	  img/
//	    a.png
//	    b.png
//
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"..": {nil, map[string]*bintree{
		"..": {nil, map[string]*bintree{
			"..": {nil, map[string]*bintree{
				"..": {nil, map[string]*bintree{
					"..": {nil, map[string]*bintree{
						"..": {nil, map[string]*bintree{
							"..": {nil, map[string]*bintree{
								"..": {nil, map[string]*bintree{
									"resources": {nil, map[string]*bintree{
										"component-descriptor-ocm-v3-schema.yaml": {ResourcesComponentDescriptorOcmV3SchemaYaml, map[string]*bintree{}},
									}},
								}},
							}},
						}},
					}},
				}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
