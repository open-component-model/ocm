// Code generated by go-bindata. (@generated) DO NOT EDIT.

//Package jsonscheme generated by go-bindata.// sources:
// ../../../../../../../../resources/component-descriptor-ocm-v3-schema.yaml
package jsonscheme

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _ResourcesComponentDescriptorOcmV3SchemaYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x5f\x6f\xdb\x38\x12\x7f\xf7\xa7\x18\x6c\x0a\xc8\x69\xa2\x38\x49\xd1\x03\xea\x97\x20\xd7\xe2\x80\xe2\x6e\x37\x8b\xb6\x77\x0f\x97\xe6\x0a\x5a\x1a\xd9\xec\x52\xa4\x8f\xa4\x9d\x78\xbb\xfd\xee\x07\x92\xa2\x44\xc9\x92\x6d\xd9\x6e\xef\x0e\xbb\x7d\x68\x4c\x8a\xf3\x87\xc3\xdf\x0c\x67\x46\x7a\x46\xd3\x31\x44\x33\xad\xe7\x6a\x3c\x1a\x4d\x89\x4c\x91\xa3\xbc\x48\x98\x58\xa4\x23\x95\xcc\x30\x27\x6a\x94\x88\x7c\x2e\x38\x72\x1d\xa7\xa8\x12\x49\xe7\x5a\xc8\x58\x24\x79\xbc\x7c\x41\xd8\x7c\x46\xae\xa2\xc1\x33\xb7\x36\xe0\xf5\x59\x09\x1e\xbb\xd9\x0b\x21\xa7\xa3\x54\x92\x4c\x8f\xae\x2f\xaf\x2f\xe3\xab\xeb\x82\x75\x34\xf0\x0c\xa9\xe0\x63\x88\xee\x5e\xff\x08\xaf\xbd\x30\x78\x53\x0a\x83\xe5\x0b\xa8\x28\x32\xca\xa9\x21\x50\xe3\x01\x40\x8e\x9a\x98\xbf\x00\x7a\x35\xc7\x31\x44\x62\xf2\x19\x13\x1d\xd9\xa9\x3a\xf7\x72\x1b\xb0\x44\xa9\xa8\xe0\x96\x38\x25\x9a\xb8\xd5\x12\xff\xbd\xa0\x12\x53\xc7\x0e\x20\x86\x88\x93\x1c\xa3\x6a\x58\xd0\xb9\x19\x92\xa6\x56\x0d\xc2\x7e\x96\x62\x8e\x52\x53\x54\x63\xc8\x08\x53\x68\x9f\xcf\xab\xd9\x82\x83\xe1\xe6\x7f\x03\x3c\x93\x98\x8d\x21\x3a\x19\x05\x3b\xaa\x4c\xfd\x53\x20\xb9\x10\xbb\x85\x54\x22\x23\x4f\x98\xbe\xc7\x7c\x89\xd2\x93\x32\x32\x41\xa6\xb6\x50\xba\x45\x9e\x64\x2e\xc5\x92\xa6\x28\xb7\x10\xf9\x65\x9e\x2c\x91\x48\xcc\x93\x0f\x34\xdc\xa4\x3b\x14\xa5\x25\xe5\xd3\x72\x32\x13\x32\x27\x7a\x0c\x29\xd1\x18\x6b\x9a\xe3\xc0\x1e\xa4\x9c\x62\xe7\x49\xae\x1b\x93\xb0\xa9\x90\x54\xcf\xf2\x4a\xd8\x9c\x68\x8d\xd2\x1c\xf5\xbf\xee\x49\xfc\xeb\x83\xf9\xef\x32\x7e\x35\xfa\x14\x3f\x9c\x3d\x2b\xf5\x14\x3c\xa3\xd3\x31\x7c\x81\xaf\x3b\x1c\x63\x68\xbf\x42\x2d\x22\x25\x59\x39\x6e\x54\x63\x5e\x2a\xd4\x6d\xda\xc8\x33\xea\xdc\xde\x0e\xd0\x23\x6c\x81\x5d\xb6\xa8\x03\xab\xc5\xe6\x96\x7a\x0c\x5f\xbe\x76\x21\x2a\x30\xdd\xf2\xfe\x32\x7e\x15\x18\x4c\xd1\x29\xa7\x7c\xda\xe4\x1f\x4d\x84\x60\x48\xb8\x5f\x16\x9c\x5f\xa7\x35\xec\x9a\xed\xde\x33\x30\xa7\x14\xf8\x41\xcd\x6c\x6e\x5f\x8e\x49\x4e\x9e\xfe\x86\x7c\xaa\x67\x63\xb8\x7e\xf9\x72\xd0\x8a\x81\xd8\x81\xe0\xe1\xf9\xf0\xfe\xe2\xa1\x31\x75\xfa\xdc\xcf\x7d\xb9\x3e\xff\x3a\x1c\xd5\x1e\x7f\x6a\x21\xf9\x64\x68\x4e\x8d\x6d\x06\x00\x34\x45\xae\xa9\x5e\xdd\x6a\x2d\xe9\x64\xa1\xf1\xaf\xb8\x72\xaa\xe6\x94\x97\x7a\xb5\x69\x65\x84\x0f\xef\xe3\x4f\x67\x5e\x11\x3f\x79\x7a\xe3\x58\xd7\x7c\xd9\xf1\x3c\x01\x4d\x7e\x41\x0e\x99\x14\x39\x28\xfb\xc0\xc4\x55\x20\x3c\x05\x92\x7e\x5e\x28\x8d\x29\x68\x01\x84\x31\xf1\x08\x84\x83\x98\x3b\xfb\x02\x43\x92\x52\x3e\x85\x68\x19\x9d\x43\x4e\x3e\x9b\xe0\xcd\xd9\xea\xdc\x92\xda\xf1\x45\x4e\x79\x31\xeb\x65\xcd\xa8\x82\x1c\x09\x57\xa0\x67\x08\x99\x30\x5c\x0d\x13\x67\x7e\x05\x44\xa2\x11\x65\x90\x45\xd3\xba\xbe\xca\x2b\x7c\x75\x71\x7d\xf1\x22\xfc\x1d\x67\x42\x9c\x4d\x88\x2c\xe6\x96\xe1\x82\x65\xdb\x8a\xab\x8b\x6b\xff\xab\x5c\x16\xac\x2f\x7f\xd6\xc8\x42\x63\x2f\x1f\x6e\x86\x97\xbf\xdd\x5f\xc5\xaf\x1e\x3e\xa6\xcf\x4f\x87\x37\xe3\x8f\x17\xe1\xc4\xe9\x4d\xfb\x54\x3c\x1c\xde\x8c\xab\xc9\xdf\x3e\xa6\xf6\x8c\x6e\xe3\x7f\xc6\x0f\xc6\x3f\xfc\x6f\xcf\x72\xc7\xc5\xa7\x5e\xe2\xd9\x30\x7c\x70\x66\x99\xd4\x66\xec\xca\xc2\x07\x1b\xc8\x6f\x83\xde\xb6\xc0\xb9\x32\x7e\xa4\x4c\xd4\x6b\x75\xcc\x36\x28\x47\xf0\xd5\x41\x71\x2e\x14\xd5\x42\xae\x5e\x0b\xae\xf1\x49\xf7\x09\x62\x66\x55\x57\xd0\xb2\x1c\x9a\x41\x25\xd8\xa3\x48\xe8\xbb\x76\xd9\x84\xb1\xbb\xac\x92\xd2\x71\x1b\x36\x48\xab\x58\xda\xd4\xb3\xd0\x75\x42\x14\xfe\x5d\xb2\xa8\x8a\x89\x6b\x2a\x9b\x7f\xc5\xb2\x70\xaa\x35\x36\xf9\xdb\x26\x88\x63\x3f\x92\xf9\xbc\x16\x49\x37\x92\x02\x20\x5f\xe4\x63\xb8\x8f\x16\x92\xfd\x4c\xf4\x2c\x3a\x87\x48\xcd\xc8\xf5\xcb\x3f\xc5\x29\x9d\xa2\xd2\xd1\xc3\xa0\xc1\xa7\x2f\x67\x6b\xe3\x29\x55\x5a\xae\x0c\xf7\xbb\xd7\x6f\xcb\xe1\x83\x39\x03\x92\x24\xa8\xd4\x8e\xf9\x95\xb1\x8c\x5d\x65\x2e\xf8\x82\x14\x15\x0c\xcd\x08\x9f\x34\x72\x73\xe5\xa8\xd3\x2d\x60\x19\x00\x4c\xa9\x9e\x2d\x26\xb7\x9b\x65\x6f\x44\x9b\x1d\x1a\x08\x04\x07\x6a\x67\xb2\xbd\xd0\xd8\x34\x9b\x53\xb0\x34\x7f\x21\x68\x0b\xb9\x41\xe9\xe6\x15\x89\xc8\x73\xaa\x37\xf9\x04\x17\x1c\x0f\xb1\xcb\x81\xfb\xfe\x49\x70\x74\xc0\x50\x62\x21\x13\x7c\x53\x3a\x5c\x0f\x75\x4c\xb2\x52\x0e\x8a\x44\xa4\x1c\x1b\x0e\xe5\xc0\x41\xa8\x47\xce\xb3\xa6\xf8\xee\xc1\xae\x20\xc1\x27\x2d\xc9\xdb\x62\xc1\x96\x6c\x66\x8d\xcf\x11\xf2\xf5\x1d\x8e\x63\x8f\x94\x3e\x74\x63\x3b\xe6\xab\xbb\xac\x1e\xfe\x5a\xb9\x38\xba\x68\xfb\xc2\xd0\x63\x77\x58\x6e\x6a\x44\xbf\x78\x00\xe0\xa2\xd9\xfb\x39\x26\x3d\x60\x34\x23\x6a\x76\xeb\x6b\x80\x0a\x5c\xa6\xb4\x60\x54\xd9\x52\x64\xfd\xb1\xcd\x83\x77\x48\xfb\xdb\x00\x57\x13\xb8\x31\xdb\x6e\x57\x62\x87\x04\xbd\x7d\xc5\xc0\xe5\xe0\x44\x2f\x24\xf6\x34\x12\xd9\x60\x01\x33\xca\x31\xa5\xe4\x83\xf7\xb9\xfe\x36\x69\x29\xc2\x7a\x6e\xce\x4d\x95\x7a\x54\xab\xea\x77\xcb\x87\x19\xba\x45\xee\x82\x11\x99\x4d\x4b\x4b\xb3\x40\x50\x1e\x6d\xb4\xdf\xbe\x71\xca\x41\xb4\x1c\x96\xfc\xf6\xb4\xdb\xd6\x82\xcd\xc9\xdb\xe2\xe4\x95\xdf\x84\xb5\x5a\xb0\xcf\x4e\xca\x1a\x9e\xca\xd8\x43\x73\x54\x9a\xe4\xf3\x6e\x1c\x72\x34\x65\xc6\x9b\x7d\xfc\xb5\xcb\x9c\xfb\x54\xb3\xcd\xf8\xda\xb2\xe6\x28\x81\xbc\xf7\x29\x94\x26\x2a\xbb\x58\xce\x56\x7d\xae\xeb\x8d\xf7\x63\x03\x87\x12\x8b\x8b\xd8\x49\x39\x0a\x1a\xbf\x4b\x5f\x6a\x4f\x7c\x37\xf6\xbb\x76\x53\x06\xbd\x19\x68\xf6\x67\x3a\xc5\x34\x41\x6d\x8f\x51\xc9\xe4\x9d\x4f\xd8\xb6\x66\xbe\xc4\x24\x77\x28\x91\x27\x68\x4b\x70\x18\x56\x2d\x53\x26\x12\xc2\x4e\x8b\x84\xa9\x2b\x0b\xf3\x08\x7c\x8f\x0c\x13\x2d\xb6\xf5\xde\x3a\x01\xdb\x2b\x37\xb0\xc5\x5d\xa1\xf6\xbe\x1b\x2d\xf7\xb9\x6b\x1f\xab\x15\x48\x87\xb7\x56\x5b\xfa\x45\xfd\xb0\xbc\x29\x9d\x84\x13\x20\x89\x5e\x10\xc6\x56\xe3\x4a\x52\x6c\x6f\xa2\xc7\x11\xa8\x39\x26\x94\x30\x03\x4e\x2d\x69\x62\x85\xfc\xff\x66\xa0\x7b\xa4\x97\x4d\x67\x16\x1c\x9b\xe9\x65\x61\x50\xbe\x60\x6c\x87\xfc\xb0\x11\x52\xbd\xd7\x57\x09\x42\xcf\x5a\xd4\x33\x50\x7d\x1b\xfd\x70\x62\xe9\xad\x0f\x57\x5c\xce\x8b\xf6\xd8\x42\x69\xc8\x89\x4e\x66\x81\x1b\xa8\xb5\x90\xbd\x5e\x96\x32\x9b\x18\x06\x53\x61\x9e\xfd\x47\xa5\x53\xee\xca\xc5\xe0\x23\x45\x79\xc7\xac\xba\x48\xdc\x21\xec\x5c\xfa\x5a\x08\x44\xe7\x10\xe1\x93\x46\xc9\x09\x2b\xab\xff\xff\xc5\x7a\x4c\x24\xf4\xcf\x4c\xec\x5e\x90\xd9\xdd\xfd\x85\x32\x54\x2b\xa5\x31\xef\x4f\x7b\xd7\x26\xf0\x5b\xc7\x05\x91\xd0\xb7\x39\x99\x1e\xd4\x11\xb1\x43\x6a\xb8\xbc\xf3\x37\xdb\x51\x5a\x25\x61\x67\xcd\x23\xa5\x2e\x66\x4b\xef\xb3\x32\xe7\x01\x1b\x63\x64\xe5\x3d\xee\xb0\xfd\x40\x54\xa8\x14\x41\xd5\xf5\xca\xba\xaa\xb5\x5b\xb3\x81\x7a\xaa\x60\xca\xb5\x9c\x70\x9a\xa1\xd2\xcd\x3a\xad\x21\x74\xcf\x62\xd0\x59\xc6\x85\x66\xe7\x28\x4e\x03\x05\x5a\x6c\x91\xd8\x04\xea\xba\x38\xb7\xc2\x8b\xd2\x44\x4e\x51\x63\x0a\x89\xe0\xba\x4c\x7e\x3a\xd9\x2b\xfa\xeb\xc6\xbd\x98\xe7\x40\x39\x4c\x56\x1a\x95\x97\x31\x31\xc6\x6e\xf2\xe5\x8b\x7c\x62\x0e\x74\x00\xd0\xe9\xb2\x07\xc0\x25\xa3\x0c\xab\x9b\xf0\x50\xc4\xb4\x68\x58\xa1\xc7\x8b\xea\xb2\x8b\x7f\x1e\x9a\x03\xf4\x8c\x68\xa0\xca\xee\xdd\x98\x9f\x72\xfb\xec\x07\xf3\x50\xfd\x00\x29\x95\x36\x7b\x5e\x75\x9e\x87\xb7\xdb\xdd\x91\xfc\xeb\x1b\x18\xec\xae\xe9\x67\x9b\xc1\x59\x07\xa6\xf5\x77\x78\xa4\x7a\x56\x98\x26\x59\x48\x89\x5c\x57\x09\x0a\x54\x9f\x70\x6c\xb2\x92\x0f\xad\xef\x8a\x9c\xa7\x8f\x8d\x36\x7d\x34\xd1\x66\xc4\x3f\xb2\x9f\xed\x77\x89\x3d\x8c\x63\xa6\x1c\x5d\x69\x43\x70\xa1\x7e\x9f\x6b\x7c\x00\x50\xb5\x83\x0f\x70\xc5\x85\x7f\xd3\x73\xe0\xc5\x6d\x94\x29\x0d\xbd\xd8\xf0\x56\x67\x00\x30\x45\x8e\x92\x26\xff\xc5\x37\x32\x85\x06\xee\xa5\x4c\x31\xf8\xde\x3e\x7b\x9c\xf6\xe7\xef\xcc\xa7\xab\x83\x73\xf3\xdf\xca\xa5\x6b\x10\xfd\x5e\x89\x79\xfd\x13\xb2\xbe\x08\xfc\x26\x78\xea\xdb\x19\x53\x9b\xba\xdb\xf5\x2b\xd8\xf6\x7f\x32\x9a\xd8\x82\xd2\xdf\xc4\x45\x66\x68\x86\x41\x97\xcc\xc3\x4b\xef\xbb\xd3\xa2\x03\x71\xa4\x92\xb8\xf1\x12\x37\x78\x53\xed\x12\xf7\x23\xc9\x91\xf5\xca\xaa\x6a\xe8\xf4\xe7\xbf\x56\x29\x6f\xf8\x00\xa4\x6a\x1a\x45\xbb\x10\x34\x53\x9e\x9d\x88\x1a\x21\x37\x1a\x0c\x1a\x70\x09\x91\x6e\xe2\xe6\x9c\xfe\xa3\x8a\xad\x31\x44\xbf\x50\x9e\x16\x3f\xc3\xaf\x51\x63\x07\xab\x68\x50\x87\x40\x45\x5e\xc3\x66\x08\xf5\xa0\x60\xcb\x2f\x1a\x1f\xf4\x96\xdf\xeb\x9e\xbb\xc7\x4a\x64\xfa\x91\x48\xac\x1e\xd8\xac\xd3\xe8\xd4\xc9\x3f\x11\x5c\xe9\x31\x44\xe5\x1b\x8e\x60\x3f\x7e\x07\x8e\xb8\xe3\x13\x40\xb7\xc1\xb5\xef\x73\x76\xfb\xc8\xb2\x71\xfe\xdd\x47\xb9\xf6\xe9\x50\x04\x27\x3e\x1b\x66\xab\x73\x78\x44\x10\x9c\xad\x8a\xcf\xe5\x6c\xd1\x28\x38\xd6\x1c\xbf\xdd\x67\x8a\xb7\x11\xe5\x1b\xb4\x03\x3e\x0e\x2d\x79\x44\x8d\x57\x6b\x07\xf0\x6c\x7f\xfd\x14\xfd\x27\x00\x00\xff\xff\x55\xdf\x5c\xaa\xe8\x2d\x00\x00")

func ResourcesComponentDescriptorOcmV3SchemaYamlBytes() ([]byte, error) {
	return bindataRead(
		_ResourcesComponentDescriptorOcmV3SchemaYaml,
		"../../../../../../../../resources/component-descriptor-ocm-v3-schema.yaml",
	)
}

func ResourcesComponentDescriptorOcmV3SchemaYaml() (*asset, error) {
	bytes, err := ResourcesComponentDescriptorOcmV3SchemaYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../../../../../../../../resources/component-descriptor-ocm-v3-schema.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"../../../../../../../../resources/component-descriptor-ocm-v3-schema.yaml": ResourcesComponentDescriptorOcmV3SchemaYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//
//	data/
//	  foo.txt
//	  img/
//	    a.png
//	    b.png
//
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"..": {nil, map[string]*bintree{
		"..": {nil, map[string]*bintree{
			"..": {nil, map[string]*bintree{
				"..": {nil, map[string]*bintree{
					"..": {nil, map[string]*bintree{
						"..": {nil, map[string]*bintree{
							"..": {nil, map[string]*bintree{
								"..": {nil, map[string]*bintree{
									"resources": {nil, map[string]*bintree{
										"component-descriptor-ocm-v3-schema.yaml": {ResourcesComponentDescriptorOcmV3SchemaYaml, map[string]*bintree{}},
									}},
								}},
							}},
						}},
					}},
				}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
