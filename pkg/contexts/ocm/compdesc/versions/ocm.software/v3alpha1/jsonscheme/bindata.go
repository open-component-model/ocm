// Code generated by go-bindata. (@generated) DO NOT EDIT.

//Package jsonscheme generated by go-bindata.// sources:
// ../../../../../../../../resources/component-descriptor-ocm-v3-schema.yaml
package jsonscheme

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _ResourcesComponentDescriptorOcmV3SchemaYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x19\x5f\x6f\xdb\xb6\xf3\xdd\x9f\xe2\x80\x04\x90\xdd\x44\x76\xe2\xa2\x0f\xd5\x4b\x50\xb4\x2f\x3f\xfc\xb6\x75\x58\x8b\x3d\x2c\xf5\x02\x46\x3a\xd9\x4c\x25\x52\x23\x69\x27\x5e\x9b\xef\x3e\x90\x14\x25\x4a\x96\x1c\xcb\x49\x1f\x86\xbd\x24\xe2\xf1\xee\x78\xbc\xff\x47\x9f\xd2\x24\x82\x60\xa5\x54\x21\xa3\xd9\x6c\x49\x44\x82\x0c\xc5\x34\xce\xf8\x3a\x99\xc9\x78\x85\x39\x91\xb3\x98\xe7\x05\x67\xc8\x54\x98\xa0\x8c\x05\x2d\x14\x17\x21\x8f\xf3\x70\xf3\x9a\x64\xc5\x8a\x5c\x06\xa3\x53\x8b\xeb\xf1\xba\x93\x9c\x85\x16\x3a\xe5\x62\x39\x4b\x04\x49\xd5\x6c\x7e\x31\xbf\x08\x2f\xe7\x25\xeb\x60\xe4\x18\x52\xce\x22\x08\x3e\xbe\xff\x19\xde\xbb\xc3\xe0\x43\x75\x18\x6c\x5e\x83\xa3\x38\x4d\x30\x95\xd1\x08\x20\x47\x45\xf4\x7f\x00\xb5\x2d\x30\x82\x80\xdf\xde\x61\xac\x02\x03\x6a\xf2\xad\x2e\x00\x1b\x14\x92\x72\x66\x88\x13\xa2\x88\xc5\x16\xf8\xd7\x9a\x0a\x4c\x2c\x3b\x80\x10\x02\x46\x72\x0c\xea\x65\x49\x67\x21\x24\x49\xa8\xe6\x4c\xb2\x5f\x05\x2f\x50\x28\x8a\x32\x82\x94\x64\x12\xcd\x7e\x51\x43\x4b\x0e\x9a\x9b\xfb\x06\x38\x15\x98\x46\x10\x9c\xcc\xcc\x5d\x6a\xf5\xfe\xe2\x9d\x59\x1e\xd8\x4b\x24\x30\x23\x0f\x98\x7c\xc2\x7c\x83\xc2\x11\x65\xe4\x16\x33\xd9\x4b\x63\xb7\x1d\x72\x21\xf8\x86\x26\x28\x7a\xd1\x1d\x82\x23\x88\x05\x12\x7d\xed\xcf\xd4\xbf\x8c\x55\xbe\x54\x82\xb2\x65\x05\x4c\xb9\xc8\x89\x8a\x20\x21\x0a\x43\x45\x73\x1c\x19\x83\x89\x25\xf6\x5a\x6c\x57\x69\x24\x5b\x72\x41\xd5\x2a\xaf\x0f\x2b\x88\x52\x28\xb4\x49\xff\xbc\x26\xe1\xdf\x0b\xfd\xe7\x22\x7c\x3b\xbb\x09\x17\x67\xa7\x95\x9c\x9c\xa5\x74\x19\xc1\x37\x78\x3c\xc0\x5c\xbe\xce\x4a\xb1\x88\x10\x64\x6b\xb9\x51\x85\x79\x25\x50\x97\x3a\x03\xc7\xa2\xf7\x62\x07\x38\x17\xc9\xd6\xd8\xa7\x85\xa6\xeb\x74\x68\xdb\x50\x47\xf0\xed\xb1\xcf\x73\x3c\xa5\x6d\xae\x2f\xc2\xb7\x9e\xaa\x24\x5d\x32\xca\x96\x6d\xfe\xc1\x2d\xe7\x19\x12\xe6\xd0\x3c\xcb\x75\xe8\xc1\xec\x3e\x1d\x19\x23\x6d\x19\xcf\xd3\x1b\x0a\xb3\x37\xb2\x4c\x72\xf2\xf0\x13\xb2\xa5\x5a\x45\x30\x7f\xf3\x66\xd4\x69\xf7\xd0\x1a\x7e\xf1\x6a\x7c\x3d\x5d\xb4\x40\x93\x57\x0e\xf6\x6d\x7e\xfe\x38\x9e\x35\xb6\x6f\x3a\x48\x6e\x34\xcd\x44\x6b\x65\x04\x40\x13\x64\x8a\xaa\xed\x3b\xa5\x04\xbd\x5d\x2b\xfc\x3f\x6e\xad\xa8\x39\x65\x95\x5c\x5d\x52\xe9\xc3\xc7\xd7\xe1\xcd\x99\x13\xc4\x01\x27\x57\x96\x75\x23\x66\x2d\xcf\x13\x50\xe4\x2b\x32\x48\x05\xcf\x41\x9a\x0d\x9d\x2d\x81\xb0\x04\x48\x72\xb7\x96\x0a\x13\x50\x1c\x48\x96\xf1\x7b\x20\x0c\x78\x61\xf5\x0b\x19\x92\x84\xb2\x25\x04\x9b\xe0\x1c\x72\x72\xa7\x53\x32\xcb\xb6\xe7\x86\xd4\xac\xa7\x39\x65\x25\xd4\x9d\xb5\xa2\x12\x72\x24\x4c\x82\x5a\x21\xa4\x5c\x73\xd5\x4c\xac\xfa\x25\x10\x81\xfa\x28\xed\x53\x34\x69\xca\x2b\x9d\xc0\x97\xd3\xf9\xf4\xb5\xff\x1d\xa6\x9c\x9f\xdd\x12\x51\xc2\x36\x3e\xc2\xa6\x0b\xe3\x72\x3a\x77\x5f\x15\x9a\x87\x5f\x7d\x36\xc8\x7c\x65\x6f\x16\x57\xe3\x8b\xef\xd7\x97\xe1\xdb\xc5\x97\xe4\xd5\x64\x7c\x15\x7d\x99\xfa\x80\xc9\x55\x37\x28\x1c\x8f\xaf\xa2\x1a\xf8\xfd\x4b\x62\x6c\xf4\x2e\xfc\x23\x5c\xe8\xc8\x70\xdf\x8e\xe5\x81\xc8\x13\x77\xe2\xd9\xd8\xdf\x38\x33\x4c\x1a\x10\x83\x59\x46\x5f\xcb\xf3\xbb\x5c\xef\xa9\x64\xb9\xd5\x71\x24\x75\xa6\x6b\x85\x64\x97\x13\x07\xf0\x68\x9d\xb0\xe0\x92\x2a\x2e\xb6\xef\x39\x53\xf8\xa0\x86\x24\x2e\x8d\xd5\x97\xa8\x0c\x87\x76\x22\xf1\x6e\x47\xe2\x18\xa5\x3c\xb0\x62\xdf\x12\x89\x06\x4b\x97\x92\x92\x14\x25\x8c\xf5\x0a\x1f\x14\x32\x9d\xe2\xe4\xe4\x09\x41\x47\x00\x92\xaf\x45\x8c\x1f\x30\xa5\xcc\x64\xa6\x01\xb7\xd5\x99\xb7\x5a\x94\x59\xb5\x5a\x6b\x0e\xd5\xc2\xca\x37\x20\x81\x37\xf2\x5d\x47\x4a\xed\xb4\x5f\x89\x8c\x0f\x4a\x90\xff\x95\x08\xbd\x49\x79\x87\xc3\xb3\x1a\x8b\xbd\xb6\xb5\xc0\x41\xbd\x87\xef\x0b\x1d\xc8\x76\xdb\xd8\x2f\xa1\x4b\x94\xea\x53\x81\xf1\x00\xcb\xad\x88\x5c\xbd\x73\xdd\x43\x6d\x4f\xdd\x94\x64\x54\x9a\x26\x66\x77\xdb\xd4\xd1\x23\xfb\xbb\xc6\x81\x7b\xab\x75\xb7\x10\x07\x14\xf8\x6e\x8c\x11\x80\x6e\xaf\xa4\x22\x79\xd1\x56\x92\xd5\x51\x8f\xc4\xfb\x98\x96\xa0\x23\xdb\x3c\xdd\x53\x10\xb5\x16\x38\xd0\x68\x64\x8f\x45\xf4\x2a\xc7\x84\x92\xcf\x2e\xec\x86\xdb\xa8\xa3\x9d\x1c\xa8\x6c\x0b\xaa\xe4\xa8\xb1\x9a\xb9\xeb\xf3\x0a\x2d\x92\x4d\x60\x3c\x35\xc5\xb6\x52\x0b\x78\xed\x5e\x97\x3d\x2b\xc4\x63\x53\x95\x0d\x99\x6a\x59\xf1\x7b\x91\xd9\xa5\x43\x21\xf6\xbc\xde\x60\xae\x23\xd8\xef\x3a\xbd\x1b\x76\xd0\x34\x7c\x28\xf0\x1c\xd2\x38\x7a\x2f\x59\x23\x14\x4c\xfa\x60\xa8\x3b\xa8\x0f\xc7\x24\x91\x3e\x9d\x1e\xd3\xa2\xb7\x73\x6e\x07\xce\x33\xd3\xfa\x00\x23\x54\x6a\xa9\x46\x6d\xab\x9f\xfe\xda\x3c\xb0\x36\xb6\x1c\x50\x60\x59\x84\xed\x29\x2f\xe2\x86\x3f\x6c\x84\x1e\xec\xcc\xad\xdb\xed\x54\x49\x6f\x98\x84\xf6\x40\xd9\x71\x40\xdb\x61\x6d\x13\x23\xe2\xdf\x30\x3d\xb0\x75\x22\x20\x30\x45\x81\x2c\x46\x33\x39\xc0\xb8\x7e\xbf\xc9\x78\x4c\xb2\x49\xd9\x14\x1d\xfb\x98\xe1\x7c\xf0\x13\x66\x18\x2b\xde\xff\x80\xd0\xeb\xac\x07\xf6\x0a\xa6\x5b\x2d\xaf\x72\xec\xe5\xab\xbb\x1f\x3a\x8c\x77\xba\xd2\xf3\x5f\x80\x3a\x46\xdf\x43\xfd\x78\x5f\x03\x09\x27\x40\x62\xb5\x26\x59\xb6\x8d\xea\x33\x42\x53\x78\xee\x67\x20\x0b\x8c\x29\xc9\xb4\x93\x2a\x41\x63\x2d\xb2\xfc\xb7\xf4\x9c\x83\x1a\xca\x76\xd8\x72\x86\x1f\x53\x3f\xcc\x42\xa7\x38\xb6\xce\xb2\xa0\xb1\xb1\x3f\x55\x56\xf1\xfd\xf4\x08\xb1\x6f\x84\x71\x6c\xe4\xd0\x17\x47\x38\x31\xf4\x26\x72\x6b\x2e\xe7\xe5\x2c\xbf\x96\x0a\x72\xa2\xe2\x95\xe7\xe8\x72\x27\x21\x7b\x73\x9b\x59\x6a\x7d\xab\xca\x99\x0d\xc8\xb5\xdc\xdd\xde\xfb\x1f\x99\x61\x6c\x9e\x7d\x76\x0e\xb7\x6c\xea\x02\x61\x95\xfd\xa4\xfe\x90\xad\xf3\x08\xae\x03\x63\xea\xe0\x1c\x02\x3d\xe8\x0a\x46\xb2\x60\x71\x4c\x48\x1c\x38\x63\xfd\xe8\xf8\x69\x3e\x33\x0f\x7d\x1f\x7d\x99\x76\xf5\xb8\x51\x55\x17\xde\x7d\x2d\x63\x33\xdc\x4d\xaa\x4d\x69\x6c\x6c\xed\x9a\xfe\x98\x33\x85\x4c\xe9\xa5\x57\x8a\x9c\xff\xaa\x63\xef\x58\x26\x81\x67\xfb\x69\x2b\xb1\xd5\x1e\x5b\x96\xd0\x67\x9f\x50\x71\x6a\x77\x4b\x2f\xc0\x79\x57\xfa\x51\xcb\x48\xbe\x67\xe9\x14\x57\xd0\xdf\xeb\x22\x1e\x42\xf0\x95\xb2\xa4\xfc\xf4\x7f\x0f\x0a\xad\x31\x83\x51\x53\xf1\x35\x79\xef\xcb\x75\x19\xc1\x10\xf0\x38\x9f\xb6\x7e\x4c\xab\x7e\x2b\x3b\xb7\xdb\x92\xa7\xea\x9e\x08\xac\x37\x40\x87\xb9\x96\xa9\x97\x7f\xcc\x99\x54\x11\x04\x55\xe3\xee\xdd\xc7\xdd\xc0\x12\xef\x3c\xd1\xdb\xab\xed\x3c\xfe\x1d\xf5\xc3\xc7\x0e\x17\x5d\xa4\xe2\xb5\x10\xc8\x54\xb6\x3d\x87\x7b\x04\xce\xb2\x6d\xf9\x68\x6d\x0a\x15\x67\xd8\x08\xa7\xb6\x27\x96\x0d\x75\x35\xf7\x1d\x25\x57\x45\x1d\xb4\x26\xbf\xa3\xb8\x75\xcf\x48\xc1\x3f\x01\x00\x00\xff\xff\x5a\x12\x6d\xad\x32\x1d\x00\x00")

func ResourcesComponentDescriptorOcmV3SchemaYamlBytes() ([]byte, error) {
	return bindataRead(
		_ResourcesComponentDescriptorOcmV3SchemaYaml,
		"../../../../../../../../resources/component-descriptor-ocm-v3-schema.yaml",
	)
}

func ResourcesComponentDescriptorOcmV3SchemaYaml() (*asset, error) {
	bytes, err := ResourcesComponentDescriptorOcmV3SchemaYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../../../../../../../../resources/component-descriptor-ocm-v3-schema.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"../../../../../../../../resources/component-descriptor-ocm-v3-schema.yaml": ResourcesComponentDescriptorOcmV3SchemaYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//
//	data/
//	  foo.txt
//	  img/
//	    a.png
//	    b.png
//
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"..": {nil, map[string]*bintree{
		"..": {nil, map[string]*bintree{
			"..": {nil, map[string]*bintree{
				"..": {nil, map[string]*bintree{
					"..": {nil, map[string]*bintree{
						"..": {nil, map[string]*bintree{
							"..": {nil, map[string]*bintree{
								"..": {nil, map[string]*bintree{
									"resources": {nil, map[string]*bintree{
										"component-descriptor-ocm-v3-schema.yaml": {ResourcesComponentDescriptorOcmV3SchemaYaml, map[string]*bintree{}},
									}},
								}},
							}},
						}},
					}},
				}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
