// Code generated by go-bindata. (@generated) DO NOT EDIT.

//Package jsonscheme generated by go-bindata.// sources:
// ../../../../../../../../resources/component-descriptor-ocm-v3-schema.yaml
package jsonscheme

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _ResourcesComponentDescriptorOcmV3SchemaYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x1a\x5d\x6f\xdb\x38\xf2\xdd\xbf\x62\xb0\x09\x20\xa7\x89\xec\x24\x45\x0f\xa8\x5f\x82\x5c\x8b\x03\x8a\xbb\xdd\x2c\xda\xde\x3d\x5c\xea\x2b\x68\x69\x64\xb3\x2b\x91\x3e\x92\x76\xe2\xed\xe6\xbf\x1f\x48\x8a\x12\x25\x4b\xb2\x65\x27\xb7\xb8\x8f\x3e\x34\x26\x39\x5f\x1c\xce\x0c\x67\x46\x3c\xa5\xf1\x04\x82\x85\x52\x4b\x39\x19\x8f\xe7\x44\xc4\xc8\x50\x8c\xa2\x94\xaf\xe2\xb1\x8c\x16\x98\x11\x39\x8e\x78\xb6\xe4\x0c\x99\x0a\x63\x94\x91\xa0\x4b\xc5\x45\xc8\xa3\x2c\x5c\xbf\x26\xe9\x72\x41\xae\x82\xc1\xa9\x85\xf5\x68\x7d\x93\x9c\x85\x76\x76\xc4\xc5\x7c\x1c\x0b\x92\xa8\xf1\xf5\xe5\xf5\x65\x78\x75\x9d\x93\x0e\x06\x8e\x20\xe5\x6c\x02\xc1\xdd\xbb\x1f\xe1\x9d\x63\x06\xef\x0b\x66\xb0\x7e\x0d\x0e\xe3\x34\xc6\x44\x4e\x06\x00\x19\x2a\xa2\xff\x02\xa8\xcd\x12\x27\x10\xf0\xd9\x37\x8c\x54\x60\xa6\xaa\x74\x8b\x0d\xc0\x1a\x85\xa4\x9c\x19\xe4\x98\x28\x62\xa1\x05\xfe\x73\x45\x05\xc6\x96\x1c\x40\x08\x01\x23\x19\x06\xe5\x30\xc7\xb3\x33\x24\x8e\xa9\xa6\x4c\xd2\x9f\x05\x5f\xa2\x50\x14\xe5\x04\x12\x92\x4a\x34\xeb\xcb\x72\x36\xa7\xa0\xa9\xb9\xdf\x00\xa7\x02\x93\x09\x04\x27\x63\xb3\x97\x52\xbd\x3f\x79\x3c\x73\x86\xad\x48\x02\x53\xf2\x88\xf1\x27\xcc\xd6\x28\x1c\x52\x4a\x66\x98\xca\x56\x1c\xbb\xec\x80\x97\x82\xaf\x69\x8c\xa2\x15\xdc\x01\x38\x84\x48\x20\xd1\xdb\xfe\x4c\xfd\xcd\x58\xe5\x4b\x25\x28\x9b\x17\x93\x09\x17\x19\x51\x13\x88\x89\xc2\x50\xd1\x0c\x07\xe6\xc0\xc4\x1c\x5b\x4f\x6c\x5b\x69\x24\x9d\x73\x41\xd5\x22\x2b\x99\x2d\x89\x52\x28\xf4\x91\xfe\xe3\x9e\x84\xbf\x4e\xf5\x7f\x97\xe1\xdb\xf1\xd7\x70\x7a\x7e\x5a\xc8\xc9\x59\x42\xe7\x13\xf8\x0e\x4f\x7b\x1c\x97\xaf\xb3\x5c\x2c\x22\x04\xd9\x58\x6a\x54\x61\x56\x08\xd4\xa4\xce\xc0\x91\x68\xdd\xd8\x1e\xc6\x45\xd2\x15\xb6\x69\xa1\x6a\x3a\x0d\xda\x36\xd8\x13\xf8\xfe\xd4\x66\x39\x9e\xd2\xd6\xf7\x97\xe1\x5b\x4f\x55\x92\xce\x19\x65\xf3\x3a\xfd\x60\xc6\x79\x8a\x84\x39\x30\xef\xe4\x1a\xf4\x60\x56\x77\x7b\xc6\x40\x9f\x8c\x67\xe9\x15\x85\xd9\x1d\x59\x22\x19\x79\xfc\x0b\xb2\xb9\x5a\x4c\xe0\xfa\xcd\x9b\x41\xe3\xb9\x87\xf6\xe0\xa7\xaf\x86\xf7\xa3\x69\x6d\xea\xec\x95\x9b\xfb\x7e\x7d\xf1\x34\x1c\x57\x96\xbf\x36\xa0\x7c\xd5\x38\x67\x5a\x2b\x03\x00\x1a\x23\x53\x54\x6d\x6e\x95\x12\x74\xb6\x52\xf8\x67\xdc\x58\x51\x33\xca\x0a\xb9\x9a\xa4\xd2\xcc\x87\xf7\xe1\xd7\x73\x27\x88\x9b\x3c\xbb\xb1\xa4\x2b\x3e\x6b\x69\x9e\x80\x22\xbf\x20\x83\x44\xf0\x0c\xa4\x59\xd0\xd1\x12\x08\x8b\x81\xc4\xdf\x56\x52\x61\x0c\x8a\x03\x49\x53\xfe\x00\x84\x01\x5f\x5a\xfd\x42\x8a\x24\xa6\x6c\x0e\xc1\x3a\xb8\x80\x8c\x7c\xd3\x21\x99\xa5\x9b\x0b\x83\x6a\xc6\xa3\x8c\xb2\x7c\xd6\xf1\x5a\x50\x09\x19\x12\x26\x41\x2d\x10\x12\xae\xa9\x6a\x22\x56\xfd\x12\x88\x40\xcd\x4a\xdb\x14\x8d\xab\xf2\x4a\x27\xf0\xd5\xe8\x7a\xf4\xda\xff\x1d\x26\x9c\x9f\xcf\x88\xc8\xe7\xd6\x3e\xc0\xba\x09\xe2\x6a\x74\xed\x7e\x15\x60\x1e\x7c\xf1\xb3\x82\xe6\x2b\x7b\x3d\xbd\x19\x5e\xfe\x76\x7f\x15\xbe\x9d\x7e\x89\x5f\x9d\x0d\x6f\x26\x5f\x46\xfe\xc4\xd9\x4d\xf3\x54\x38\x1c\xde\x4c\xca\xc9\xdf\xbe\xc4\xe6\x8c\x6e\xc3\xbf\x87\x53\xed\x19\xee\xb7\x23\xb9\x27\xf0\x99\xe3\x78\x3e\xf4\x17\xce\x0d\x91\xca\x8c\x81\xcc\xbd\xaf\x66\xf9\x4d\xa6\xb7\x2b\x58\x6e\xb4\x1f\x49\x1d\xe9\x6a\x2e\xd9\x64\xc4\x01\x3c\x59\x23\x5c\x72\x49\x15\x17\x9b\x77\x9c\x29\x7c\x54\x7d\x02\x97\x86\x6a\x0b\x54\x86\x42\x3d\x90\x78\xbb\xe3\x11\xfd\xd8\xcc\x9b\xa4\xe9\x5d\x52\x72\xd9\xba\xe9\x6a\x48\x65\xe4\xac\x4b\x98\x4b\x39\x23\x12\xff\x2a\xd2\xa0\x8c\x80\x5b\xc2\xea\x7f\x39\x98\x3f\xd5\x18\x8f\xdc\xad\xe2\xc5\xae\x1f\xc9\x72\x59\x89\x9b\x9d\xa8\x00\xc8\x56\xd9\x04\xee\x83\x95\x48\x7f\x26\x6a\x11\x5c\x40\x20\x17\xe4\xfa\xcd\x1f\xc2\x98\xce\x51\xaa\x60\x3a\xa8\xd1\xe9\x4b\xd9\x68\x77\x4e\xa5\x12\x1b\x4d\xfd\xee\xdd\x87\x62\x38\xd5\xda\x27\x51\x84\x52\xee\x99\x2f\x69\xcd\x18\x28\x7d\x91\xe7\xa8\x28\x61\xa8\x47\xf8\xa8\x90\xe9\x0b\x46\x9e\xed\x30\x93\x01\xc0\x9c\xaa\xc5\x6a\x76\xdb\xcd\xbb\xd3\xce\xcc\x50\x9b\x80\x77\xa0\x66\x26\x39\xc8\x0e\xeb\x6a\xb3\x02\x16\xea\xcf\x19\xed\x40\xd7\xf6\xd9\x0d\x11\xf1\x2c\xa3\xaa\xcb\x1b\x18\x67\x78\x8c\x5e\x8e\xdc\xf7\x4f\x9c\xa1\x35\x0c\xc9\x57\x22\xc2\xf7\x98\x50\x66\xae\xee\x1e\xe2\xe8\xd4\xa4\x18\xe4\x69\x47\x31\xd6\x14\x8a\x81\x35\xa1\x1e\x19\xce\x96\xe0\xfb\x04\xb8\x1c\x18\x1f\x95\x20\x1f\x72\x80\xd6\xac\x65\x8b\xc2\x51\x99\xf7\x1e\xca\xef\x95\x9c\xfb\xee\x6a\xc6\x6c\x73\x97\x54\xc3\x5c\x0d\xdf\x62\x04\x5d\x20\xbe\x37\x76\x02\xea\x1a\xce\x81\x0d\x00\x6c\x8c\xfa\xb4\xc4\xa8\x87\x71\x2c\x88\x5c\xdc\xba\x0c\xbe\x34\x19\x5d\x18\xa4\x54\x9a\x42\x62\x7b\xd9\xe4\xb2\x7b\x24\xed\x4d\x66\x54\x61\xd8\x99\x31\x37\x0b\xb1\x47\x92\xdd\x0c\x31\x00\xd0\x25\x8e\x54\x24\x5b\xd6\x95\x64\x75\xd4\x22\x71\x17\xd1\x7c\xea\xc0\x52\x4b\xe7\xf5\x44\xad\x04\xf6\x3c\x34\xd2\x71\x22\x7a\x94\x61\x4c\xc9\x67\xe7\xd9\xfd\xcf\xa8\xa1\xa4\xeb\xa9\x6c\x3b\x55\xc8\x51\x42\x55\x6f\xb0\xcf\x0b\xb4\x40\xf6\x1a\xe3\x89\x49\x78\x0b\xb5\x80\x57\x72\x35\x9d\x67\x01\x78\x68\x34\xb4\x2e\x53\x0c\x0b\x7a\x07\xea\x6d\x67\x11\x68\xf9\xb5\x06\x97\xd2\x83\xfd\xca\xcf\xdb\x61\x03\x4e\xc5\x86\x02\xcf\x20\x8d\xa1\xb7\xa2\x55\x5c\xc1\x5e\x75\xa8\xab\x98\xf7\x87\x04\x91\x36\x9d\x1e\x52\x26\xd7\xc3\x7a\x03\xcc\x91\x37\x47\x8f\x43\x28\xd4\x52\xb4\xbb\xac\x7e\xfa\x64\x03\x9d\xd7\x6f\xcd\x00\x05\xe6\xf7\xbc\xe5\xf2\x2c\x66\xf8\x62\x6d\xac\xde\xc6\x5c\xdb\xdd\xd6\x45\xec\x35\x74\xa0\xde\xd4\x69\x60\x50\x37\x58\x73\x5c\x52\x44\x1f\x5d\xde\xb7\x33\x81\x26\x3a\x47\x44\x81\x2c\x42\x53\xbd\xc3\xb0\xec\xa1\xa6\x3c\x22\xe9\x59\x9e\x77\x1d\xda\x50\x74\x36\xf8\x09\x53\x8c\x14\x6f\x6f\xe2\xb5\x1a\xeb\x9e\xe9\x88\xa9\x18\xf3\xad\x1c\xba\xf9\x62\xef\xfb\x36\xc4\x1a\x4d\xe9\xf8\x2e\x6c\x43\xfb\x69\x5f\x3b\xee\xca\x51\xe1\x04\x48\xa4\x56\x24\x4d\x37\x93\x92\x47\x68\x2e\x9e\x87\x31\xc8\x25\x46\x94\xa4\xda\x48\x95\xa0\x91\x16\x59\xfe\xa7\xa4\xb5\xbd\x72\xd6\xba\xdb\x72\x86\xf5\x9c\x35\x57\x1c\x5b\xa5\x69\x67\x02\x5a\x0b\x95\xce\xbf\xcb\x1b\xbf\x67\x09\xeb\x08\xc8\xbe\xfd\x7e\x38\x31\xf8\xc6\x67\x4b\x2a\x17\x79\x27\x6d\x25\x15\x64\x44\x45\x0b\xcf\xc4\xe5\x56\x28\xde\xae\x66\x53\x93\x79\x7a\x53\x7e\xf2\xfe\x3f\x5b\x20\xd9\x08\x7b\x74\xf4\xb6\x64\xca\xab\xc1\x2a\x7b\xef\xca\xd8\x1c\x75\x70\x01\x01\x3e\x2a\x14\x8c\xa4\x45\x73\xe0\xf7\x2f\xe0\x78\x44\xff\x98\xf2\x7d\x2a\x38\xb3\x8b\x3f\xd1\x14\xe5\x46\x2a\xcc\xfa\x60\xdd\x35\x31\x79\x39\xdf\xe6\x11\xfd\x90\x91\xf9\x51\xcd\x10\x33\xa4\x9a\xca\x47\x77\xf3\x3c\x4b\x97\xc4\x6f\xaa\x39\x2b\xa8\xb2\xd9\xd1\xf0\x2c\x15\x79\xc4\xc6\x52\xb2\x71\x7e\x74\xdc\x7e\x20\xc8\x45\x0a\xa0\x6c\x78\x25\x6d\x25\xd4\xad\xde\x40\xf5\x2a\xd7\x35\x54\x46\x18\x4d\x50\xaa\x7a\xf1\x54\x63\x7a\x60\x85\x66\x35\x63\xc3\xab\x75\x08\x2b\x81\x04\xc5\x77\x70\xac\x9b\xe8\x36\x3b\x0b\xe1\x58\x29\x22\xe6\xa8\x30\x86\x88\x33\x55\x24\x27\xad\xe4\x25\xfd\xb5\x73\x2f\x7a\x1d\x28\x83\xd9\x46\xa1\x74\x3c\x66\x5a\xd9\x75\xba\x6c\x95\xcd\xf4\x81\x0e\x00\x5a\xdd\xf4\x08\x73\x49\x68\x8a\xe5\x6d\x76\xac\xc5\x34\x48\x58\x5a\x8f\x63\xd5\xa6\x17\xb7\xee\xab\x03\xd4\x82\x28\xa0\xd2\xec\x5d\xab\x9f\x32\xb3\xf6\x83\x5e\x94\x3f\x40\x4c\x85\xc9\x68\x37\xad\xe7\xe1\xf4\x76\xf7\x4c\xfe\xf5\x02\x0a\xbb\xab\xfb\x59\xb7\x71\x56\x0d\xd3\xf8\x3b\x3c\x50\xb5\xc8\x55\x13\xad\x84\x40\xa6\xca\x24\x03\xca\x77\x18\x5d\x5a\x72\xa1\xf5\x63\x9e\xb7\xf4\xd1\x51\xd7\xfb\x87\x26\x25\xfe\x3f\x83\xf1\xcd\x20\x70\xaa\x7f\x9e\xe4\x61\x3b\x0d\xf0\xae\xcc\x97\xbe\xa2\x07\x00\x65\x3f\xf8\x08\x37\x5b\xb9\x0f\x38\x47\x5e\xca\x5a\x98\x42\xad\xab\x8e\x8f\x35\x03\x80\x39\x32\x14\x34\xfa\x1d\x3f\xb4\xe4\x12\xd8\x6f\x2d\xf9\xe0\xdf\xed\x8f\xcf\xd3\x6f\xfc\xaf\xf6\xd7\xf2\x98\xec\xfc\x73\xba\x6b\xc5\x08\x5f\x3e\xa1\xae\xbe\xeb\xea\x6b\x5d\x2f\x62\x2b\xfb\xf7\x9a\x64\x57\x7f\xb8\x7a\x69\x9a\xbe\x4a\x42\x23\x53\xde\xb9\xbb\x33\xcf\xe5\xf4\xd0\xeb\x3b\x39\x03\x52\x87\xee\x31\xaf\xfb\x8f\x2e\x4d\x6b\xdf\x5a\xbd\x0f\xca\x36\xc9\x3e\x9a\x83\xa8\xd6\x3f\x65\xeb\xa4\x3f\xe5\xad\x8a\xb5\xf1\x6d\x46\xd9\x98\x09\xba\x41\xeb\xc9\xc8\x0e\xf0\x5a\xa8\x0c\x06\x83\x9a\x41\xf8\x56\xac\xe3\xdd\x92\xfe\xad\x8c\x89\x21\x04\xbf\x50\x16\xe7\x3f\xfd\xc7\x9e\xa1\x35\x9c\x60\x50\x3d\xe4\x12\xbd\x62\x7d\xbe\x19\x7b\x45\x54\x36\xaa\xbd\x94\x2d\x1e\xc2\x5e\xd8\x65\xc9\x13\xf5\x40\x04\x96\x0b\x26\x13\xd4\x32\xb5\xd2\x8f\x38\x93\x6a\x02\x41\xf1\x45\xc0\xdb\x8f\xdb\x81\x45\xde\x7a\x7f\x67\xb7\xb6\xf5\x50\x66\xbf\x57\x8d\xb5\x73\x6e\x3a\xb8\xad\x77\x3b\x01\x9c\xb8\xac\x34\xdd\x5c\xc0\x03\x02\x67\xe9\x26\x7f\xa5\x66\x8a\x37\xce\xb0\xe2\xce\x75\x4f\xc8\xbb\xf7\xc5\x47\xa6\x83\x5e\x60\x16\xd8\x41\xed\x33\xd3\x41\xd4\x9a\x3f\xc8\x04\xff\x0a\x00\x00\xff\xff\x91\x9b\xc3\xf8\x23\x2d\x00\x00")

func ResourcesComponentDescriptorOcmV3SchemaYamlBytes() ([]byte, error) {
	return bindataRead(
		_ResourcesComponentDescriptorOcmV3SchemaYaml,
		"../../../../../../../../resources/component-descriptor-ocm-v3-schema.yaml",
	)
}

func ResourcesComponentDescriptorOcmV3SchemaYaml() (*asset, error) {
	bytes, err := ResourcesComponentDescriptorOcmV3SchemaYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../../../../../../../../resources/component-descriptor-ocm-v3-schema.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"../../../../../../../../resources/component-descriptor-ocm-v3-schema.yaml": ResourcesComponentDescriptorOcmV3SchemaYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//
//	data/
//	  foo.txt
//	  img/
//	    a.png
//	    b.png
//
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"..": {nil, map[string]*bintree{
		"..": {nil, map[string]*bintree{
			"..": {nil, map[string]*bintree{
				"..": {nil, map[string]*bintree{
					"..": {nil, map[string]*bintree{
						"..": {nil, map[string]*bintree{
							"..": {nil, map[string]*bintree{
								"..": {nil, map[string]*bintree{
									"resources": {nil, map[string]*bintree{
										"component-descriptor-ocm-v3-schema.yaml": {ResourcesComponentDescriptorOcmV3SchemaYaml, map[string]*bintree{}},
									}},
								}},
							}},
						}},
					}},
				}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
