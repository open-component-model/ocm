name: Release

on:
  workflow_dispatch:
    inputs:
      release_candidate:
        type: boolean
        description: "Release Candidate"
        required: false
        default: false

jobs:
  lint-and-test:
    uses: ./.github/workflows/lint_and_test.yaml
    permissions:
      contents: read
      pull-requests: read
  release:
    needs: lint-and-test
    name: Trigger release build
    runs-on: ubuntu-latest
    permissions:
      contents: write
      repository-projects: read
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Setup Go
      uses: actions/setup-go@v3
      with:
        go-version-file: '${{ github.workspace }}/go.mod'

    - name: Setup Syft
      uses: anchore/sbom-action/download-syft@07978da4bdb4faa726e52dfc6b1bed63d4b56479 # v0.13.3

    - name: Setup Cosign
      uses: sigstore/cosign-installer@9becc617647dfa20ae7b1151972e9b3a2c338a2b # v2.8.1

    - name: Setup git config
      run: |
        git config user.name "GitHub Actions Bot"
        git config user.email "<41898282+github-actions[bot]@users.noreply.github.com>"

    - name: Cache go-build and mod
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build/
          ~/go/pkg/mod/
        key: go-${{ hashFiles('go.sum') }}
        restore-keys: |
          go-

    - name: Set Pre-Release Version
      if: inputs.release_candidate == true
      run: |
        RELEASE_VERSION=$(go run $GITHUB_WORKSPACE/pkg/version/generate print-rc-version)
        echo "RELEASE_VERSION=$RELEASE_VERSION" >> $GITHUB_ENV

    - name: Set Version
      if: inputs.release_candidate == false
      run: |
        RELEASE_VERSION=$(go run $GITHUB_WORKSPACE/pkg/version/generate print-version)
        echo "RELEASE_VERSION=$RELEASE_VERSION" >> $GITHUB_ENV

    - name: Set release notes file
      run: |
        RELEASE_NOTES_FILE=docs/releasenotes/$(go run $GITHUB_WORKSPACE/pkg/version/generate print-version).md
        echo "RELEASE_NOTES_FILE=$RELEASE_NOTES_FILE" >> $GITHUB_ENV

    - name: Validate release notes
      run: |
        if [[ ! -f ${{ env.RELEASE_NOTES_FILE }} ]]; then
          >&2 echo "Must have release notes ${{ env.RELEASE_NOTES_FILE }}"
          exit 6
        fi

    - name: Create or Push Release Branch
      env:
        RELEASE_BRANCH: release-${{ env.RELEASE_VERSION }}
      run: |
        if ! git checkout ${RELEASE_BRANCH} >/dev/null; then
            echo "Creating ${RELEASE_BRANCH} from $(git branch --show-current)"
            git checkout -b ${RELEASE_BRANCH}
            git push origin "$(git branch --show-current)"
        else
            git checkout ${RELEASE_BRANCH}
            git pull --ff-only origin ${RELEASE_BRANCH}
        fi

    - name: Push Tag
      run: |
        msg="Release ${{ env.RELEASE_VERSION }}"
        git tag --annotate --message "${msg}" ${{ env.RELEASE_VERSION }}
        git push origin ${{ env.RELEASE_VERSION }}

    - name: Run GoReleaser
      uses: goreleaser/goreleaser-action@v4
      with:
        distribution: goreleaser
        version: latest
        args: release --rm-dist --timeout 60m --skip-validate --config=./.goreleaser.yaml --release-notes=${{ env.RELEASE_NOTES_FILE }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        HOMEBREW_TAP_GITHUB_TOKEN: ${{ secrets.EVENT_API }}
        GORELEASER_CURRENT_TAG: ${{ env.RELEASE_VERSION }}

    - name: Publish Release Event
      if: inputs.release_candidate == false
      uses: peter-evans/repository-dispatch@v2
      with:
        token: ${{ secrets.EVENT_API }}
        repository: open-component-model/ocm-website
        event-type: ocm-cli-release
        client-payload: '{"tag": "${{ env.RELEASE_VERSION }}"}'
