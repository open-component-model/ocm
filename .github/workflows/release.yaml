name: Release

on:
  workflow_dispatch:
    inputs:
      release_candidate:
        type: boolean
        description: "Release Candidate"
        required: false
        default: false
      create_branch:
        type: boolean
        description: "Create Release Branch"
        required: false
        default: false
      prerelease:
        type: string
        description: "Release Candidate Name"
        required: false
        default: ""
env:
  OCI_URL: ghcr.io/jensh007
jobs:
  release:
    name: Release Build
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
      packages: write
    steps:
    # - name: Generate token
    #   id: generate_token
    #   uses: tibdex/github-app-token@v1
    #   with:
    #     app_id: ${{ secrets.OCMBOT_APP_ID }}
    #     private_key: ${{ secrets.OCMBOT_PRIV_KEY }}
    #
    # only jensh007!
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
        # token: ${{ steps.generate_token.outputs.token }}
    - name: Set Base Version
      run: |
        BASE_VERSION=v$(go run $GITHUB_WORKSPACE/pkg/version/generate print-version)
        echo "BASE_VERSION=$BASE_VERSION" >> $GITHUB_ENV

    - name: Set Pre-Release Version
      if: inputs.release_candidate == true
      run: |
        RELEASE_VERSION=v$(go run $GITHUB_WORKSPACE/pkg/version/generate --no-dev print-rc-version ${{ github.event.inputs.prerelease }})
        echo "RELEASE_VERSION=$RELEASE_VERSION" >> $GITHUB_ENV
        echo "release name is $RELEASE_VERSION"

    - name: Set Version
      if: inputs.release_candidate == false
      run: |
        RELEASE_VERSION=${{env.BASE_VERSION}}
        echo "RELEASE_VERSION=$RELEASE_VERSION" >> $GITHUB_ENV
        echo "release name is $RELEASE_VERSION"

  release-docker-image:
    runs-on: ubuntu-latest
    needs:
    - release
    permissions:
      packages: write
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Context for Buildx
        id: buildx-context
        run: |
          docker context create builders
      - name: Set up Docker Buildx
        timeout-minutes: 10
        uses: docker/setup-buildx-action@v2
        with:
          version: latest
      - name: Set Base Version
        run: |
          BASE_VERSION=v$(go run $GITHUB_WORKSPACE/pkg/version/generate print-version)
          echo "BASE_VERSION=$BASE_VERSION" >> $GITHUB_ENV
      - name: Set Pre-Release Version
        if: inputs.release_candidate == true
        run: |
          RELEASE_VERSION=v$(go run $GITHUB_WORKSPACE/pkg/version/generate --no-dev print-rc-version ${{ github.event.inputs.prerelease }})
          RELEASE_VERSION2="${RELEASE_VERSION:1}"
          echo "RELEASE_VERSION=$RELEASE_VERSION" >> $GITHUB_ENV
          echo "RELEASE_VERSION2=$RELEASE_VERSION2" >> $GITHUB_ENV
          echo "release name is ${{env.RELEASE_VERSION}}"
          echo "release name2 is ${{env.RELEASE_VERSION2}}"
      - name: Set Version
        if: inputs.release_candidate == false
        run: |
          RELEASE_VERSION=${{env.BASE_VERSION}}
          RELEASE_VERSION2="${RELEASE_VERSION:1}"
          echo "RELEASE_VERSION=$RELEASE_VERSION" >> $GITHUB_ENV
          echo "RELEASE_VERSION2=$RELEASE_VERSION2" >> $GITHUB_ENV
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build amd64
        id: build_amd64
        uses: docker/build-push-action@v3
        with:
          push: true
          load: false
          platforms: linux/amd64
          tags: ${{ env.OCI_URL }}/ocm-cli:${{ env.RELEASE_VERSION }}-linux-amd64
          build-args: |
            OCM_VERSION=${{ env.RELEASE_VERSION2 }}
            OCM_PLATFORM=linux-amd64
      - name: Build arm64
        id: build_arm64
        uses: docker/build-push-action@v3
        with:
          push: true
          load: false
          platforms: linux/arm64
          tags: ${{ env.OCI_URL }}/ocm-cli:${{ env.RELEASE_VERSION }}-linux-arm64
          build-args: |
            OCM_VERSION=${{ env.RELEASE_VERSION2 }}
            OCM_PLATFORM=linux-arm64
      - name: Create multi-platform image
        run: |
          docker buildx imagetools create ${{ env.OCI_URL }}/ocm-cli:${{ env.RELEASE_VERSION }}-linux-amd64 ${{ env.OCI_URL }}/ocm-cli:${{ env.RELEASE_VERSION }}-linux-arm64 -t ${{ env.OCI_URL }}/ocm-cli:${{ env.RELEASE_VERSION }}
      - name: Inspect image
        run: |
          docker buildx imagetools inspect ${{ env.OCI_URL }}/ocm-cli:${{ env.RELEASE_VERSION }}
