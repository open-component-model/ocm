name: publish as latest
on:
  # publish on pushes to the main branch (image tagged as "latest")
  # https://ocm.software/ocm/pkgs/container/ocm
  push:
    branches:
      - main
    paths:
      - '**/*.go'
      - '**/*.mod'
      - '**/*.sum'
      - 'resources/**'
      - '.github/config/latest.yml'

jobs:

  docker_publish:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
      packages: write
    steps:
      - name: Generate token
        id: generate_token
        uses: tibdex/github-app-token@3beb63f4bd073e61482598c45c71c1019b59b73a # v2.1.0
        with:
          app_id: ${{ secrets.OCMBOT_APP_ID }}
          private_key: ${{ secrets.OCMBOT_PRIV_KEY }}
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          token: ${{ steps.generate_token.outputs.token }}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@29109295f81e9208d7d86ff1c6c12d2833863392 # v3.6.0
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@b5ca514318bd6ebac0fb2aedd5d36ec1b5c232a2 # v3.10.0
      - name: Docker Login
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3.4.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@902fa8ec7d6ecbf8d84d538b9b233a880e428804 # v5.7.0
        with:
          images: |            
            ghcr.io/${{ github.repository }}
      - name: Go Build Cache for Docker
        uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
        with:
          path: go-build-cache
          key: ${{ runner.os }}-go-build-cache-${{ hashFiles('**/go.sum') }}
      - name: inject go-build-cache into docker
        uses: reproducible-containers/buildkit-cache-dance@653a570f730e3b9460adc576db523788ba59a0d7 # v3.2.0
        with:
          cache-source: go-build-cache
      - name: Build and push
        uses: docker/build-push-action@1dc73863535b631f98b2378be8619f83b136f4a0 # v6.17.0
        with:
          context: .
          # supported platforms: https://github.com/GoogleContainerTools/distroless?tab=readme-ov-file#what-images-are-available
          platforms: linux/amd64,linux/arm64 #linux/arm,linux/ppc64le,linux/s390x
          push: true
          tags: |
            ghcr.io/open-component-model/ocm:latest
            ghcr.io/open-component-model/ocm/ocm.software/ocmcli/ocmcli-image:latest
            ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  ocm-cli-latest:
    name: Build latest ocm-cli
    runs-on: large_runner
    permissions:
      contents: write
      id-token: write
      packages: write
    steps:
    - name: Self hosted runner post job cleanup
      uses: TooMuch4U/actions-clean@9b358e33df99574ac0bdf2e92fa3db1ae1415563 # v2.2
    - name: Generate token
      id: generate_token
      uses: tibdex/github-app-token@3beb63f4bd073e61482598c45c71c1019b59b73a # v2.1.0
      with:
        app_id: ${{ secrets.OCMBOT_APP_ID }}
        private_key: ${{ secrets.OCMBOT_PRIV_KEY }}
    - name: Checkout
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      with:
        fetch-depth: 0
        token: ${{ steps.generate_token.outputs.token }}
    - name: Enable github-cli
      uses: actions4gh/setup-gh@44a12005484c53be5bf51bebe8c985b4be8ba8de # v1.0.2
      with:
        token: ${{ steps.generate_token.outputs.token }}
    - name: Move tag to latest commit
      run: |
        gh api -X PATCH -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" /repos/open-component-model/ocm/git/refs/tags/ocm-cli/latest -f "sha=${{ github.sha }}" -F "force=true"
    - name: Setup go
      uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5.5.0
      with:
        go-version-file: '${{ github.workspace }}/go.mod'
        check-latest: false
        cache: false

    - name: Get go environment for use with cache
      run: |
        echo "go_cache=$(go env GOCACHE)" >> $GITHUB_ENV
        echo "go_modcache=$(go env GOMODCACHE)" >> $GITHUB_ENV

    # This step will only reuse the go mod and build cache from main made during the Build,
    # see push_ocm.yaml => "ocm-cli-latest" Job
    # This means it never caches by itself and PRs cannot cause cache pollution / thrashing
    # This is because we have huge storage requirements for our cache because of the mass of dependencies
    - name: Restore / Reuse Cache from central build
      id: cache-golang-restore
      # Only Restore, not build another cache (too big)
      uses: actions/cache/restore@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
      with:
        path: |
          ${{ env.go_cache }}
          ${{ env.go_modcache }}
        key: ${{ env.cache_name }}-${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}-${{ hashFiles('**/go.mod') }}
        restore-keys: |
          ${{ env.cache_name }}-${{ runner.os }}-go-
      env:
        cache_name: ocm-cli-latest-go-cache # needs to be the same key in the end as in the build step

    - name: Goreleaser release snapshot
      uses: goreleaser/goreleaser-action@9c156ee8a17a598857849441385a2041ef570552 # v6.3.0
      with:
        distribution: goreleaser
        version: 2.2.0
        args: release --clean --timeout 60m --snapshot --skip=validate --config=.github/config/latest.yml
      env:
        GITHUBORG: ${{ github.repository_owner }}
        GITHUB_TOKEN: ${{ steps.generate_token.outputs.token }}
        GORELEASER_CURRENT_TAG: v0.0.0
        GORELEASER_PREVIOUS_TAG: v0.0.0
    - name: Create or update release
      uses: ncipollo/release-action@440c8c1cb0ed28b9f43e4d1d670870f059653174 # v1.16.0
      with:
        name: latest ocm-cli
        tag: ocm-cli/latest
        artifacts: "dist/*.tar.gz, dist/*.zip, dist/*.sha256"
        token: ${{ steps.generate_token.outputs.token }}
        allowUpdates: true
        omitBodyDuringUpdate: true
        omitNameDuringUpdate: true
        prerelease: true
        draft: false
        removeArtifacts: true
        replacesArtifacts: true
        skipIfReleaseExists: false
        body: |
          holds always the latest ocm-cli binaries

    # This step is actually responsible for populating our build cache for the next runs in PRs or on main.
    - name: Save Cache of Build (only on main)
      id: cache-golang-save
      # Only save build cache once
      uses: actions/cache/save@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
      with:
        path: |
          ${{ env.go_cache }}
          ${{ env.go_modcache }}
        key: ${{ env.cache_name }}-${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}-${{ hashFiles('**/go.mod') }}
        upload-chunk-size: 256000000 # default of 32MB is not really optimal for our large cache, choose 256MB instead
      env:
        cache_name: ocm-cli-latest-go-cache # needs to be the same key in the end as in the build step
