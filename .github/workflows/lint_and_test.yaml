name: lint-and-test

on:
  pull_request:
  workflow_call:
  push:
    branches:
      - main

permissions:
  contents: read
  pull-requests: read

jobs:
  test:
    name: Run tests
    runs-on: large_runner
    steps:
      - name: Self Hosted Runner Post Job Cleanup Action
        uses: TooMuch4U/actions-clean@9b358e33df99574ac0bdf2e92fa3db1ae1415563 # v2.2
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - name: Setup Go
        uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5.5.0
        with:
          go-version-file: '${{ github.workspace }}/go.mod'
          cache: false
      - name: Get go environment for use with cache
        run: |
          echo "go_cache=$(go env GOCACHE)" >> $GITHUB_ENV
          echo "go_modcache=$(go env GOMODCACHE)" >> $GITHUB_ENV
      # This step will only reuse the go mod and build cache from main made during the Build,
      # see lint_and_test.yaml => "test" Job
      # This means it never caches by itself and PRs cannot cause cache pollution / thrashing
      # This is because we have huge storage requirements for our cache because of the mass of dependencies
      #
      # NOTE: This is different from our regular build cache (which contains all archs and is built in a different job)
      # This is because it requires caching of test dependencies, which are compiled only for linux-amd64 for test runs in CI.
      - name: Restore / Reuse Cache from central build
        id: cache-golang-restore
        # Only Restore, not build another cache (too big)
        uses: actions/cache/restore@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
        with:
          path: |
            ${{ env.go_cache }}
            ${{ env.go_modcache }}
          key: ${{ env.cache_name }}-${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}-${{ hashFiles('**/go.mod') }}
          restore-keys: |
            ${{ env.cache_name }}-${{ runner.os }}-go-
        env:
          cache_name: run-tests-go-cache # needs to be the same key in the end as in the build step
      - name: Build
        run: make build -j
      - name: Test
        run: make install-requirements test
      # NOTE: This is different from our regular build cache (which contains all archs and is built in a different job)
      # This is because it requires caching of test dependencies, which are compiled only for linux-amd64 for test runs in CI.
      - name: Save Cache of Build (only on main)
        id: cache-golang-save
        if: github.ref == 'refs/heads/main' # Only run on main, never in PR
        # Only saves cache build-test (linux-amd64)
        uses: actions/cache/save@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
        with:
          path: |
            ${{ env.go_cache }}
            ${{ env.go_modcache }}
          key: ${{ env.cache_name }}-${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}-${{ hashFiles('**/go.mod') }}
          upload-chunk-size: 256000000 # default of 32MB is not really optimal for our large cache, choose 256MB instead
        env:
          cache_name: run-tests-go-cache # needs to be the same key in the end as in the build step

  go-lint:
    name: Lint Golang
    runs-on: large_runner
    steps:
      - name: Self Hosted Runner Post Job Cleanup Action
        uses: TooMuch4U/actions-clean@9b358e33df99574ac0bdf2e92fa3db1ae1415563 # v2.2
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - name: Setup Go
        uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5.5.0
        with:
          go-version-file: '${{ github.workspace }}/go.mod'
          cache: false
      - name: Get go environment for use with cache
        run: |
          echo "go_cache=$(go env GOCACHE)" >> $GITHUB_ENV
          echo "go_modcache=$(go env GOMODCACHE)" >> $GITHUB_ENV
      # This step will only reuse the go mod and build cache from main made during the Build,
      # see push_ocm.yaml => "ocm-cli-latest" Job
      # This means it never caches by itself and PRs cannot cause cache pollution / thrashing
      # This is because we have huge storage requirements for our cache because of the mass of dependencies
      - name: Restore / Reuse Cache from central build
        id: cache-golang-restore
        # Only Restore, not build another cache (too big)
        uses: actions/cache/restore@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
        with:
          path: |
            ${{ env.go_cache }}
            ${{ env.go_modcache }}
          key: ${{ env.cache_name }}-${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}-${{ hashFiles('**/go.mod') }}
          restore-keys: |
            ${{ env.cache_name }}-${{ runner.os }}-go-
        env:
          cache_name: ocm-cli-latest-go-cache # needs to be the same key in the end as in the build step
      - name: Lint
        run: make check

  codespell: # call reusable workflow from central '.github' repo
    uses: open-component-model/.github/.github/workflows/codespell.yml@main
    secrets: inherit
    with:
      codespell-ignore: .github/config/wordlist.txt
      codespell-files-glob: ./**/*.y*ml ./**/*.go
