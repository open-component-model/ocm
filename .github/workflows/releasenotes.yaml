name: ReleaseNotes

on:
  workflow_dispatch:

jobs:
  releasenotes:
    name: Prepare Release Notes
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
      repository-projects: read
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Go
      uses: actions/setup-go@v5
      with:
        go-version-file: '${{ github.workspace }}/go.mod'
        cache: false

    - name: Get go environment for use with cache
      run: |
        echo "go_cache=$(go env GOCACHE)" >> $GITHUB_ENV
        echo "go_modcache=$(go env GOMODCACHE)" >> $GITHUB_ENV

    # This step will only reuse the go mod and build cache from main made during the Build,
    # see push_ocm.yaml => "ocm-cli-latest" Job
    # This means it never caches by itself and PRs cannot cause cache pollution / thrashing
    # This is because we have huge storage requirements for our cache because of the mass of dependencies
    - name: Restore / Reuse Cache from central build
      id: cache-golang-restore
      uses: actions/cache/restore@v4 # Only Restore, not build another cache (too big)
      with:
        path: |
          ${{ env.go_cache }}
          ${{ env.go_modcache }}
        key: ${{ env.cache_name }}-${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}-${{ hashFiles('**/go.mod') }}
        restore-keys: |
          ${{ env.cache_name }}-${{ runner.os }}-go-
      env:
        cache_name: ocm-cli-latest-go-cache # needs to be the same key in the end as in the build step

    - name: Setup git config
      run: |
        git config user.name "GitHub Actions Bot"
        git config user.email "<41898282+github-actions[bot]@users.noreply.github.com>"

    - name: Set Version
      run: |
        RELEASE_VERSION=v$(go run $GITHUB_WORKSPACE/api/version/generate print-version)
        echo "release version is $RELEASE_VERSION"
        echo "RELEASE_VERSION=$RELEASE_VERSION" >> $GITHUB_ENV

    - name: Get Draft Release Notes
      id: release-notes
      uses: cardinalby/git-get-release-action@v1
      env:
        GITHUB_TOKEN: ${{ github.token }}
      with:
        draft: true
        releaseName: ${{ env.RELEASE_VERSION }}

    - name: Update Release Notes File
      env:
        RELEASE_NOTES: ${{ steps.release-notes.outputs.body }}
      run: |
        set -e
        echo "Release Notes:\n $RELEASE_NOTES'"
        v="v$(go run $GITHUB_WORKSPACE/api/version/generate print-version)"
        f="docs/releasenotes/$v.md"
        echo "$RELEASE_NOTES" > "$f"
        git add "$f"
        git commit -m "ReleaseNotes for $RELEASE_VERSION"
        git push origin ${GITHUB_REF#refs/heads/}