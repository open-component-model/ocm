// Code generated by go-bindata. (@generated) DO NOT EDIT.

//Package jsonscheme generated by go-bindata.// sources:
// ../../../../../../resources/component-descriptor-v2-schema.yaml
package jsonscheme

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _ResourcesComponentDescriptorV2SchemaYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x59\xdd\x6f\xdb\x36\x10\x7f\xf7\x5f\x71\x40\x02\xd0\x6e\x22\x3b\xf1\xd0\x87\xfa\x25\x28\xda\x87\x0d\xfb\xe8\xd0\x16\x7b\x58\xea\x05\x8c\x74\xb6\x99\x49\xa4\x46\xd2\x6e\xbc\x36\xff\xfb\x40\x52\x94\xa8\xaf\xc4\x1f\x6d\x87\x61\x7d\x68\xc4\xd3\xf1\x78\x77\xfc\xdd\x97\x7c\xca\x92\x19\x90\x95\xd6\xb9\x9a\x4d\x26\x4b\x2a\x13\xe4\x28\xc7\x71\x2a\xd6\xc9\x44\xc5\x2b\xcc\xa8\x9a\xc4\x22\xcb\x05\x47\xae\xa3\x04\x55\x2c\x59\xae\x85\x8c\x36\x53\x32\x38\x75\x1c\x81\x84\x3b\x25\x78\xe4\xa8\x63\x21\x97\x93\x44\xd2\x85\x9e\x4c\x2f\xa6\x17\xd1\xe5\xb4\x10\x48\x06\x5e\x0c\x13\x7c\x06\xe4\x4d\x8e\x1c\x5e\xf9\x33\xe0\x67\x91\x60\x0a\x9b\x29\x78\xee\xd3\x04\x17\x6a\x36\x00\xc8\x50\x53\xf3\x17\x40\x6f\x73\x9c\x01\x11\xb7\x77\x18\x6b\x62\x49\x75\x99\xa5\xca\x50\xa9\x6c\xf7\x27\x54\x53\xb7\x41\xe2\x5f\x6b\x26\x31\x71\x12\x01\x22\x20\xee\xc4\xdf\x50\x2a\x26\xb8\xe3\xca\xa5\xc8\x51\x6a\x86\xca\xf3\xd5\x98\x3c\xb1\x54\x49\x69\xc9\xf8\x92\x0c\xac\xba\x72\x89\xbd\xfa\xb6\x05\xd3\x74\x29\x24\xd3\xab\xac\x12\x9a\x53\xad\x51\x1a\x83\xfe\xb8\xa6\xd1\xdf\x73\xf3\xdf\x45\xf4\x62\x72\x13\xcd\xcf\x4e\x49\xc1\x16\x0b\xbe\x60\xcb\x19\x7c\x82\x07\x4b\xa1\x49\xc2\x8c\x1b\x68\xfa\x6b\x75\x06\x2c\x68\xaa\x70\x00\x90\xd2\x5b\x4c\x7b\xb5\xea\x70\x0a\xa7\x19\x92\x6a\xb9\xa1\xe9\x1a\xfb\x4c\x30\xbc\xbd\x2e\x71\x44\xbb\x7f\x06\x9f\x1e\xfc\xba\xe9\xc8\xc0\xe6\xcd\xf5\x45\xf4\x22\xb0\x54\xb1\x25\x67\x7c\xd9\x3a\xe1\x56\x88\x14\x29\xf7\x6c\x81\xe3\xcd\xbf\x53\x89\x8b\x19\x90\x93\x89\x05\xd2\xc4\xbe\xb5\x17\x54\x82\xe4\x97\x52\xed\x0e\x95\x33\x7a\xff\x13\xf2\xa5\x5e\xcd\x60\xfa\xfc\xf9\xa0\xf3\x5a\x22\x77\x2f\xf3\x67\xc3\xeb\xf1\xbc\x41\x1a\x3d\xf3\xb4\x4f\xd3\xf3\x87\xe1\xa4\xf6\xfa\xa6\x63\xcb\x8d\xd9\x33\x32\x56\x0f\x00\x58\x82\x5c\x33\xbd\x7d\xa9\xb5\x64\xb7\x6b\x8d\x3f\xe2\xd6\xa9\x9a\x31\x5e\xea\xd5\xa5\x95\x39\x7c\x78\x1d\xdd\x9c\x79\x45\x3c\x71\x74\xe5\x44\x4b\x4c\xe9\x3d\x26\xef\x30\xdb\xa0\x74\x32\x4f\x40\xd3\x3f\x91\xc3\x42\x8a\x0c\x94\x7d\x61\xc2\x18\x28\x4f\x80\x26\x77\x6b\xa5\x31\x01\x2d\x80\xa6\xa9\xf8\x08\x94\x83\xc8\x1d\xd2\x20\x45\x9a\x30\xbe\x04\xb2\x21\xe7\x90\xd1\x3b\x21\x23\xc1\xd3\xed\xb9\xdd\x6a\xd7\xe3\x8c\xf1\x82\xea\xcf\x5a\x31\x05\x19\x52\xae\x40\xaf\x10\x16\xc2\x48\x35\x42\x9c\xfb\x15\x50\x89\xe6\x28\x83\x19\x96\xd4\xf5\x55\x5e\xe1\xcb\xf1\x74\xfc\x5d\xf8\x1c\x2d\x84\x38\xbb\xa5\xb2\xa0\x6d\x42\x86\x4d\x17\xc7\xe5\x78\xea\x9f\x4a\xb6\x80\xbf\x7c\xac\x6d\x0b\x9d\xbd\x99\x5f\x0d\x2f\x3e\x5f\x5f\x46\x2f\xe6\x1f\x92\x67\xa3\xe1\xd5\xec\xc3\x38\x24\x8c\xae\xba\x49\xd1\x70\x78\x35\xab\x88\x9f\x3f\x24\xf6\x8e\x5e\x46\xbf\x47\x73\x83\x7c\xff\xec\x45\xee\xc8\x3c\xf2\x27\x9e\x0d\xc3\x17\x67\x56\x48\x8d\x62\x39\x8b\xe8\x6a\xe7\xaf\x16\xf4\x9e\xca\x65\x5b\x13\x47\xca\x24\xa2\x46\xc8\x75\x81\x98\xc0\x83\x03\x61\x2e\x14\xd3\x42\x6e\x5f\x09\xae\xf1\x5e\xef\x93\x9a\x0c\x57\x5f\x2a\xb2\x12\x1e\xc9\xce\x34\x8e\x51\xa9\x1d\xcb\xc9\x2d\x55\x68\xb9\x60\x21\x64\xb1\x15\x15\x0c\xcd\x0a\xef\x35\x72\x93\xc2\xd4\xe8\x49\x45\x57\x8c\xf7\x1b\x58\x3f\x92\x7a\x5f\x29\x77\x26\x48\x5c\xa0\x44\x1e\xa3\x95\x62\x6d\x50\x62\x2d\x63\x7c\x8d\x0b\xc6\x6d\xc6\xdf\xc3\x77\x26\x53\x97\x8b\x22\x07\x97\x6b\x23\xa1\x5c\x38\x6b\x0f\x4f\xf8\xad\x04\xdc\x89\x86\x82\x19\xef\xb5\xa4\x3f\x14\x0c\xbd\x29\xbc\x25\x81\xf4\x15\x93\xc6\xc6\x5a\x0a\x21\xbb\x20\xc5\x11\x6d\xd1\x54\x2d\x26\x2a\x25\xdd\x56\x76\x32\x8d\x59\xc0\xd4\x3a\xdd\x4a\xf1\xec\x21\xfe\xba\x98\xdd\x7b\xcf\x5d\x5e\xfe\xf7\x8c\xeb\xa3\x15\x29\x01\x94\xb0\x25\x2a\xfd\x2e\xc7\x78\x0f\xe8\xac\xa8\x5a\xbd\xf4\xbd\x4a\x05\x28\x21\x33\x9a\x32\x45\x0d\x10\xdb\xaf\x6d\xd9\xef\x01\x51\x4d\x60\xd3\x36\x77\x11\x1e\x6e\x9d\x87\x3c\xba\xc5\xf5\x1b\xdd\x1c\x03\x00\xcd\x32\x54\x9a\x66\x79\xd3\x09\xce\x07\x3d\x1a\x3f\x26\xb4\x20\xb1\x76\x60\xd4\x18\xc0\x84\x75\x46\xf5\x0c\x12\xaa\x31\x32\xfc\x36\xa4\xd9\x92\x53\xbd\x96\xb8\xe7\xa5\xd0\x47\x3c\x6e\x56\x19\x26\x8c\xbe\xf7\x71\xbd\x53\xf3\xb9\xa7\x33\x1d\xa9\x3c\xa7\xe2\xaa\xe7\xb5\xf7\x2b\x74\x4c\x2e\x9f\x8a\x85\xad\xfd\xa5\xd9\x10\xf4\x97\x5d\xf7\x55\x32\x1e\x9a\xeb\x1c\xe4\xcb\x65\x29\x6f\x87\xd6\x79\xd7\x04\x58\x73\x88\x3b\xaf\x37\x23\x55\x11\x18\x36\xb9\x81\x85\x1d\x7b\x6a\x18\x21\x01\xe0\x2c\x90\x7b\xb7\xd5\xa0\x6e\xc3\x9f\xa3\x69\xe8\x5e\x1f\x92\x04\x4a\x9f\x1e\xe0\x92\x56\x96\xee\xe0\x39\xb2\x10\xec\xe1\xf5\xd2\x0f\xe5\x08\xea\x1c\xd2\xdf\x1b\xec\x51\x4d\x9f\xf2\x4e\x43\xaf\xda\x44\x72\x54\x51\xdb\x1b\x76\x12\x8b\x6e\x22\x34\x1e\x0e\x2e\x31\x4d\x68\xb9\x7e\x45\xc6\x6f\x71\xb1\x6b\x03\x14\x74\x3c\x66\xe4\x80\x61\xf5\x1d\x22\x15\x31\x4d\x47\x45\xff\x43\x0e\x0c\x5d\x0f\x9e\x77\x98\x62\xac\x85\xdc\x1f\x65\x5f\xb4\x2d\x08\x07\xd2\xb7\xde\xf2\x43\x7d\x55\x4a\xda\x75\xac\xef\x44\x9e\x19\xf7\xc3\x8f\x21\xfb\xfb\xb8\x63\xc4\xde\x15\xf6\x8f\xb5\x96\x70\x02\x34\xd6\x6b\x9a\xa6\xdb\x59\x75\x46\x64\x2b\xca\xc7\x09\xa8\x1c\x63\x46\x53\x83\x69\x2d\x59\x6c\x54\x56\xff\x95\x6e\xf4\x2b\xb4\x9a\xcd\x5c\x20\x38\xbe\x59\x84\x9b\x23\x7f\x0a\x5f\xa7\x29\xa9\xbd\x78\x3c\x71\x96\x49\xe3\xe9\x11\xe4\xb1\x81\xca\x8b\x51\x3b\x7f\x84\x2a\x50\x09\x27\x76\xbf\x4d\x07\x95\x94\xf3\xe2\xcb\xc2\x5a\x69\xc8\xa8\x8e\x57\x41\x38\xa8\xd6\xb0\x13\x4c\x91\x76\x69\x6e\x45\x97\x90\xb7\xa4\xb0\x17\xff\xdf\xce\x40\x2e\x79\x1f\x8d\x4c\x27\xa6\xaa\x3a\xce\xd9\x4f\xfa\x0f\xf9\x3a\x9b\xc1\x35\xb1\x57\x4d\xce\x81\x98\xb1\x5b\x72\x9a\x92\xf9\xd7\x0b\x9c\xd6\x8c\xf6\xed\x87\x34\xf7\xea\xeb\x45\x70\x19\x19\x3b\x57\x9a\xbd\x4b\x4b\xad\x84\x58\x4a\x2e\xc5\x86\x25\x15\xfa\x22\x20\xb5\x04\x50\xaf\x48\x65\x31\x54\xb5\x28\xad\xed\xf8\xd7\xfa\xac\x58\xa2\x05\xf0\xfb\x8e\x79\xef\xda\xa3\xf8\xbc\xb8\x97\x79\xc9\xd0\x9e\xfd\x3c\x84\x1a\x9f\xc3\x8e\x86\x51\x4b\xa2\xdf\xea\x2f\xe1\xdb\x7f\xfa\x28\x6e\xee\xe8\x4c\xd2\x28\x3d\xa4\xd9\x73\x54\xc0\x39\xf6\xa8\xb6\xc8\x66\xdb\xfc\x05\xee\xa9\x6d\xcf\xa0\x11\x8e\x61\xac\x45\x40\x32\x74\xbf\x65\x85\xc1\x42\x06\xf5\x50\xa8\x7e\x33\x6b\xfd\x0c\xe2\x36\x37\x12\x40\x9f\xe1\x24\x9c\xbd\xeb\xa3\x51\x60\x68\xcd\xc8\xbe\xa9\x95\x34\x26\xcf\x83\xa4\x75\x8f\x6c\xe4\x9f\x00\x00\x00\xff\xff\xb3\x7d\xfe\xdf\xd0\x1c\x00\x00")

func ResourcesComponentDescriptorV2SchemaYamlBytes() ([]byte, error) {
	return bindataRead(
		_ResourcesComponentDescriptorV2SchemaYaml,
		"../../../../../../resources/component-descriptor-v2-schema.yaml",
	)
}

func ResourcesComponentDescriptorV2SchemaYaml() (*asset, error) {
	bytes, err := ResourcesComponentDescriptorV2SchemaYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../../../../../../resources/component-descriptor-v2-schema.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"../../../../../../resources/component-descriptor-v2-schema.yaml": ResourcesComponentDescriptorV2SchemaYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//
//	data/
//	  foo.txt
//	  img/
//	    a.png
//	    b.png
//
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"..": {nil, map[string]*bintree{
		"..": {nil, map[string]*bintree{
			"..": {nil, map[string]*bintree{
				"..": {nil, map[string]*bintree{
					"..": {nil, map[string]*bintree{
						"..": {nil, map[string]*bintree{
							"resources": {nil, map[string]*bintree{
								"component-descriptor-v2-schema.yaml": {ResourcesComponentDescriptorV2SchemaYaml, map[string]*bintree{}},
							}},
						}},
					}},
				}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
