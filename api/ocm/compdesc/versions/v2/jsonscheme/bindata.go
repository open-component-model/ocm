// Code generated by go-bindata. (@generated) DO NOT EDIT.

//Package jsonscheme generated by go-bindata.// sources:
// ../../../../../../resources/component-descriptor-v2-schema.yaml
package jsonscheme

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _ResourcesComponentDescriptorV2SchemaYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x59\x4f\x6f\x1b\xb7\x12\xbf\xeb\x53\x0c\x60\x03\x94\x62\xaf\x64\xeb\x21\x87\xec\xc5\x08\x92\xcb\xc3\x7b\x6d\x8a\x24\xe8\xa1\x8a\x6a\xd0\xbb\xb3\x12\xdd\x5d\x72\x4b\x52\x8a\xd5\xc4\xdf\xbd\x20\xb9\xdc\xff\x2b\x4b\x72\xd2\xa2\xe8\x25\x11\x87\xc3\xe1\x70\xe6\x37\xff\xd6\xe7\x2c\x0e\x81\xac\xb5\xce\x55\x38\x9b\xad\xa8\x8c\x91\xa3\x9c\x46\xa9\xd8\xc4\x33\x15\xad\x31\xa3\x6a\x16\x89\x2c\x17\x1c\xb9\x0e\x62\x54\x91\x64\xb9\x16\x32\xd8\xce\xc9\xe8\xdc\x71\xd4\x24\xdc\x2b\xc1\x03\x47\x9d\x0a\xb9\x9a\xc5\x92\x26\x7a\x36\xbf\x9a\x5f\x05\xd7\xf3\x42\x20\x19\x79\x31\x4c\xf0\x10\xc8\xbb\x1c\x39\xbc\xf1\x77\xc0\x0f\x22\xc6\x14\xb6\x73\xf0\xdc\xe7\x31\x26\x2a\x1c\x01\x64\xa8\xa9\xf9\x1f\x40\xef\x72\x0c\x81\x88\xbb\x7b\x8c\x34\xb1\xa4\xa6\xcc\x52\x65\xa8\x54\xb6\xe7\x63\xaa\xa9\x3b\x20\xf1\xf7\x0d\x93\x18\x3b\x89\x00\x01\x10\x77\xe3\xcf\x28\x15\x13\xdc\x71\xe5\x52\xe4\x28\x35\x43\xe5\xf9\x1a\x4c\x9e\x58\xaa\xa4\xb4\x64\x7c\x45\x46\x56\x5d\xb9\xc2\x41\x7d\xbb\x82\x69\xba\x12\x92\xe9\x75\x56\x09\xcd\xa9\xd6\x28\xcd\x83\x7e\x5d\xd0\xe0\x8f\xa5\xf9\xe7\x2a\x78\x35\xbb\x0d\x96\x17\xe7\xa4\x60\x8b\x04\x4f\xd8\x2a\x84\x2f\xf0\x68\x29\x34\x8e\x99\x31\x03\x4d\x7f\xaa\xee\x80\x84\xa6\x0a\x47\x00\x29\xbd\xc3\x74\x50\xab\x1e\xa3\x70\x9a\xe1\x90\xca\x66\x6f\xd0\x04\xc5\xab\xa2\x08\x95\xaa\x98\xce\x25\x26\x21\x90\xb3\x99\x75\xeb\xcc\x6d\x7b\xe6\x2d\x4d\x37\x18\xc2\x97\x47\xbf\x6e\x5b\xb9\x66\x90\xed\xe2\x2a\x78\x55\x33\x83\x62\x2b\xce\xf8\xaa\xa3\xce\x9d\x10\x29\x52\xee\xd9\x6a\x5e\xe9\x51\xc7\xee\x5a\xef\x95\x08\xfa\xb1\x7c\x63\xcf\xfb\x32\xfa\xf0\x7f\xe4\x2b\xbd\x0e\x61\xfe\xf2\xe5\xa8\xd7\x67\x81\x73\xda\xf2\xc5\x78\x31\x5d\xb6\x48\x93\x17\x9e\xf6\x65\x7e\xf9\x38\x9e\x35\xb6\x6f\x7b\x8e\xdc\x9a\x33\x13\xf3\xea\x11\x00\x8b\x91\x6b\xa6\x77\xaf\xb5\x96\xec\x6e\xa3\xf1\x7f\xb8\x73\xaa\x66\x8c\x97\x7a\xf5\x69\x65\x2e\x1f\x2f\x82\xdb\x0b\xaf\x88\x27\x4e\x6e\x9c\x68\x89\x29\x7d\xc0\xf8\x03\x66\x5b\x94\x4e\xe6\x19\x68\xfa\x1b\x72\x48\xa4\xc8\x40\xd9\x0d\x13\xe3\x40\x79\x0c\x34\xbe\xdf\x28\x8d\x31\x68\x01\x34\x4d\xc5\x67\xa0\x1c\x44\xee\x60\x08\x29\xd2\x98\xf1\x15\x90\x2d\xb9\x84\x8c\xde\x0b\x19\x08\x9e\xee\x2e\xed\x51\xbb\x9e\x66\x8c\x17\x54\x7f\xd7\x9a\x29\xc8\x90\x72\x05\x7a\x8d\x90\x08\x23\xd5\x08\x71\xe6\x57\x40\x25\x9a\xab\x0c\x66\x58\xdc\xd4\x57\x79\x85\xaf\xa7\xf3\xe9\x7f\xea\xbf\x83\x44\x88\x8b\x3b\x2a\x0b\xda\xb6\xce\xb0\xed\xe3\xb8\x9e\xce\xfd\xaf\x92\xad\xc6\x5f\xfe\x6c\x1c\xab\x1b\x7b\xbb\xbc\x19\x5f\x7d\x5d\x5c\x07\xaf\x96\x9f\xe2\x17\x93\xf1\x4d\xf8\x69\x5a\x27\x4c\x6e\xfa\x49\xc1\x78\x7c\x13\x56\xc4\xaf\x9f\x62\xeb\xa3\xd7\xc1\x2f\xc1\xd2\x20\xdf\xff\xf6\x22\x0f\x64\x9e\xf8\x1b\x2f\xc6\xf5\x8d\x0b\x2b\xa4\x41\xb1\x9c\x45\x74\x75\x93\x5b\x07\x7a\x4f\x25\xba\x9d\x89\x23\x65\xb2\x54\x2b\xe4\xfa\x40\x4c\xe0\xd1\x81\x30\x17\x8a\x69\x21\x77\x6f\x04\xd7\xf8\xa0\x8f\xc9\x5b\x86\x6b\x28\x6f\x59\x09\x7b\x52\x77\x3d\x69\x3d\x59\x6b\xee\xa8\x42\xcb\x05\x89\x90\xc5\x51\x54\x30\x36\x2b\x7c\xd0\xc8\x4d\x0a\x53\x93\x27\x14\x1d\x01\x28\xb1\x91\x11\xbe\xc5\x84\x71\x9b\xc0\x8f\x78\xad\x49\xc4\xe5\xa2\xc8\x9a\xe5\xda\x48\x28\x17\x4e\xbf\xd3\xf3\x79\x27\x65\xf6\xfa\xaf\x60\xc6\x07\x2d\xe9\x7f\x0b\x86\xc1\xa4\xdb\x91\x40\x86\xd2\x7f\xeb\x60\x23\xe8\xc9\x21\xbe\x75\x44\x5b\x03\x55\x87\x89\x4a\x49\x77\xd5\x3b\x99\xc6\xac\xc6\xd4\xb9\xdd\x4a\x19\x2a\x73\x43\x75\x6e\x04\x10\xb3\x15\x2a\xfd\x21\xc7\xe8\x08\x07\xaf\xa9\x5a\xbf\xf6\x0d\x42\xe5\x76\x21\x33\x9a\x32\x45\x0d\x5c\xba\xdb\xb6\x9c\x0e\xb8\xba\x21\xb0\x6d\x0a\x67\x2e\x0f\x8a\xde\x4b\xf6\x1e\x71\x75\xbc\x9f\x63\x04\xa0\x59\x86\x4a\xd3\x2c\x6f\x1b\xc1\xd9\x60\x40\xe3\x7d\x42\x0b\x12\xeb\xc2\xb7\xc1\x00\x26\x44\x33\xaa\x43\x88\xa9\xc6\xc0\xf0\xdb\xc0\x63\x2b\x4e\xf5\x46\xe2\x91\x4e\xa1\x7b\x2c\x6e\x56\x19\xc6\x8c\x7e\xf4\xd1\x77\x50\xc7\x77\xa4\x31\x1d\xa9\xbc\xa7\xe2\x6a\xa6\xa8\x8f\x6b\x74\x4c\x2e\x4f\x89\xc4\xd6\xd4\xf2\xd9\xee\x0a\x32\xe8\xaf\x92\xf1\xd4\x8c\xe4\x20\x5f\x2e\x4b\x79\x07\xf4\xab\x87\xa6\xa9\x86\x41\xdc\x7d\x83\x79\xa3\x8a\xc0\x7a\xf3\x58\x7b\x61\xcf\x99\x06\x46\x48\x0d\x70\x16\xc8\x83\xc7\x1a\x50\xb7\xe1\xcf\xd1\x34\x4a\x6f\x4f\x49\x02\xa5\x4d\x4f\x30\x49\x27\x97\xf6\xf0\x3c\x33\x5d\x1f\x61\xf5\xd2\x0e\xe5\xdc\xe7\x0c\x32\x5c\x73\x8f\xa8\x79\x4f\x59\xa7\xa5\x57\xa3\xd3\x7f\x56\xe9\x39\x1a\x76\x12\x8b\x9a\x5f\x7f\x3c\x9c\x5c\x91\xda\xd0\x72\x5d\x85\x8c\xde\x63\x72\x60\x2f\x43\x41\x62\x82\x12\x79\x84\xb6\x95\x87\x71\x35\xfc\xa7\x22\xa2\xe9\xa4\xe8\x52\xc8\x89\xa1\xeb\xc1\xf3\x01\x53\x8c\xb4\x90\xc7\xa3\xec\x9b\x16\xef\xfa\xa0\xf7\xde\xbf\xfc\x54\x5b\x95\x92\x0e\x98\xa5\xed\xb2\x17\x79\x01\x90\x6d\xfd\x0b\xc4\xf1\x36\xee\x19\x5d\x0f\x85\xfd\xbe\x06\x10\xce\x80\x46\x7a\x43\xd3\x74\x17\x56\x77\x04\xb6\xa2\x7c\x9e\x81\xca\x31\x62\x34\x35\x98\xd6\x92\x45\x46\x65\xf5\x4f\xe9\x19\xbf\x43\x43\xd8\xce\x05\x82\xe3\xbb\xa4\x7e\x38\xf0\xb7\xf0\x4d\x9a\x92\xc6\xc6\xfe\xc4\x59\x26\x8d\xa7\x07\x85\x7d\x83\x8a\x17\xa3\x0e\x45\xab\x47\x25\x9c\xd9\xf3\x36\x1d\x54\x52\x2e\x8b\x89\x7d\xa3\x34\x64\x54\x47\xeb\x5a\x38\xa8\xce\x48\x52\x9b\xce\xec\xd2\x78\x45\x97\x90\xb7\xa4\xfa\x97\xa1\x7f\xed\xa4\xe2\x92\xf7\xb3\x91\xe9\xc4\x54\x55\xc7\x19\xfb\x49\xfb\x21\xdf\x64\x21\x2c\x88\x75\x35\xb9\x04\x62\xc6\x59\xc9\x69\x4a\x96\xdf\x2f\x70\x3a\x93\xd4\xfe\x4f\x86\xdf\x2f\xce\x4a\xfc\x1e\x5c\x0f\x8e\x2e\x00\x8d\x44\x5f\x04\x42\xeb\x93\x87\xaa\x6d\xe6\x52\x6c\x59\x5c\x01\x28\x00\xd2\x88\xe1\x66\x51\x29\xeb\x99\x6a\xc8\x6f\x9c\xf8\xdb\x5a\xa5\x48\xa2\xc5\xe0\xc7\x9e\x91\x6d\xe1\x81\x78\x59\x38\x6d\x59\x32\x74\xc7\x37\x0f\xe9\xb6\xd9\x9e\x8b\xc9\x8e\x44\x7f\xd4\x3b\xe1\xaf\xff\xc6\x50\x78\xee\xd9\xc9\xa0\x55\x3d\x48\xbb\x6d\xa8\x80\xf3\xdc\xab\xba\x22\xdb\x9d\xef\x37\xf0\x53\xf7\x3d\xa3\x56\xac\xd6\x03\x31\x00\x92\xa1\xfb\x1b\x50\x3d\x58\xc8\xa8\x19\x0a\xd5\xdf\x9a\x3a\x7f\x21\x70\x87\x5b\xd9\x61\xe8\xe1\xa4\x3e\x3e\x37\xa7\x9b\xda\x43\x1b\x8f\x1c\x1a\x3c\x49\x6b\x78\x3c\x49\x5a\xff\xd4\x45\x46\x7f\x06\x00\x00\xff\xff\x20\x51\xa5\x8d\x09\x1c\x00\x00")

func ResourcesComponentDescriptorV2SchemaYamlBytes() ([]byte, error) {
	return bindataRead(
		_ResourcesComponentDescriptorV2SchemaYaml,
		"../../../../../../resources/component-descriptor-v2-schema.yaml",
	)
}

func ResourcesComponentDescriptorV2SchemaYaml() (*asset, error) {
	bytes, err := ResourcesComponentDescriptorV2SchemaYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../../../../../../resources/component-descriptor-v2-schema.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"../../../../../../resources/component-descriptor-v2-schema.yaml": ResourcesComponentDescriptorV2SchemaYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//
//	data/
//	  foo.txt
//	  img/
//	    a.png
//	    b.png
//
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"..": {nil, map[string]*bintree{
		"..": {nil, map[string]*bintree{
			"..": {nil, map[string]*bintree{
				"..": {nil, map[string]*bintree{
					"..": {nil, map[string]*bintree{
						"..": {nil, map[string]*bintree{
							"resources": {nil, map[string]*bintree{
								"component-descriptor-v2-schema.yaml": {ResourcesComponentDescriptorV2SchemaYaml, map[string]*bintree{}},
							}},
						}},
					}},
				}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
