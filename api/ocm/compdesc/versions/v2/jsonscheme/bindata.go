// Code generated by go-bindata. (@generated) DO NOT EDIT.

//Package jsonscheme generated by go-bindata.// sources:
// ../../../../../../resources/component-descriptor-v2-schema.yaml
package jsonscheme

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _ResourcesComponentDescriptorV2SchemaYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x59\xdd\x6f\xdb\x36\x10\x7f\xf7\x5f\x71\x40\x02\xd0\x6e\x22\x3b\xf1\xd0\x87\xea\x25\x28\xda\x87\x0d\xfb\xe8\xd0\x16\x7b\x58\xea\x05\x8c\x74\xb2\x99\x49\xa4\x46\xd2\x6e\xbc\x36\xff\xfb\x40\x52\xd4\xb7\x12\x7f\xb4\x1d\x86\xf5\xa1\x11\x4f\x77\xc7\xe3\xf1\x77\x5f\xf2\x29\x8b\x43\x20\x2b\xad\x73\x15\xce\x66\x4b\x2a\x63\xe4\x28\xa7\x51\x2a\xd6\xf1\x4c\x45\x2b\xcc\xa8\x9a\x45\x22\xcb\x05\x47\xae\x83\x18\x55\x24\x59\xae\x85\x0c\x36\x73\x32\x3a\x75\x1c\x35\x0d\x77\x4a\xf0\xc0\x51\xa7\x42\x2e\x67\xb1\xa4\x89\x9e\xcd\x2f\xe6\x17\xc1\xe5\xbc\x50\x48\x46\x5e\x0d\x13\x3c\x04\xf2\x26\x47\x0e\xaf\xfc\x1e\xf0\xb3\x88\x31\x85\xcd\x1c\x3c\xf7\x69\x8c\x89\x0a\x47\x00\x19\x6a\x6a\xfe\x02\xe8\x6d\x8e\x21\x10\x71\x7b\x87\x91\x26\x96\xd4\xd4\x59\x9a\x0c\x95\xc9\x56\x3e\xa6\x9a\x3a\x01\x89\x7f\xad\x99\xc4\xd8\x69\x04\x08\x80\xb8\x1d\x7f\x43\xa9\x98\xe0\x8e\x2b\x97\x22\x47\xa9\x19\x2a\xcf\xd7\x60\xf2\xc4\xd2\x24\xa5\x25\xe3\x4b\x32\xb2\xe6\xca\x25\x0e\xda\xdb\x55\x4c\xd3\xa5\x90\x4c\xaf\xb2\x4a\x69\x4e\xb5\x46\x69\x0e\xf4\xc7\x35\x0d\xfe\x5e\x98\xff\x2e\x82\x17\xb3\x9b\x60\x71\x76\x4a\x0a\xb6\x48\xf0\x84\x2d\x43\xf8\x04\x0f\x96\x42\xe3\x98\x19\x37\xd0\xf4\xd7\x6a\x0f\x48\x68\xaa\x70\x04\x90\xd2\x5b\x4c\x07\xad\xea\x71\x0a\xa7\x19\x92\x6a\xb9\xa1\xe9\x1a\x87\x8e\x60\x78\x07\x5d\xe2\x88\x56\x3e\x84\x4f\x0f\x7e\xdd\x76\x64\xed\xcc\x9b\xeb\x8b\xe0\x45\xed\xa4\x8a\x2d\x39\xe3\xcb\xce\x0e\xb7\x42\xa4\x48\xb9\x67\xab\x39\xde\xfc\x3b\x95\x98\x84\x40\x4e\x66\x16\x48\x33\xfb\xd6\x5e\x50\x09\x92\x5f\x4a\xb3\x7b\x4c\xce\xe8\xfd\x4f\xc8\x97\x7a\x15\xc2\xfc\xf9\xf3\x51\xef\xb5\x04\xee\x5e\x16\xcf\xc6\xd7\xd3\x45\x8b\x34\x79\xe6\x69\x9f\xe6\xe7\x0f\xe3\x59\xe3\xf5\x4d\x8f\xc8\x8d\x91\x99\x98\x53\x8f\x00\x58\x8c\x5c\x33\xbd\x7d\xa9\xb5\x64\xb7\x6b\x8d\x3f\xe2\xd6\x99\x9a\x31\x5e\xda\xd5\x67\x95\xd9\x7c\x7c\x1d\xdc\x9c\x79\x43\x3c\x71\x72\xe5\x54\x4b\x4c\xe9\x3d\xc6\xef\x30\xdb\xa0\x74\x3a\x4f\x40\xd3\x3f\x91\x43\x22\x45\x06\xca\xbe\x30\x61\x0c\x94\xc7\x40\xe3\xbb\xb5\xd2\x18\x83\x16\x40\xd3\x54\x7c\x04\xca\x41\xe4\x0e\x69\x90\x22\x8d\x19\x5f\x02\xd9\x90\x73\xc8\xe8\x9d\x90\x81\xe0\xe9\xf6\xdc\x8a\xda\xf5\x34\x63\xbc\xa0\xfa\xbd\x56\x4c\x41\x86\x94\x2b\xd0\x2b\x84\x44\x18\xad\x46\x89\x73\xbf\x02\x2a\xd1\x6c\x65\x30\xc3\xe2\xa6\xbd\xca\x1b\x7c\x39\x9d\x4f\xbf\xab\x3f\x07\x89\x10\x67\xb7\x54\x16\xb4\x4d\x9d\x61\xd3\xc7\x71\x39\x9d\xfb\xa7\x92\xad\xc6\x5f\x3e\x36\xc4\xea\xce\xde\x2c\xae\xc6\x17\x9f\xaf\x2f\x83\x17\x8b\x0f\xf1\xb3\xc9\xf8\x2a\xfc\x30\xad\x13\x26\x57\xfd\xa4\x60\x3c\xbe\x0a\x2b\xe2\xe7\x0f\xb1\xbd\xa3\x97\xc1\xef\xc1\xc2\x20\xdf\x3f\x7b\x95\x3b\x32\x4f\xfc\x8e\x67\xe3\xfa\x8b\x33\xab\xa4\x41\xb1\x9c\x45\x74\x75\xf3\x57\x07\x7a\x4f\xe5\xb2\xad\x89\x23\x65\x12\x51\x2b\xe4\xfa\x40\x4c\xe0\xc1\x81\x30\x17\x8a\x69\x21\xb7\xaf\x04\xd7\x78\xaf\xf7\x49\x4d\x86\x6b\x28\x15\x59\x0d\x8f\x64\x67\x1a\x45\xa8\xd4\x8e\xe5\xe4\x96\x2a\xb4\x5c\x90\x08\x59\x88\xa2\x82\xb1\x59\xe1\xbd\x46\x6e\x52\x98\x9a\x3c\x69\xe8\x8a\xf1\xe1\x03\x36\xb7\xa4\xde\x57\xca\xed\x09\x12\x13\x94\xc8\x23\xb4\x5a\x9c\x08\xd3\x98\x35\x4f\xdc\xcc\x5d\x83\xa6\x8c\x00\x94\x58\xcb\x08\x5f\x63\xc2\xb8\x2d\x17\x7b\x38\xde\xa4\xf9\x72\x51\x24\xf0\x72\x6d\x34\x94\x0b\xe7\xaa\xc3\xab\x45\x27\x7b\xf7\x42\xa9\x60\xc6\x7b\x2d\xe9\x0f\x05\xc3\x60\xfe\xef\x68\x20\x43\x95\xa8\x25\xd8\xc8\x3f\x64\x17\x98\x39\xa2\xad\xb8\xaa\xc3\x44\xa5\xa4\xdb\xea\x9c\x8d\xab\xec\xd9\xdd\x6a\xf1\xec\x75\xf0\xf6\x31\xbb\xf7\x9e\xbb\x44\xce\xf7\x8c\xeb\xa3\x0d\x71\xe8\x1b\x01\xc4\x6c\x89\x4a\xbf\xcb\x31\xda\x03\x3a\x2b\xaa\x56\x2f\x7d\xa3\x53\x01\x4a\xc8\x8c\xa6\x4c\x51\x03\xc4\xee\x6b\xdb\x33\x0c\x80\xa8\xa1\xb0\x7d\x36\x77\x11\x1e\x6e\xbd\x9b\x3c\x2a\xe2\x9a\x95\x7e\x8e\x11\x80\x66\x19\x2a\x4d\xb3\xbc\xed\x04\xe7\x83\x01\x8b\x1f\x53\x5a\x90\x58\x37\x30\x1a\x0c\x60\x72\x42\x46\x75\x08\x31\xd5\x18\x18\x7e\x1b\xd2\x6c\xc9\xa9\x5e\x4b\xdc\xf3\x52\xe8\x23\x1e\x37\xab\x0c\x63\x46\xdf\xfb\xb8\xde\xa9\x73\xdd\xd3\x99\x8e\x54\xee\x53\x71\x35\x93\xe2\xfb\x15\x3a\x26\x97\x8c\x45\x62\x1b\x87\xf2\xd8\x50\x6b\x4e\xfb\xee\xab\x64\x3c\x34\xd7\x39\xc8\x97\xcb\x52\xdf\x0e\x7d\xf7\xae\x09\xb0\xe1\x10\xb7\xdf\x60\x46\xaa\x22\xb0\xde\x21\xd7\x4e\xd8\x23\xd3\xc0\x08\xa9\x01\xce\x02\x79\x50\xac\x01\x75\x1b\xfe\x1c\x4d\x37\xf8\xfa\x90\x24\x50\xfa\xf4\x00\x97\x74\xb2\x74\x0f\xcf\x91\x85\x60\x0f\xaf\x97\x7e\x28\xe7\x57\xe7\x90\xe1\xc6\x62\x8f\x6a\xfa\x94\x77\x5a\x76\x35\xc6\x99\xa3\x8a\xda\xde\xb0\x93\x58\x74\x13\xf5\xc3\xc3\xc1\x25\xa6\x0d\x2d\xd7\xaf\xc8\xe8\x2d\x26\xbb\x76\x4f\xb5\x76\xc9\xcc\x2b\x30\xae\x3e\x62\xa4\x22\xa2\xe9\xa4\xe8\x7f\xc8\x81\xa1\xeb\xc1\xf3\x0e\x53\x8c\xb4\x90\xfb\xa3\xec\x8b\xb6\x05\xf5\x69\xf6\xad\x3f\xf9\xa1\xbe\x2a\x35\xed\xfa\x4d\xa0\x17\x79\x01\x90\x4d\xfd\x4b\xca\xfe\x3e\xee\x99\xcf\x77\x85\xfd\x63\xad\x25\x9c\x00\x8d\xf4\x9a\xa6\xe9\x36\xac\xf6\x08\x6c\x45\xf9\x38\x03\x95\x63\xc4\x68\x6a\x30\xad\x25\x8b\x8c\xc9\xea\xbf\xd2\x8d\x7e\x85\x56\xb3\x9d\x0b\x04\xc7\x37\x49\x5d\x38\xf0\xbb\xf0\x75\x9a\x92\xc6\x8b\xc7\x13\x67\x99\x34\x9e\x1e\x41\x1e\x9b\xc6\xbc\x1a\xb5\xf3\x17\xac\x02\x95\x70\x62\xe5\x6d\x3a\xa8\xb4\x9c\x17\x9f\x25\xd6\x4a\x43\x46\x75\xb4\xaa\x85\x83\xea\x0c\x3b\xb5\x11\xd4\x2e\xcd\xad\xe8\x12\xf2\x96\x54\xef\xc5\xff\xb7\x33\x90\x4b\xde\x47\x23\xd3\xa9\xa9\xaa\x8e\x73\xf6\x93\xfe\x43\xbe\xce\x42\xb8\x26\xf6\xaa\xc9\x39\x10\x33\xb3\x4b\x4e\x53\xb2\xf8\x7a\x81\xd3\x99\xd1\xbe\xfd\x90\xe6\x5e\x7d\xbd\x08\x2e\x23\x63\xe7\x4a\xb3\x77\x69\x69\x94\x10\x4b\xc9\xa5\xd8\xb0\xb8\x42\x5f\x00\xa4\x91\x00\x9a\x15\xa9\x2c\x86\xaa\x11\xa5\x0d\x89\x7f\xad\xcf\x8a\x24\x5a\x00\xbf\xef\x99\xf7\xae\x3d\x8a\xcf\x8b\x7b\x59\x94\x0c\xdd\xd9\xcf\x43\xa8\xf5\x2d\xed\x68\x18\x75\x34\x7a\x51\x7f\x09\xdf\xfe\xd3\x47\x71\x73\x47\x67\x92\x56\xe9\x21\xed\x9e\xa3\x02\xce\xb1\x5b\x75\x55\xb6\xdb\xe6\x2f\x70\x4f\xdd\xf3\x8c\x5a\xe1\x58\x8f\xb5\x00\x48\x86\xee\x87\xb0\x7a\xb0\x90\x51\x33\x14\xaa\x1f\xdc\x3a\xbf\xa1\x38\xe1\x56\x02\x18\x3a\x38\xa9\xcf\xde\xcd\xd1\xa8\x76\xd0\xc6\x21\x87\xa6\x56\xd2\x9a\x3c\x0f\xd2\xd6\x3f\xb2\x91\x7f\x02\x00\x00\xff\xff\xfa\x59\xba\x9c\x0d\x1d\x00\x00")

func ResourcesComponentDescriptorV2SchemaYamlBytes() ([]byte, error) {
	return bindataRead(
		_ResourcesComponentDescriptorV2SchemaYaml,
		"../../../../../../resources/component-descriptor-v2-schema.yaml",
	)
}

func ResourcesComponentDescriptorV2SchemaYaml() (*asset, error) {
	bytes, err := ResourcesComponentDescriptorV2SchemaYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../../../../../../resources/component-descriptor-v2-schema.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"../../../../../../resources/component-descriptor-v2-schema.yaml": ResourcesComponentDescriptorV2SchemaYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//
//	data/
//	  foo.txt
//	  img/
//	    a.png
//	    b.png
//
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"..": {nil, map[string]*bintree{
		"..": {nil, map[string]*bintree{
			"..": {nil, map[string]*bintree{
				"..": {nil, map[string]*bintree{
					"..": {nil, map[string]*bintree{
						"..": {nil, map[string]*bintree{
							"resources": {nil, map[string]*bintree{
								"component-descriptor-v2-schema.yaml": {ResourcesComponentDescriptorV2SchemaYaml, map[string]*bintree{}},
							}},
						}},
					}},
				}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
