// Code generated by go-bindata. (@generated) DO NOT EDIT.

//Package jsonscheme generated by go-bindata.// sources:
// ../../../../../../../resources/component-descriptor-ocm-v3-schema.yaml
package jsonscheme

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _ResourcesComponentDescriptorOcmV3SchemaYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x59\x4d\x6f\xdb\x38\x13\xbe\xfb\x57\x0c\x90\x00\xb2\x9b\xc8\x4e\x52\xf4\x50\x5d\x82\xa2\x3d\xbc\x2f\xf6\xa3\x8b\x6d\xb1\x87\x4d\xbd\x01\x23\x8d\x6c\xa6\x12\xa9\x25\x69\x27\xde\x36\xff\x7d\x41\x52\x94\x28\x59\x72\x6c\xb9\xc5\x62\xb1\x97\x44\x1c\xce\x0c\x87\xf3\xc5\x87\xf4\x29\x4d\x22\x08\x96\x4a\x15\x32\x9a\xcd\x16\x44\x24\xc8\x50\x4c\xe3\x8c\xaf\x92\x99\x8c\x97\x98\x13\x39\x8b\x79\x5e\x70\x86\x4c\x85\x09\xca\x58\xd0\x42\x71\x11\xf2\x38\x0f\xd7\x2f\x49\x56\x2c\xc9\x65\x30\x3a\xb5\xbc\x9e\xae\x7b\xc9\x59\x68\xa9\x53\x2e\x16\xb3\x44\x90\x54\xcd\xae\x2e\xae\x2e\xc2\xcb\xab\x52\x75\x30\x72\x0a\x29\x67\x11\x04\xef\xdf\xfe\x04\x6f\xdd\x62\xf0\xae\x5a\x0c\xd6\x2f\xc1\x49\x9c\x26\x98\xca\x68\x04\x90\xa3\x22\xfa\x3f\x80\xda\x14\x18\x41\xc0\xef\xee\x31\x56\x81\x21\x35\xf5\x56\x1b\x80\x35\x0a\x49\x39\x33\xc2\x09\x51\xc4\x72\x0b\xfc\x73\x45\x05\x26\x56\x1d\x40\x08\x01\x23\x39\x06\xf5\xb0\x94\xb3\x14\x92\x24\x54\x6b\x26\xd9\x2f\x82\x17\x28\x14\x45\x19\x41\x4a\x32\x89\x66\xbe\xa8\xa9\xa5\x06\xad\xcd\x7d\x03\x9c\x0a\x4c\x23\x08\x4e\x66\x66\x2f\xb5\x7b\x7f\xf6\xd6\x2c\x17\xec\x15\x12\x98\x91\x47\x4c\x3e\x60\xbe\x46\xe1\x84\x32\x72\x87\x99\xec\x95\xb1\xd3\x8e\xb9\x10\x7c\x4d\x13\x14\xbd\xec\x8e\xc1\x09\xc4\x02\x89\xde\xf6\x47\xea\x6f\xc6\x3a\x5f\x2a\x41\xd9\xa2\x22\xa6\x5c\xe4\x44\x45\x90\x10\x85\xa1\xa2\x39\x8e\x4c\xc0\xc4\x02\x7b\x23\xb6\xed\x34\x92\x2d\xb8\xa0\x6a\x99\xd7\x8b\x15\x44\x29\x14\x3a\xa4\x7f\xdc\x90\xf0\xaf\xb9\xfe\x73\x11\xbe\x9e\xdd\x86\xf3\xb3\xd3\xca\x4e\xce\x52\xba\x88\xe0\x0b\x3c\xed\x11\x2e\xdf\x67\xa5\x59\x44\x08\xb2\xb1\xda\xa8\xc2\xbc\x32\xa8\xcb\x9d\x81\x53\xd1\xbb\xb1\x3d\x92\x8b\x64\x2b\xec\xf3\x42\x33\x75\x3a\xbc\x6d\xa4\x23\xf8\xf2\xd4\x97\x39\x9e\xd3\xd6\x37\x17\xe1\x6b\xcf\x55\x92\x2e\x18\x65\x8b\xb6\xfe\xe0\x8e\xf3\x0c\x09\x73\x6c\x5e\xe4\x3a\xfc\x60\x66\x9f\xaf\x8c\x91\x8e\x8c\x97\xe9\x0d\x87\xd9\x1d\x59\x25\x39\x79\xfc\x11\xd9\x42\x2d\x23\xb8\x7a\xf5\x6a\xd4\x19\xf7\xd0\x06\x7e\xfe\x62\x7c\x33\x9d\xb7\x48\x93\x17\x8e\xf6\xe5\xea\xfc\x69\x3c\x6b\x4c\xdf\x76\x88\xdc\x6a\x99\x89\xf6\xca\x08\x80\x26\xc8\x14\x55\x9b\x37\x4a\x09\x7a\xb7\x52\xf8\x03\x6e\xac\xa9\x39\x65\x95\x5d\x5d\x56\xe9\xc5\xc7\x37\xe1\xed\x99\x33\xc4\x11\x27\xd7\x56\x75\xa3\x66\xad\xce\x13\x50\xe4\x33\x32\x48\x05\xcf\x41\x9a\x09\xdd\x2d\x81\xb0\x04\x48\x72\xbf\x92\x0a\x13\x50\x1c\x48\x96\xf1\x07\x20\x0c\x78\x61\xfd\x0b\x19\x92\x84\xb2\x05\x04\xeb\xe0\x1c\x72\x72\xaf\x5b\x32\xcb\x36\xe7\x46\xd4\x8c\xa7\x39\x65\x25\xd5\xad\xb5\xa4\x12\x72\x24\x4c\x82\x5a\x22\xa4\x5c\x6b\xd5\x4a\xac\xfb\x25\x10\x81\x7a\x29\x9d\x53\x34\x69\xda\x2b\x9d\xc1\x97\xd3\xab\xe9\x4b\xff\x3b\x4c\x39\x3f\xbb\x23\xa2\xa4\xad\x7d\x86\x75\x17\xc7\xe5\xf4\xca\x7d\x55\x6c\x1e\x7f\xf5\xd9\x10\xf3\x9d\xbd\x9e\x5f\x8f\x2f\xbe\xde\x5c\x86\xaf\xe7\x9f\x92\x17\x93\xf1\x75\xf4\x69\xea\x13\x26\xd7\xdd\xa4\x70\x3c\xbe\x8e\x6a\xe2\xd7\x4f\x89\x89\xd1\x9b\xf0\xf7\x70\xae\x2b\xc3\x7d\x3b\x95\x7b\x32\x4f\xdc\x8a\x67\x63\x7f\xe2\xcc\x28\x69\x50\x0c\x67\x59\x7d\xad\xcc\xef\x4a\xbd\xe7\x9a\xe5\x46\xd7\x91\xd4\x9d\xae\x55\x92\x5d\x49\x1c\xc0\x93\x4d\xc2\x82\x4b\xaa\xb8\xd8\xbc\xe5\x4c\xe1\xa3\x3a\xa4\x71\x69\xae\xbe\x46\x65\x34\xb4\x1b\x89\xb7\x3b\x12\xc7\x28\xe5\x9e\x27\xf6\x1d\x91\x68\xb8\xf4\x51\x52\x8a\xa2\x84\xb1\x1e\xe1\xa3\x42\xa6\x5b\x9c\x9c\x3c\x63\xe8\x08\x60\x49\x59\xff\x0e\x9b\x6b\x12\xe7\x2c\x69\x17\x05\x81\x29\x0a\x64\x31\x1a\x2d\x46\x9d\xe4\x2b\x11\xe3\x3b\x4c\x29\x33\x8d\xee\x00\xe7\xe9\x46\x5e\x0d\xca\x26\x5d\x8d\xb5\x86\x6a\x60\xb7\x7b\xc0\x79\xd0\x68\x9f\x1d\x1d\xba\x33\x1d\x4a\x66\x7c\x54\x82\xfc\xbf\x64\xe8\xed\xf1\x5b\x1a\x8e\xc2\x29\x3b\x53\xc5\x12\x0f\x82\x32\x7e\x6a\x75\x30\xdb\x69\xc7\x5c\x45\xf5\x7f\x94\x29\xb9\x65\x86\x77\xf8\x43\x1b\x00\x74\xe8\xae\x32\x23\xa1\x0b\x94\xea\x43\x81\xf1\x01\x39\xb1\x24\x72\xf9\xc6\xc1\x9c\x3a\x53\x34\x7a\xca\xa8\x34\x68\x6b\x7b\xda\x1c\xf8\x03\x81\x68\x63\xc1\x9d\xb0\xa2\xdb\x88\x3d\x90\x48\x37\xc7\x08\x40\xe3\x40\xa9\x48\x5e\xb4\x9d\x64\x7d\xd4\x63\xf1\x2e\xa5\x25\x69\x20\x1e\xd5\xe0\x87\xa8\x95\xc0\x03\x83\x46\x76\x44\x44\x8f\x72\x4c\x28\xf9\xe8\x0a\xfa\xf0\x18\x75\xe0\xde\x03\x9d\x6d\x49\x95\x1d\x35\x57\xb3\xe1\x7d\x5c\xa2\x65\xb2\x9d\x96\xa7\x06\x15\x54\x6e\x01\x0f\x97\x76\xc5\xb3\x62\x1c\xda\x04\x6d\xc9\x54\xc3\x4a\xdf\x40\xbf\x3d\x8b\x94\xed\x7a\xbd\x6d\xa2\xae\x60\x1f\x1e\x7b\x3b\xec\x90\x69\xe4\x50\xe0\x25\xa4\x49\xf4\x5e\xb1\x46\x29\x98\xf6\xc1\x50\x43\xbd\x77\x43\x9a\x48\x9f\x4f\x87\xdc\x25\xda\xdd\xbc\x83\xe7\xc8\x03\xe3\x80\x20\x54\x6e\xa9\xde\x04\xac\x7f\xfa\x41\xc4\x81\xa7\x6e\x2b\x01\x05\x96\xc7\xbb\x5d\xe5\x9b\xa4\xe1\x77\xbb\xeb\x1f\x9c\xcc\xad\xdd\x1d\x7b\xf0\xb5\x13\xd6\xc2\x23\x11\xff\x8a\xe9\xbe\x78\xcb\x03\x58\xfa\x8a\x03\xe3\xfa\xa1\x29\xe3\x31\xc9\x26\x25\xdc\x1a\xfa\xea\xe2\x72\xf0\x03\x66\x18\x2b\xde\xff\xd2\xd1\x9b\xac\x7b\xa2\x90\x91\x87\x2a\x86\x6e\xbe\xda\xfb\xbe\xaf\x06\x9d\xa9\x74\xfc\x53\x55\xc7\x1d\x7d\xdf\x3c\xde\x05\x4d\xe1\x04\x48\xac\x56\x24\xcb\x36\x51\xbd\x46\x68\x0e\x9e\x87\x19\xc8\x02\x63\x4a\x32\x9d\xa4\x4a\xd0\x58\x9b\x2c\xff\x2d\x68\xf6\x20\xa8\xda\x2e\x5b\xce\xf0\x7d\xea\x97\x59\xe8\x1c\xc7\x56\x59\x16\x34\x26\x76\xb7\xca\xaa\xbe\x9f\xbf\x9c\xec\xba\x6b\x39\x35\xf2\xd0\xa7\x51\x38\x31\xf2\xa6\x72\x6b\x2d\xe7\xe5\xa3\xc3\x4a\x2a\xc8\x89\x8a\x97\x5e\xa2\xcb\xad\x86\xec\x5d\x30\xcd\x50\xfb\x5b\x55\xc9\x6c\x48\x3e\x98\xff\xcf\xde\x8e\x6c\x9f\x3d\xba\x87\x5b\x35\xf5\x01\x61\x9d\xfd\xac\xff\x90\xad\xf2\x08\x6e\x02\x13\xea\xe0\x1c\x02\x7d\x23\x17\x8c\x64\xc1\x7c\x48\x49\xfc\xe3\xb7\x37\x3b\xf5\xfd\x2a\xb3\xf9\xd2\x7e\xe8\x13\xf1\xb7\x01\xc2\xc3\xae\xd7\xfa\x48\xdf\x05\x46\x9b\x8d\xc4\x34\xf1\x94\xc6\x26\x8b\xdc\x75\x22\xe6\x4c\x21\x53\x7a\xe8\x1d\x72\xae\x32\xd4\xd0\x3d\x96\xed\xe5\xe8\x0a\x68\xb5\xcc\xad\x34\x3b\x7a\x85\x4a\x53\x1b\x87\x7d\x03\xcd\xdb\xd6\x8f\x5a\x41\xf2\x33\x4b\x37\xcf\x82\xfe\x56\xc3\x83\x10\x82\xcf\x94\x25\xe5\xa7\xff\x93\x58\x68\x83\x19\x8c\x9a\x8e\xaf\xc5\x7b\x1f\xef\xcb\xde\x00\x01\x8f\xf3\x69\xeb\xf7\xc4\xea\xe7\xc2\x73\x3b\x2d\x79\xaa\x1e\x88\xc0\x7a\x02\x74\x03\xd1\x36\xf5\xea\x8f\x39\x93\x2a\x82\xa0\xba\x12\x78\xfb\x71\x3b\xb0\xc2\x5b\xbf\x52\xd8\xad\x6d\xbd\x7f\x0e\xfa\xed\x67\x4b\x8b\x3e\xfe\xe2\x95\x10\xc8\x54\xb6\x39\x87\x07\x04\xce\xb2\x4d\xf9\x6e\x6f\x8e\x40\xce\xb0\x51\x4e\xed\x4c\x2c\xa1\x7a\x75\xa3\x1c\x64\x57\x25\x1d\xb4\xee\x94\x83\xb4\x75\xdf\xbe\x82\xbf\x03\x00\x00\xff\xff\xf4\x1b\x39\x66\x35\x1e\x00\x00")

func ResourcesComponentDescriptorOcmV3SchemaYamlBytes() ([]byte, error) {
	return bindataRead(
		_ResourcesComponentDescriptorOcmV3SchemaYaml,
		"../../../../../../../resources/component-descriptor-ocm-v3-schema.yaml",
	)
}

func ResourcesComponentDescriptorOcmV3SchemaYaml() (*asset, error) {
	bytes, err := ResourcesComponentDescriptorOcmV3SchemaYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../../../../../../../resources/component-descriptor-ocm-v3-schema.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"../../../../../../../resources/component-descriptor-ocm-v3-schema.yaml": ResourcesComponentDescriptorOcmV3SchemaYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//
//	data/
//	  foo.txt
//	  img/
//	    a.png
//	    b.png
//
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"..": {nil, map[string]*bintree{
		"..": {nil, map[string]*bintree{
			"..": {nil, map[string]*bintree{
				"..": {nil, map[string]*bintree{
					"..": {nil, map[string]*bintree{
						"..": {nil, map[string]*bintree{
							"..": {nil, map[string]*bintree{
								"resources": {nil, map[string]*bintree{
									"component-descriptor-ocm-v3-schema.yaml": {ResourcesComponentDescriptorOcmV3SchemaYaml, map[string]*bintree{}},
								}},
							}},
						}},
					}},
				}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
